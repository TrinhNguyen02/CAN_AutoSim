
CAN_node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005574  08005574  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005574  08005574  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005574  08005574  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005574  08005574  00015574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800557c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001098  20000010  0800558c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010a8  0800558c  000210a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135c7  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bd1  00000000  00000000  00033600  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001190  00000000  00000000  000361d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001048  00000000  00000000  00037368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000191bc  00000000  00000000  000383b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd70  00000000  00000000  0005156c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097252  00000000  00000000  0005f2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f652e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004900  00000000  00000000  000f65ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080054cc 	.word	0x080054cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080054cc 	.word	0x080054cc

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <HAL_TIM_PeriodElapsedCallback>:
void StartDefaultTask(void const * argument);
void StartTask02(void const * argument);

/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	429a      	cmp	r2, r3
 8000192:	d10e      	bne.n	80001b2 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		if (tmp_cnt > 49)
 8000194:	4b0a      	ldr	r3, [pc, #40]	; (80001c0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	2b31      	cmp	r3, #49	; 0x31
 800019a:	d904      	bls.n	80001a6 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			tmp_cnt = 0;
 800019c:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]
			control_light_IT();
 80001a2:	f000 f80f 	bl	80001c4 <control_light_IT>
		}
		tmp_cnt++;
 80001a6:	4b06      	ldr	r3, [pc, #24]	; (80001c0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	3301      	adds	r3, #1
 80001ac:	b2da      	uxtb	r2, r3
 80001ae:	4b04      	ldr	r3, [pc, #16]	; (80001c0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80001b0:	701a      	strb	r2, [r3, #0]
	}
}
 80001b2:	bf00      	nop
 80001b4:	3708      	adds	r7, #8
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	20001058 	.word	0x20001058
 80001c0:	20000280 	.word	0x20000280

080001c4 <control_light_IT>:

void control_light_IT ()
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	switch (light_mode)
 80001c8:	4b28      	ldr	r3, [pc, #160]	; (800026c <control_light_IT+0xa8>)
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	2b03      	cmp	r3, #3
 80001ce:	d83b      	bhi.n	8000248 <control_light_IT+0x84>
 80001d0:	a201      	add	r2, pc, #4	; (adr r2, 80001d8 <control_light_IT+0x14>)
 80001d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001d6:	bf00      	nop
 80001d8:	080001e9 	.word	0x080001e9
 80001dc:	08000219 	.word	0x08000219
 80001e0:	08000231 	.word	0x08000231
 80001e4:	08000203 	.word	0x08000203
	{
	case stop_light:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001ee:	4820      	ldr	r0, [pc, #128]	; (8000270 <control_light_IT+0xac>)
 80001f0:	f001 fe86 	bl	8001f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001fa:	481d      	ldr	r0, [pc, #116]	; (8000270 <control_light_IT+0xac>)
 80001fc:	f001 fe80 	bl	8001f00 <HAL_GPIO_WritePin>
		break;
 8000200:	e032      	b.n	8000268 <control_light_IT+0xa4>

	case light_hazard:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8000202:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000206:	481a      	ldr	r0, [pc, #104]	; (8000270 <control_light_IT+0xac>)
 8000208:	f001 fe92 	bl	8001f30 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800020c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000210:	4817      	ldr	r0, [pc, #92]	; (8000270 <control_light_IT+0xac>)
 8000212:	f001 fe8d 	bl	8001f30 <HAL_GPIO_TogglePin>
		break;
 8000216:	e027      	b.n	8000268 <control_light_IT+0xa4>

	case light_left:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8000218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800021c:	4814      	ldr	r0, [pc, #80]	; (8000270 <control_light_IT+0xac>)
 800021e:	f001 fe87 	bl	8001f30 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000228:	4811      	ldr	r0, [pc, #68]	; (8000270 <control_light_IT+0xac>)
 800022a:	f001 fe69 	bl	8001f00 <HAL_GPIO_WritePin>
		break;
 800022e:	e01b      	b.n	8000268 <control_light_IT+0xa4>

	case light_right:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000236:	480e      	ldr	r0, [pc, #56]	; (8000270 <control_light_IT+0xac>)
 8000238:	f001 fe62 	bl	8001f00 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800023c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000240:	480b      	ldr	r0, [pc, #44]	; (8000270 <control_light_IT+0xac>)
 8000242:	f001 fe75 	bl	8001f30 <HAL_GPIO_TogglePin>
		break;
 8000246:	e00f      	b.n	8000268 <control_light_IT+0xa4>

	default:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800024e:	4808      	ldr	r0, [pc, #32]	; (8000270 <control_light_IT+0xac>)
 8000250:	f001 fe56 	bl	8001f00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800025a:	4805      	ldr	r0, [pc, #20]	; (8000270 <control_light_IT+0xac>)
 800025c:	f001 fe50 	bl	8001f00 <HAL_GPIO_WritePin>
		light_mode = stop_light;
 8000260:	4b02      	ldr	r3, [pc, #8]	; (800026c <control_light_IT+0xa8>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
		break;
 8000266:	bf00      	nop
	}

}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	200010a0 	.word	0x200010a0
 8000270:	40011000 	.word	0x40011000

08000274 <light_mgs_parse>:

void light_mgs_parse (uint8_t light_mode_msg)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000284:	4821      	ldr	r0, [pc, #132]	; (800030c <light_mgs_parse+0x98>)
 8000286:	f001 fe3b 	bl	8001f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000290:	481e      	ldr	r0, [pc, #120]	; (800030c <light_mgs_parse+0x98>)
 8000292:	f001 fe35 	bl	8001f00 <HAL_GPIO_WritePin>
	uint8_t tmp_mark = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	73fb      	strb	r3, [r7, #15]
	if ((light_mode_msg >> 0) & 0x01)
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d005      	beq.n	80002b0 <light_mgs_parse+0x3c>
	{
		HAL_TIM_Base_Stop_IT(&htim2);
 80002a4:	481a      	ldr	r0, [pc, #104]	; (8000310 <light_mgs_parse+0x9c>)
 80002a6:	f002 fb9f 	bl	80029e8 <HAL_TIM_Base_Stop_IT>
		light_mode = stop_light;
 80002aa:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <light_mgs_parse+0xa0>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	701a      	strb	r2, [r3, #0]
	}

	if ((light_mode_msg >> 1) & 0x01)
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	085b      	lsrs	r3, r3, #1
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	f003 0301 	and.w	r3, r3, #1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d006      	beq.n	80002cc <light_mgs_parse+0x58>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 80002be:	4814      	ldr	r0, [pc, #80]	; (8000310 <light_mgs_parse+0x9c>)
 80002c0:	f002 fb40 	bl	8002944 <HAL_TIM_Base_Start_IT>
		light_mode = light_hazard;
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <light_mgs_parse+0xa0>)
 80002c6:	2203      	movs	r2, #3
 80002c8:	701a      	strb	r2, [r3, #0]
 80002ca:	e01a      	b.n	8000302 <light_mgs_parse+0x8e>
	}
	else if ((light_mode_msg >> 2) & 0x01)
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	089b      	lsrs	r3, r3, #2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d006      	beq.n	80002e8 <light_mgs_parse+0x74>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 80002da:	480d      	ldr	r0, [pc, #52]	; (8000310 <light_mgs_parse+0x9c>)
 80002dc:	f002 fb32 	bl	8002944 <HAL_TIM_Base_Start_IT>
		light_mode = light_left;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <light_mgs_parse+0xa0>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	701a      	strb	r2, [r3, #0]
 80002e6:	e00c      	b.n	8000302 <light_mgs_parse+0x8e>
	}
	else if ((light_mode_msg >> 3) & 0x01)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	08db      	lsrs	r3, r3, #3
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d005      	beq.n	8000302 <light_mgs_parse+0x8e>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 80002f6:	4806      	ldr	r0, [pc, #24]	; (8000310 <light_mgs_parse+0x9c>)
 80002f8:	f002 fb24 	bl	8002944 <HAL_TIM_Base_Start_IT>
		light_mode = light_right;
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <light_mgs_parse+0xa0>)
 80002fe:	2202      	movs	r2, #2
 8000300:	701a      	strb	r2, [r3, #0]

	if ((light_mode_msg >> 7) & 0x01)
	{
		/* T.B.D */
	}
}
 8000302:	bf00      	nop
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40011000 	.word	0x40011000
 8000310:	20001058 	.word	0x20001058
 8000314:	200010a0 	.word	0x200010a0

08000318 <clear_buff>:

void clear_buff (uint8_t * buff_clear, size_t num)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
	if (buff_clear == NULL) return;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d005      	beq.n	8000334 <clear_buff+0x1c>

	memset(buff_clear, 0, num);
 8000328:	683a      	ldr	r2, [r7, #0]
 800032a:	2100      	movs	r1, #0
 800032c:	6878      	ldr	r0, [r7, #4]
 800032e:	f005 f8c4 	bl	80054ba <memset>
 8000332:	e000      	b.n	8000336 <clear_buff+0x1e>
	if (buff_clear == NULL) return;
 8000334:	bf00      	nop
}
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) != HAL_OK)
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000346:	4a10      	ldr	r2, [pc, #64]	; (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000348:	2100      	movs	r1, #0
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f001 f81d 	bl	800138a <HAL_CAN_GetRxMessage>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	  {
	    Error_Handler();
 8000356:	f000 fa4b 	bl	80007f0 <Error_Handler>
	  }
	  if (rx_header.StdId == 0x210)
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8000362:	d107      	bne.n	8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
	  {
		  osMessagePut(light_msgHandle, rx_data[0], 0);
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000366:	6818      	ldr	r0, [r3, #0]
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2200      	movs	r2, #0
 800036e:	4619      	mov	r1, r3
 8000370:	f002 ff6c 	bl	800324c <osMessagePut>
	  }
	  clear_buff(&rx_data, sizeof(uint8_t)*8);
 8000374:	2108      	movs	r1, #8
 8000376:	4803      	ldr	r0, [pc, #12]	; (8000384 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000378:	f7ff ffce 	bl	8000318 <clear_buff>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20001050 	.word	0x20001050
 8000388:	20000fd4 	.word	0x20000fd4
 800038c:	20001048 	.word	0x20001048

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b5b0      	push	{r4, r5, r7, lr}
 8000392:	b092      	sub	sp, #72	; 0x48
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000396:	f000 fb7d 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039a:	f000 f853 	bl	8000444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039e:	f000 f98b 	bl	80006b8 <MX_GPIO_Init>
  MX_CAN_Init();
 80003a2:	f000 f8e9 	bl	8000578 <MX_CAN_Init>
  MX_TIM2_Init();
 80003a6:	f000 f93b 	bl	8000620 <MX_TIM2_Init>
  MX_ADC1_Init();
 80003aa:	f000 f8a7 	bl	80004fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 80003ae:	481e      	ldr	r0, [pc, #120]	; (8000428 <main+0x98>)
 80003b0:	f000 ffa7 	bl	8001302 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003b4:	2102      	movs	r1, #2
 80003b6:	481c      	ldr	r0, [pc, #112]	; (8000428 <main+0x98>)
 80003b8:	f001 f8f8 	bl	80015ac <HAL_CAN_ActivateNotification>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of light_msg */
  osMessageQDef(light_msg, 32, uint16_t);
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <main+0x9c>)
 80003be:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80003c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  light_msgHandle = osMessageCreate(osMessageQ(light_msg), NULL);
 80003c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f002 ff13 	bl	80031fa <osMessageCreate>
 80003d4:	4602      	mov	r2, r0
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <main+0xa0>)
 80003d8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of recieve_msg */
  osThreadDef(recieve_msg, StartDefaultTask, osPriorityNormal, 0, 128);
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <main+0xa4>)
 80003dc:	f107 041c 	add.w	r4, r7, #28
 80003e0:	461d      	mov	r5, r3
 80003e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  recieve_msgHandle = osThreadCreate(osThread(recieve_msg), NULL);
 80003ee:	f107 031c 	add.w	r3, r7, #28
 80003f2:	2100      	movs	r1, #0
 80003f4:	4618      	mov	r0, r3
 80003f6:	f002 fea0 	bl	800313a <osThreadCreate>
 80003fa:	4602      	mov	r2, r0
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <main+0xa8>)
 80003fe:	601a      	str	r2, [r3, #0]

  /* definition and creation of control_light */
  osThreadDef(control_light, StartTask02, osPriorityNormal, 0, 128);
 8000400:	4b0e      	ldr	r3, [pc, #56]	; (800043c <main+0xac>)
 8000402:	463c      	mov	r4, r7
 8000404:	461d      	mov	r5, r3
 8000406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800040a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800040e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  control_lightHandle = osThreadCreate(osThread(control_light), NULL);
 8000412:	463b      	mov	r3, r7
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f002 fe8f 	bl	800313a <osThreadCreate>
 800041c:	4602      	mov	r2, r0
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <main+0xb0>)
 8000420:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000422:	f002 fe83 	bl	800312c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000426:	e7fe      	b.n	8000426 <main+0x96>
 8000428:	20000ff0 	.word	0x20000ff0
 800042c:	080054e4 	.word	0x080054e4
 8000430:	20001048 	.word	0x20001048
 8000434:	08005500 	.word	0x08005500
 8000438:	2000104c 	.word	0x2000104c
 800043c:	0800552c 	.word	0x0800552c
 8000440:	20000fd0 	.word	0x20000fd0

08000444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b094      	sub	sp, #80	; 0x50
 8000448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044e:	2228      	movs	r2, #40	; 0x28
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f005 f831 	bl	80054ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000474:	2301      	movs	r3, #1
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000482:	2301      	movs	r3, #1
 8000484:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000486:	2302      	movs	r3, #2
 8000488:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000490:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000494:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049a:	4618      	mov	r0, r3
 800049c:	f001 fd62 	bl	8001f64 <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004a6:	f000 f9a3 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	230f      	movs	r3, #15
 80004ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ae:	2302      	movs	r3, #2
 80004b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	2102      	movs	r1, #2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 ffcc 	bl	8002464 <HAL_RCC_ClockConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004d2:	f000 f98d 	bl	80007f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004d6:	2302      	movs	r3, #2
 80004d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004de:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 f928 	bl	8002738 <HAL_RCCEx_PeriphCLKConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004ee:	f000 f97f 	bl	80007f0 <Error_Handler>
  }
}
 80004f2:	bf00      	nop
 80004f4:	3750      	adds	r7, #80	; 0x50
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_ADC1_Init+0x74>)
 800050e:	4a19      	ldr	r2, [pc, #100]	; (8000574 <MX_ADC1_Init+0x78>)
 8000510:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_ADC1_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_ADC1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_ADC1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_ADC1_Init+0x74>)
 8000526:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800052a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <MX_ADC1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_ADC1_Init+0x74>)
 8000534:	2201      	movs	r2, #1
 8000536:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <MX_ADC1_Init+0x74>)
 800053a:	f000 fb0d 	bl	8000b58 <HAL_ADC_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000544:	f000 f954 	bl	80007f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800054c:	2301      	movs	r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000550:	2307      	movs	r3, #7
 8000552:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4619      	mov	r1, r3
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_ADC1_Init+0x74>)
 800055a:	f000 fbd5 	bl	8000d08 <HAL_ADC_ConfigChannel>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000564:	f000 f944 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20001018 	.word	0x20001018
 8000574:	40012400 	.word	0x40012400

08000578 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800057e:	4b26      	ldr	r3, [pc, #152]	; (8000618 <MX_CAN_Init+0xa0>)
 8000580:	4a26      	ldr	r2, [pc, #152]	; (800061c <MX_CAN_Init+0xa4>)
 8000582:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000584:	4b24      	ldr	r3, [pc, #144]	; (8000618 <MX_CAN_Init+0xa0>)
 8000586:	2209      	movs	r2, #9
 8000588:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800058a:	4b23      	ldr	r3, [pc, #140]	; (8000618 <MX_CAN_Init+0xa0>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <MX_CAN_Init+0xa0>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000596:	4b20      	ldr	r3, [pc, #128]	; (8000618 <MX_CAN_Init+0xa0>)
 8000598:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800059c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <MX_CAN_Init+0xa0>)
 80005a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005a4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <MX_CAN_Init+0xa0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <MX_CAN_Init+0xa0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <MX_CAN_Init+0xa0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005b8:	4b17      	ldr	r3, [pc, #92]	; (8000618 <MX_CAN_Init+0xa0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <MX_CAN_Init+0xa0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_CAN_Init+0xa0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005ca:	4813      	ldr	r0, [pc, #76]	; (8000618 <MX_CAN_Init+0xa0>)
 80005cc:	f000 fcd5 	bl	8000f7a <HAL_CAN_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_CAN_Init+0x62>
  {
	Error_Handler();
 80005d6:	f000 f90b 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = ENABLE;
 80005da:	2301      	movs	r3, #1
 80005dc:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterIdHigh = 0x200 << 5;
 80005ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005ee:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 10;
 8000600:	230a      	movs	r3, #10
 8000602:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000604:	463b      	mov	r3, r7
 8000606:	4619      	mov	r1, r3
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <MX_CAN_Init+0xa0>)
 800060a:	f000 fdb1 	bl	8001170 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	3728      	adds	r7, #40	; 0x28
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000ff0 	.word	0x20000ff0
 800061c:	40006400 	.word	0x40006400

08000620 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <MX_TIM2_Init+0x94>)
 800063e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000642:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_TIM2_Init+0x94>)
 8000646:	2247      	movs	r2, #71	; 0x47
 8000648:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_TIM2_Init+0x94>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_TIM2_Init+0x94>)
 8000652:	f242 720f 	movw	r2, #9999	; 0x270f
 8000656:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_TIM2_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_TIM2_Init+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000664:	4813      	ldr	r0, [pc, #76]	; (80006b4 <MX_TIM2_Init+0x94>)
 8000666:	f002 f91d 	bl	80028a4 <HAL_TIM_Base_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000670:	f000 f8be 	bl	80007f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	4619      	mov	r1, r3
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <MX_TIM2_Init+0x94>)
 8000682:	f002 fae7 	bl	8002c54 <HAL_TIM_ConfigClockSource>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800068c:	f000 f8b0 	bl	80007f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_TIM2_Init+0x94>)
 800069e:	f002 fcad 	bl	8002ffc <HAL_TIMEx_MasterConfigSynchronization>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006a8:	f000 f8a2 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20001058 	.word	0x20001058

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006cc:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a2c      	ldr	r2, [pc, #176]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0310 	and.w	r3, r3, #16
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e4:	4b27      	ldr	r3, [pc, #156]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a26      	ldr	r2, [pc, #152]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006ea:	f043 0320 	orr.w	r3, r3, #32
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0320 	and.w	r3, r3, #32
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_GPIO_Init+0xcc>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a20      	ldr	r2, [pc, #128]	; (8000784 <MX_GPIO_Init+0xcc>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_GPIO_Init+0xcc>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_GPIO_Init+0xcc>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <MX_GPIO_Init+0xcc>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_GPIO_Init+0xcc>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000732:	4815      	ldr	r0, [pc, #84]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000734:	f001 fbe4 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2104      	movs	r1, #4
 800073c:	4813      	ldr	r0, [pc, #76]	; (800078c <MX_GPIO_Init+0xd4>)
 800073e:	f001 fbdf 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000742:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <MX_GPIO_Init+0xd0>)
 800075c:	f001 fa76 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000760:	2304      	movs	r3, #4
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4619      	mov	r1, r3
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_GPIO_Init+0xd4>)
 8000778:	f001 fa68 	bl	8001c4c <HAL_GPIO_Init>

}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	40011000 	.word	0x40011000
 800078c:	40010c00 	.word	0x40010c00

08000790 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <StartDefaultTask+0x1c>)
 800079e:	f001 fbc7 	bl	8001f30 <HAL_GPIO_TogglePin>
	osDelay(1000);
 80007a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a6:	f002 fd14 	bl	80031d2 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007aa:	e7f5      	b.n	8000798 <StartDefaultTask+0x8>
 80007ac:	40011000 	.word	0x40011000

080007b0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	osEvent q_message;
  for(;;)
  {
	/* get element from light queue to send light node control light */
	q_message = osMessageGet(light_msgHandle, 0);
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <StartTask02+0x38>)
 80007ba:	6819      	ldr	r1, [r3, #0]
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 fd82 	bl	80032cc <osMessageGet>

	/* get a message in q_light_control if it is not empty */
	if (q_message.status == osEventMessage)
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	2b10      	cmp	r3, #16
 80007cc:	d108      	bne.n	80007e0 <StartTask02+0x30>
	{
		light_msg = q_message.value.v;
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <StartTask02+0x3c>)
 80007d4:	701a      	strb	r2, [r3, #0]
		light_mgs_parse(light_msg);
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <StartTask02+0x3c>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fd4a 	bl	8000274 <light_mgs_parse>
	}
	osDelay(10);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f002 fcf6 	bl	80031d2 <osDelay>
	q_message = osMessageGet(light_msgHandle, 0);
 80007e6:	e7e7      	b.n	80007b8 <StartTask02+0x8>
 80007e8:	20001048 	.word	0x20001048
 80007ec:	20000281 	.word	0x20000281

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <Error_Handler+0x6>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_MspInit+0x68>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_MspInit+0x68>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6193      	str	r3, [r2, #24]
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_MspInit+0x68>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_MspInit+0x68>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a11      	ldr	r2, [pc, #68]	; (8000860 <HAL_MspInit+0x68>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	61d3      	str	r3, [r2, #28]
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x68>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	210f      	movs	r1, #15
 8000832:	f06f 0001 	mvn.w	r0, #1
 8000836:	f001 f9d2 	bl	8001bde <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_MspInit+0x6c>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <HAL_MspInit+0x6c>)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000
 8000864:	40010000 	.word	0x40010000

08000868 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <HAL_ADC_MspInit+0x6c>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d121      	bne.n	80008cc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <HAL_ADC_MspInit+0x70>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <HAL_ADC_MspInit+0x70>)
 800088e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_ADC_MspInit+0x70>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_ADC_MspInit+0x70>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <HAL_ADC_MspInit+0x70>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_ADC_MspInit+0x70>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008b8:	2301      	movs	r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008bc:	2303      	movs	r3, #3
 80008be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <HAL_ADC_MspInit+0x74>)
 80008c8:	f001 f9c0 	bl	8001c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40012400 	.word	0x40012400
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010800 	.word	0x40010800

080008e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a20      	ldr	r2, [pc, #128]	; (800097c <HAL_CAN_MspInit+0x9c>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d139      	bne.n	8000974 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <HAL_CAN_MspInit+0xa0>)
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <HAL_CAN_MspInit+0xa0>)
 8000906:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800090a:	61d3      	str	r3, [r2, #28]
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <HAL_CAN_MspInit+0xa0>)
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_CAN_MspInit+0xa0>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a18      	ldr	r2, [pc, #96]	; (8000980 <HAL_CAN_MspInit+0xa0>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b16      	ldr	r3, [pc, #88]	; (8000980 <HAL_CAN_MspInit+0xa0>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000930:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000934:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	4619      	mov	r1, r3
 8000944:	480f      	ldr	r0, [pc, #60]	; (8000984 <HAL_CAN_MspInit+0xa4>)
 8000946:	f001 f981 	bl	8001c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4619      	mov	r1, r3
 800095e:	4809      	ldr	r0, [pc, #36]	; (8000984 <HAL_CAN_MspInit+0xa4>)
 8000960:	f001 f974 	bl	8001c4c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2105      	movs	r1, #5
 8000968:	2014      	movs	r0, #20
 800096a:	f001 f938 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800096e:	2014      	movs	r0, #20
 8000970:	f001 f951 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000974:	bf00      	nop
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40006400 	.word	0x40006400
 8000980:	40021000 	.word	0x40021000
 8000984:	40010800 	.word	0x40010800

08000988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000998:	d113      	bne.n	80009c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_TIM_Base_MspInit+0x44>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <HAL_TIM_Base_MspInit+0x44>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	61d3      	str	r3, [r2, #28]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_TIM_Base_MspInit+0x44>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2105      	movs	r1, #5
 80009b6:	201c      	movs	r0, #28
 80009b8:	f001 f911 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009bc:	201c      	movs	r0, #28
 80009be:	f001 f92a 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fe:	f000 f88f 	bl	8000b20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a02:	f004 f86b 	bl	8004adc <xTaskGetSchedulerState>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d001      	beq.n	8000a10 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a0c:	f004 fad4 	bl	8004fb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a1a:	f000 fdec 	bl	80015f6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000ff0 	.word	0x20000ff0

08000a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM2_IRQHandler+0x10>)
 8000a2e:	f002 f809 	bl	8002a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20001058 	.word	0x20001058

08000a3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	; (8000a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	; (8000a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a6e:	f7ff ffe5 	bl	8000a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f004 fcf3 	bl	800545c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a76:	f7ff fc8b 	bl	8000390 <main>
  bx lr
 8000a7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a84:	0800557c 	.word	0x0800557c
  ldr r2, =_sbss
 8000a88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a8c:	200010a8 	.word	0x200010a8

08000a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_2_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_Init+0x28>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_Init+0x28>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f001 f88f 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f000 f808 	bl	8000ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab0:	f7ff fea2 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x54>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x58>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 f8a7 	bl	8001c32 <HAL_SYSTICK_Config>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00e      	b.n	8000b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d80a      	bhi.n	8000b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f001 f86f 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_InitTick+0x5c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e000      	b.n	8000b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_IncTick+0x1c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_IncTick+0x20>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a03      	ldr	r2, [pc, #12]	; (8000b40 <HAL_IncTick+0x20>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	200010a4 	.word	0x200010a4

08000b44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <HAL_GetTick+0x10>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	200010a4 	.word	0x200010a4

08000b58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e0be      	b.n	8000cf8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d109      	bne.n	8000b9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff fe66 	bl	8000868 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f000 f9ab 	bl	8000ef8 <ADC_ConversionStop_Disable>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000baa:	f003 0310 	and.w	r3, r3, #16
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 8099 	bne.w	8000ce6 <HAL_ADC_Init+0x18e>
 8000bb4:	7dfb      	ldrb	r3, [r7, #23]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8095 	bne.w	8000ce6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bc4:	f023 0302 	bic.w	r3, r3, #2
 8000bc8:	f043 0202 	orr.w	r2, r3, #2
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bd8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7b1b      	ldrb	r3, [r3, #12]
 8000bde:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000be0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bf0:	d003      	beq.n	8000bfa <HAL_ADC_Init+0xa2>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d102      	bne.n	8000c00 <HAL_ADC_Init+0xa8>
 8000bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfe:	e000      	b.n	8000c02 <HAL_ADC_Init+0xaa>
 8000c00:	2300      	movs	r3, #0
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7d1b      	ldrb	r3, [r3, #20]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d119      	bne.n	8000c44 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7b1b      	ldrb	r3, [r3, #12]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d109      	bne.n	8000c2c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	035a      	lsls	r2, r3, #13
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	e00b      	b.n	8000c44 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c30:	f043 0220 	orr.w	r2, r3, #32
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3c:	f043 0201 	orr.w	r2, r3, #1
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <HAL_ADC_Init+0x1a8>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c74:	d003      	beq.n	8000c7e <HAL_ADC_Init+0x126>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d104      	bne.n	8000c88 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	051b      	lsls	r3, r3, #20
 8000c86:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_ADC_Init+0x1ac>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d10b      	bne.n	8000cc4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	f023 0303 	bic.w	r3, r3, #3
 8000cba:	f043 0201 	orr.w	r2, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cc2:	e018      	b.n	8000cf6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc8:	f023 0312 	bic.w	r3, r3, #18
 8000ccc:	f043 0210 	orr.w	r2, r3, #16
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd8:	f043 0201 	orr.w	r2, r3, #1
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ce4:	e007      	b.n	8000cf6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cea:	f043 0210 	orr.w	r2, r3, #16
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	ffe1f7fd 	.word	0xffe1f7fd
 8000d04:	ff1f0efe 	.word	0xff1f0efe

08000d08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d101      	bne.n	8000d28 <HAL_ADC_ConfigChannel+0x20>
 8000d24:	2302      	movs	r3, #2
 8000d26:	e0dc      	b.n	8000ee2 <HAL_ADC_ConfigChannel+0x1da>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b06      	cmp	r3, #6
 8000d36:	d81c      	bhi.n	8000d72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	3b05      	subs	r3, #5
 8000d4a:	221f      	movs	r2, #31
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	4019      	ands	r1, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	6818      	ldr	r0, [r3, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	3b05      	subs	r3, #5
 8000d64:	fa00 f203 	lsl.w	r2, r0, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d70:	e03c      	b.n	8000dec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b0c      	cmp	r3, #12
 8000d78:	d81c      	bhi.n	8000db4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	3b23      	subs	r3, #35	; 0x23
 8000d8c:	221f      	movs	r2, #31
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	4019      	ands	r1, r3
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	6818      	ldr	r0, [r3, #0]
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	3b23      	subs	r3, #35	; 0x23
 8000da6:	fa00 f203 	lsl.w	r2, r0, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	430a      	orrs	r2, r1
 8000db0:	631a      	str	r2, [r3, #48]	; 0x30
 8000db2:	e01b      	b.n	8000dec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3b41      	subs	r3, #65	; 0x41
 8000dc6:	221f      	movs	r2, #31
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4019      	ands	r1, r3
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	3b41      	subs	r3, #65	; 0x41
 8000de0:	fa00 f203 	lsl.w	r2, r0, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b09      	cmp	r3, #9
 8000df2:	d91c      	bls.n	8000e2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68d9      	ldr	r1, [r3, #12]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	3b1e      	subs	r3, #30
 8000e06:	2207      	movs	r2, #7
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	4019      	ands	r1, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	6898      	ldr	r0, [r3, #8]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4413      	add	r3, r2
 8000e1e:	3b1e      	subs	r3, #30
 8000e20:	fa00 f203 	lsl.w	r2, r0, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	e019      	b.n	8000e62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6919      	ldr	r1, [r3, #16]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4413      	add	r3, r2
 8000e3e:	2207      	movs	r2, #7
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	4019      	ands	r1, r3
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	6898      	ldr	r0, [r3, #8]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	fa00 f203 	lsl.w	r2, r0, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b10      	cmp	r3, #16
 8000e68:	d003      	beq.n	8000e72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e6e:	2b11      	cmp	r3, #17
 8000e70:	d132      	bne.n	8000ed8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <HAL_ADC_ConfigChannel+0x1e4>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d125      	bne.n	8000ec8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d126      	bne.n	8000ed8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e98:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b10      	cmp	r3, #16
 8000ea0:	d11a      	bne.n	8000ed8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eac:	0c9a      	lsrs	r2, r3, #18
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eb8:	e002      	b.n	8000ec0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f9      	bne.n	8000eba <HAL_ADC_ConfigChannel+0x1b2>
 8000ec6:	e007      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	f043 0220 	orr.w	r2, r3, #32
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40012400 	.word	0x40012400
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	431bde83 	.word	0x431bde83

08000ef8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d12e      	bne.n	8000f70 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0201 	bic.w	r2, r2, #1
 8000f20:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f22:	f7ff fe0f 	bl	8000b44 <HAL_GetTick>
 8000f26:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f28:	e01b      	b.n	8000f62 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f2a:	f7ff fe0b 	bl	8000b44 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d914      	bls.n	8000f62 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d10d      	bne.n	8000f62 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4a:	f043 0210 	orr.w	r2, r3, #16
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	f043 0201 	orr.w	r2, r3, #1
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e007      	b.n	8000f72 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d0dc      	beq.n	8000f2a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e0ed      	b.n	8001168 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff fca1 	bl	80008e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 0201 	orr.w	r2, r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fae:	f7ff fdc9 	bl	8000b44 <HAL_GetTick>
 8000fb2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fb4:	e012      	b.n	8000fdc <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fb6:	f7ff fdc5 	bl	8000b44 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b0a      	cmp	r3, #10
 8000fc2:	d90b      	bls.n	8000fdc <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2205      	movs	r2, #5
 8000fd4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e0c5      	b.n	8001168 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0e5      	beq.n	8000fb6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0202 	bic.w	r2, r2, #2
 8000ff8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ffa:	f7ff fda3 	bl	8000b44 <HAL_GetTick>
 8000ffe:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001000:	e012      	b.n	8001028 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001002:	f7ff fd9f 	bl	8000b44 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b0a      	cmp	r3, #10
 800100e:	d90b      	bls.n	8001028 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2205      	movs	r2, #5
 8001020:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e09f      	b.n	8001168 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1e5      	bne.n	8001002 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7e1b      	ldrb	r3, [r3, #24]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d108      	bne.n	8001050 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e007      	b.n	8001060 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800105e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7e5b      	ldrb	r3, [r3, #25]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d108      	bne.n	800107a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e007      	b.n	800108a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001088:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7e9b      	ldrb	r3, [r3, #26]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d108      	bne.n	80010a4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0220 	orr.w	r2, r2, #32
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e007      	b.n	80010b4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0220 	bic.w	r2, r2, #32
 80010b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7edb      	ldrb	r3, [r3, #27]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d108      	bne.n	80010ce <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0210 	bic.w	r2, r2, #16
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e007      	b.n	80010de <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 0210 	orr.w	r2, r2, #16
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7f1b      	ldrb	r3, [r3, #28]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d108      	bne.n	80010f8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f042 0208 	orr.w	r2, r2, #8
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e007      	b.n	8001108 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0208 	bic.w	r2, r2, #8
 8001106:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7f5b      	ldrb	r3, [r3, #29]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d108      	bne.n	8001122 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0204 	orr.w	r2, r2, #4
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e007      	b.n	8001132 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0204 	bic.w	r2, r2, #4
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	431a      	orrs	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	ea42 0103 	orr.w	r1, r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	1e5a      	subs	r2, r3, #1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001186:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001188:	7cfb      	ldrb	r3, [r7, #19]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d003      	beq.n	8001196 <HAL_CAN_ConfigFilter+0x26>
 800118e:	7cfb      	ldrb	r3, [r7, #19]
 8001190:	2b02      	cmp	r3, #2
 8001192:	f040 80aa 	bne.w	80012ea <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800119c:	f043 0201 	orr.w	r2, r3, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	2201      	movs	r2, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43db      	mvns	r3, r3
 80011c0:	401a      	ands	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d123      	bne.n	8001218 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3248      	adds	r2, #72	; 0x48
 80011f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800120c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800120e:	6979      	ldr	r1, [r7, #20]
 8001210:	3348      	adds	r3, #72	; 0x48
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	440b      	add	r3, r1
 8001216:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d122      	bne.n	8001266 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	431a      	orrs	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001240:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3248      	adds	r2, #72	; 0x48
 8001246:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800125a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800125c:	6979      	ldr	r1, [r7, #20]
 800125e:	3348      	adds	r3, #72	; 0x48
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d109      	bne.n	8001282 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43db      	mvns	r3, r3
 8001278:	401a      	ands	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001280:	e007      	b.n	8001292 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	431a      	orrs	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	401a      	ands	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80012ac:	e007      	b.n	80012be <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	431a      	orrs	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d107      	bne.n	80012d6 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	431a      	orrs	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012dc:	f023 0201 	bic.w	r2, r3, #1
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e006      	b.n	80012f8 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
  }
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b084      	sub	sp, #16
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d12e      	bne.n	8001374 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2202      	movs	r2, #2
 800131a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0201 	bic.w	r2, r2, #1
 800132c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800132e:	f7ff fc09 	bl	8000b44 <HAL_GetTick>
 8001332:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001334:	e012      	b.n	800135c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001336:	f7ff fc05 	bl	8000b44 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b0a      	cmp	r3, #10
 8001342:	d90b      	bls.n	800135c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2205      	movs	r2, #5
 8001354:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e012      	b.n	8001382 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1e5      	bne.n	8001336 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	e006      	b.n	8001382 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
  }
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800138a:	b480      	push	{r7}
 800138c:	b087      	sub	sp, #28
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d003      	beq.n	80013ae <HAL_CAN_GetRxMessage+0x24>
 80013a6:	7dfb      	ldrb	r3, [r7, #23]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	f040 80f3 	bne.w	8001594 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10e      	bne.n	80013d2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0e7      	b.n	80015a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d107      	bne.n	80013f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0d8      	b.n	80015a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	331b      	adds	r3, #27
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	4413      	add	r3, r2
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0204 	and.w	r2, r3, #4
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10c      	bne.n	8001428 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	331b      	adds	r3, #27
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0d5b      	lsrs	r3, r3, #21
 800141e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e00b      	b.n	8001440 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	331b      	adds	r3, #27
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4413      	add	r3, r2
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	331b      	adds	r3, #27
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4413      	add	r3, r2
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0202 	and.w	r2, r3, #2
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	331b      	adds	r3, #27
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	4413      	add	r3, r2
 8001462:	3304      	adds	r3, #4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 020f 	and.w	r2, r3, #15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	331b      	adds	r3, #27
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4413      	add	r3, r2
 800147a:	3304      	adds	r3, #4
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	b2da      	uxtb	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	331b      	adds	r3, #27
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	4413      	add	r3, r2
 8001492:	3304      	adds	r3, #4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0c1b      	lsrs	r3, r3, #16
 8001498:	b29a      	uxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	4413      	add	r3, r2
 80014a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4413      	add	r3, r2
 80014be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	0a1a      	lsrs	r2, r3, #8
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	0c1a      	lsrs	r2, r3, #16
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	3302      	adds	r3, #2
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0e1a      	lsrs	r2, r3, #24
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	3303      	adds	r3, #3
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	4413      	add	r3, r2
 800150c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	3304      	adds	r3, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	4413      	add	r3, r2
 8001524:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	0a1a      	lsrs	r2, r3, #8
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	3305      	adds	r3, #5
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	4413      	add	r3, r2
 800153e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0c1a      	lsrs	r2, r3, #16
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3306      	adds	r3, #6
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4413      	add	r3, r2
 8001558:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	0e1a      	lsrs	r2, r3, #24
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	3307      	adds	r3, #7
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d108      	bne.n	8001580 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0220 	orr.w	r2, r2, #32
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	e007      	b.n	8001590 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691a      	ldr	r2, [r3, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0220 	orr.w	r2, r2, #32
 800158e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	e006      	b.n	80015a2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
  }
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015bc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d002      	beq.n	80015ca <HAL_CAN_ActivateNotification+0x1e>
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d109      	bne.n	80015de <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6959      	ldr	r1, [r3, #20]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e006      	b.n	80015ec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
  }
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b08a      	sub	sp, #40	; 0x28
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d07c      	beq.n	8001736 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d023      	beq.n	800168e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2201      	movs	r2, #1
 800164c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f97d 	bl	8001958 <HAL_CAN_TxMailbox0CompleteCallback>
 800165e:	e016      	b.n	800168e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	e00c      	b.n	800168e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d004      	beq.n	8001688 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
 8001686:	e002      	b.n	800168e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f980 	bl	800198e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d024      	beq.n	80016e2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f95c 	bl	800196a <HAL_CAN_TxMailbox1CompleteCallback>
 80016b2:	e016      	b.n	80016e2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d004      	beq.n	80016c8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
 80016c6:	e00c      	b.n	80016e2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d004      	beq.n	80016dc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
 80016da:	e002      	b.n	80016e2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f95f 	bl	80019a0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d024      	beq.n	8001736 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f93b 	bl	800197c <HAL_CAN_TxMailbox2CompleteCallback>
 8001706:	e016      	b.n	8001736 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d004      	beq.n	800171c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
 800171a:	e00c      	b.n	8001736 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d004      	beq.n	8001730 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
 800172e:	e002      	b.n	8001736 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f93e 	bl	80019b2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00c      	beq.n	800175a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001750:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2210      	movs	r2, #16
 8001758:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00b      	beq.n	800177c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2208      	movs	r2, #8
 8001774:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f924 	bl	80019c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7fe fdd1 	bl	800033c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00c      	beq.n	80017be <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d007      	beq.n	80017be <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2210      	movs	r2, #16
 80017bc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00b      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2208      	movs	r2, #8
 80017d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f904 	bl	80019e8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f8ec 	bl	80019d6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00b      	beq.n	8001820 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2210      	movs	r2, #16
 8001818:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f8ed 	bl	80019fa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2208      	movs	r2, #8
 800183a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f8e5 	bl	8001a0c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d075      	beq.n	8001938 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	d06c      	beq.n	8001930 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d03d      	beq.n	8001930 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d038      	beq.n	8001930 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018c4:	2b30      	cmp	r3, #48	; 0x30
 80018c6:	d017      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x302>
 80018c8:	2b30      	cmp	r3, #48	; 0x30
 80018ca:	d804      	bhi.n	80018d6 <HAL_CAN_IRQHandler+0x2e0>
 80018cc:	2b10      	cmp	r3, #16
 80018ce:	d009      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x2ee>
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d00c      	beq.n	80018ee <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018d4:	e024      	b.n	8001920 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80018d6:	2b50      	cmp	r3, #80	; 0x50
 80018d8:	d018      	beq.n	800190c <HAL_CAN_IRQHandler+0x316>
 80018da:	2b60      	cmp	r3, #96	; 0x60
 80018dc:	d01b      	beq.n	8001916 <HAL_CAN_IRQHandler+0x320>
 80018de:	2b40      	cmp	r3, #64	; 0x40
 80018e0:	d00f      	beq.n	8001902 <HAL_CAN_IRQHandler+0x30c>
            break;
 80018e2:	e01d      	b.n	8001920 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018ec:	e018      	b.n	8001920 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	f043 0310 	orr.w	r3, r3, #16
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018f6:	e013      	b.n	8001920 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	f043 0320 	orr.w	r3, r3, #32
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001900:	e00e      	b.n	8001920 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800190a:	e009      	b.n	8001920 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001914:	e004      	b.n	8001920 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800191e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699a      	ldr	r2, [r3, #24]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800192e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2204      	movs	r2, #4
 8001936:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	2b00      	cmp	r3, #0
 800193c:	d008      	beq.n	8001950 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f867 	bl	8001a1e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001950:	bf00      	nop
 8001952:	3728      	adds	r7, #40	; 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr

0800198e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4906      	ldr	r1, [pc, #24]	; (8001ac8 <__NVIC_EnableIRQ+0x34>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db0a      	blt.n	8001af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	490c      	ldr	r1, [pc, #48]	; (8001b18 <__NVIC_SetPriority+0x4c>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af4:	e00a      	b.n	8001b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <__NVIC_SetPriority+0x50>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3b04      	subs	r3, #4
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	761a      	strb	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f1c3 0307 	rsb	r3, r3, #7
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2304      	movcs	r3, #4
 8001b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d902      	bls.n	8001b50 <NVIC_EncodePriority+0x30>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3b03      	subs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <NVIC_EncodePriority+0x32>
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	4313      	orrs	r3, r2
         );
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	; 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff90 	bl	8001acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff2d 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf0:	f7ff ff42 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff ff90 	bl	8001b20 <NVIC_EncodePriority>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff5f 	bl	8001acc <__NVIC_SetPriority>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff35 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffa2 	bl	8001b84 <SysTick_Config>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b08b      	sub	sp, #44	; 0x2c
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5e:	e127      	b.n	8001eb0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c60:	2201      	movs	r2, #1
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f040 8116 	bne.w	8001eaa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d034      	beq.n	8001cf0 <HAL_GPIO_Init+0xa4>
 8001c86:	2b12      	cmp	r3, #18
 8001c88:	d80d      	bhi.n	8001ca6 <HAL_GPIO_Init+0x5a>
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d02b      	beq.n	8001ce6 <HAL_GPIO_Init+0x9a>
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d804      	bhi.n	8001c9c <HAL_GPIO_Init+0x50>
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d031      	beq.n	8001cfa <HAL_GPIO_Init+0xae>
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d01c      	beq.n	8001cd4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c9a:	e048      	b.n	8001d2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d043      	beq.n	8001d28 <HAL_GPIO_Init+0xdc>
 8001ca0:	2b11      	cmp	r3, #17
 8001ca2:	d01b      	beq.n	8001cdc <HAL_GPIO_Init+0x90>
          break;
 8001ca4:	e043      	b.n	8001d2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ca6:	4a89      	ldr	r2, [pc, #548]	; (8001ecc <HAL_GPIO_Init+0x280>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d026      	beq.n	8001cfa <HAL_GPIO_Init+0xae>
 8001cac:	4a87      	ldr	r2, [pc, #540]	; (8001ecc <HAL_GPIO_Init+0x280>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d806      	bhi.n	8001cc0 <HAL_GPIO_Init+0x74>
 8001cb2:	4a87      	ldr	r2, [pc, #540]	; (8001ed0 <HAL_GPIO_Init+0x284>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d020      	beq.n	8001cfa <HAL_GPIO_Init+0xae>
 8001cb8:	4a86      	ldr	r2, [pc, #536]	; (8001ed4 <HAL_GPIO_Init+0x288>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01d      	beq.n	8001cfa <HAL_GPIO_Init+0xae>
          break;
 8001cbe:	e036      	b.n	8001d2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001cc0:	4a85      	ldr	r2, [pc, #532]	; (8001ed8 <HAL_GPIO_Init+0x28c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d019      	beq.n	8001cfa <HAL_GPIO_Init+0xae>
 8001cc6:	4a85      	ldr	r2, [pc, #532]	; (8001edc <HAL_GPIO_Init+0x290>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d016      	beq.n	8001cfa <HAL_GPIO_Init+0xae>
 8001ccc:	4a84      	ldr	r2, [pc, #528]	; (8001ee0 <HAL_GPIO_Init+0x294>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0xae>
          break;
 8001cd2:	e02c      	b.n	8001d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	623b      	str	r3, [r7, #32]
          break;
 8001cda:	e028      	b.n	8001d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	623b      	str	r3, [r7, #32]
          break;
 8001ce4:	e023      	b.n	8001d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	3308      	adds	r3, #8
 8001cec:	623b      	str	r3, [r7, #32]
          break;
 8001cee:	e01e      	b.n	8001d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	330c      	adds	r3, #12
 8001cf6:	623b      	str	r3, [r7, #32]
          break;
 8001cf8:	e019      	b.n	8001d2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d02:	2304      	movs	r3, #4
 8001d04:	623b      	str	r3, [r7, #32]
          break;
 8001d06:	e012      	b.n	8001d2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d105      	bne.n	8001d1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d10:	2308      	movs	r3, #8
 8001d12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	611a      	str	r2, [r3, #16]
          break;
 8001d1a:	e008      	b.n	8001d2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	615a      	str	r2, [r3, #20]
          break;
 8001d26:	e002      	b.n	8001d2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
          break;
 8001d2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	2bff      	cmp	r3, #255	; 0xff
 8001d32:	d801      	bhi.n	8001d38 <HAL_GPIO_Init+0xec>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	e001      	b.n	8001d3c <HAL_GPIO_Init+0xf0>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2bff      	cmp	r3, #255	; 0xff
 8001d42:	d802      	bhi.n	8001d4a <HAL_GPIO_Init+0xfe>
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	e002      	b.n	8001d50 <HAL_GPIO_Init+0x104>
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	3b08      	subs	r3, #8
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	210f      	movs	r1, #15
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	401a      	ands	r2, r3
 8001d62:	6a39      	ldr	r1, [r7, #32]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 8096 	beq.w	8001eaa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7e:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <HAL_GPIO_Init+0x298>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <HAL_GPIO_Init+0x298>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6193      	str	r3, [r2, #24]
 8001d8a:	4b56      	ldr	r3, [pc, #344]	; (8001ee4 <HAL_GPIO_Init+0x298>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d96:	4a54      	ldr	r2, [pc, #336]	; (8001ee8 <HAL_GPIO_Init+0x29c>)
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4013      	ands	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4b      	ldr	r2, [pc, #300]	; (8001eec <HAL_GPIO_Init+0x2a0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x19e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4a      	ldr	r2, [pc, #296]	; (8001ef0 <HAL_GPIO_Init+0x2a4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x19a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a49      	ldr	r2, [pc, #292]	; (8001ef4 <HAL_GPIO_Init+0x2a8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x196>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a48      	ldr	r2, [pc, #288]	; (8001ef8 <HAL_GPIO_Init+0x2ac>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x192>
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e006      	b.n	8001dec <HAL_GPIO_Init+0x1a0>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e004      	b.n	8001dec <HAL_GPIO_Init+0x1a0>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e002      	b.n	8001dec <HAL_GPIO_Init+0x1a0>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_GPIO_Init+0x1a0>
 8001dea:	2300      	movs	r3, #0
 8001dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dee:	f002 0203 	and.w	r2, r2, #3
 8001df2:	0092      	lsls	r2, r2, #2
 8001df4:	4093      	lsls	r3, r2
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dfc:	493a      	ldr	r1, [pc, #232]	; (8001ee8 <HAL_GPIO_Init+0x29c>)
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	3302      	adds	r3, #2
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e16:	4b39      	ldr	r3, [pc, #228]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4938      	ldr	r1, [pc, #224]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
 8001e22:	e006      	b.n	8001e32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e24:	4b35      	ldr	r3, [pc, #212]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	4933      	ldr	r1, [pc, #204]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	492e      	ldr	r1, [pc, #184]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
 8001e4a:	e006      	b.n	8001e5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	4929      	ldr	r1, [pc, #164]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e66:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	4924      	ldr	r1, [pc, #144]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
 8001e72:	e006      	b.n	8001e82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	491f      	ldr	r1, [pc, #124]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d006      	beq.n	8001e9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	491a      	ldr	r1, [pc, #104]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60cb      	str	r3, [r1, #12]
 8001e9a:	e006      	b.n	8001eaa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e9c:	4b17      	ldr	r3, [pc, #92]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	4915      	ldr	r1, [pc, #84]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	3301      	adds	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f47f aed0 	bne.w	8001c60 <HAL_GPIO_Init+0x14>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	372c      	adds	r7, #44	; 0x2c
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	10210000 	.word	0x10210000
 8001ed0:	10110000 	.word	0x10110000
 8001ed4:	10120000 	.word	0x10120000
 8001ed8:	10310000 	.word	0x10310000
 8001edc:	10320000 	.word	0x10320000
 8001ee0:	10220000 	.word	0x10220000
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40010800 	.word	0x40010800
 8001ef0:	40010c00 	.word	0x40010c00
 8001ef4:	40011000 	.word	0x40011000
 8001ef8:	40011400 	.word	0x40011400
 8001efc:	40010400 	.word	0x40010400

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f1c:	e003      	b.n	8001f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f42:	887a      	ldrh	r2, [r7, #2]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4013      	ands	r3, r2
 8001f48:	041a      	lsls	r2, r3, #16
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43d9      	mvns	r1, r3
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	400b      	ands	r3, r1
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	611a      	str	r2, [r3, #16]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e26c      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8087 	beq.w	8002092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f84:	4b92      	ldr	r3, [pc, #584]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d00c      	beq.n	8001faa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f90:	4b8f      	ldr	r3, [pc, #572]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d112      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5e>
 8001f9c:	4b8c      	ldr	r3, [pc, #560]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001faa:	4b89      	ldr	r3, [pc, #548]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d06c      	beq.n	8002090 <HAL_RCC_OscConfig+0x12c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d168      	bne.n	8002090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e246      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x76>
 8001fcc:	4b80      	ldr	r3, [pc, #512]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a7f      	ldr	r2, [pc, #508]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	e02e      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x98>
 8001fe2:	4b7b      	ldr	r3, [pc, #492]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7a      	ldr	r2, [pc, #488]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b78      	ldr	r3, [pc, #480]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a77      	ldr	r2, [pc, #476]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e01d      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0xbc>
 8002006:	4b72      	ldr	r3, [pc, #456]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a71      	ldr	r2, [pc, #452]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b6f      	ldr	r3, [pc, #444]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6e      	ldr	r2, [pc, #440]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8002020:	4b6b      	ldr	r3, [pc, #428]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a6a      	ldr	r2, [pc, #424]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b68      	ldr	r3, [pc, #416]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a67      	ldr	r2, [pc, #412]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002036:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7fe fd80 	bl	8000b44 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7fe fd7c 	bl	8000b44 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1fa      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0xe4>
 8002066:	e014      	b.n	8002092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7fe fd6c 	bl	8000b44 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002070:	f7fe fd68 	bl	8000b44 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e1e6      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x10c>
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d063      	beq.n	8002166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800209e:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020aa:	4b49      	ldr	r3, [pc, #292]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d11c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x18c>
 80020b6:	4b46      	ldr	r3, [pc, #280]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d116      	bne.n	80020f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	4b43      	ldr	r3, [pc, #268]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_RCC_OscConfig+0x176>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e1ba      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4939      	ldr	r1, [pc, #228]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	e03a      	b.n	8002166 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <HAL_RCC_OscConfig+0x270>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7fe fd21 	bl	8000b44 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002106:	f7fe fd1d 	bl	8000b44 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e19b      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4927      	ldr	r1, [pc, #156]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
 8002138:	e015      	b.n	8002166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_RCC_OscConfig+0x270>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe fd00 	bl	8000b44 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7fe fcfc 	bl	8000b44 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e17a      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d03a      	beq.n	80021e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d019      	beq.n	80021ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217a:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_RCC_OscConfig+0x274>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7fe fce0 	bl	8000b44 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002188:	f7fe fcdc 	bl	8000b44 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e15a      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f000 faa8 	bl	80026fc <RCC_Delay>
 80021ac:	e01c      	b.n	80021e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_RCC_OscConfig+0x274>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b4:	f7fe fcc6 	bl	8000b44 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ba:	e00f      	b.n	80021dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021bc:	f7fe fcc2 	bl	8000b44 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d908      	bls.n	80021dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e140      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	42420000 	.word	0x42420000
 80021d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	4b9e      	ldr	r3, [pc, #632]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1e9      	bne.n	80021bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a6 	beq.w	8002342 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fa:	4b97      	ldr	r3, [pc, #604]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10d      	bne.n	8002222 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b94      	ldr	r3, [pc, #592]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a93      	ldr	r2, [pc, #588]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	61d3      	str	r3, [r2, #28]
 8002212:	4b91      	ldr	r3, [pc, #580]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b8e      	ldr	r3, [pc, #568]	; (800245c <HAL_RCC_OscConfig+0x4f8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b8b      	ldr	r3, [pc, #556]	; (800245c <HAL_RCC_OscConfig+0x4f8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a8a      	ldr	r2, [pc, #552]	; (800245c <HAL_RCC_OscConfig+0x4f8>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7fe fc83 	bl	8000b44 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7fe fc7f 	bl	8000b44 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	; 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0fd      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b81      	ldr	r3, [pc, #516]	; (800245c <HAL_RCC_OscConfig+0x4f8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x312>
 8002268:	4b7b      	ldr	r3, [pc, #492]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a7a      	ldr	r2, [pc, #488]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	e02d      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x334>
 800227e:	4b76      	ldr	r3, [pc, #472]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a75      	ldr	r2, [pc, #468]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6213      	str	r3, [r2, #32]
 800228a:	4b73      	ldr	r3, [pc, #460]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a72      	ldr	r2, [pc, #456]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	f023 0304 	bic.w	r3, r3, #4
 8002294:	6213      	str	r3, [r2, #32]
 8002296:	e01c      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b05      	cmp	r3, #5
 800229e:	d10c      	bne.n	80022ba <HAL_RCC_OscConfig+0x356>
 80022a0:	4b6d      	ldr	r3, [pc, #436]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4a6c      	ldr	r2, [pc, #432]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	6213      	str	r3, [r2, #32]
 80022ac:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a69      	ldr	r2, [pc, #420]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	e00b      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4a66      	ldr	r2, [pc, #408]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	6213      	str	r3, [r2, #32]
 80022c6:	4b64      	ldr	r3, [pc, #400]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4a63      	ldr	r2, [pc, #396]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d015      	beq.n	8002306 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022da:	f7fe fc33 	bl	8000b44 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7fe fc2f 	bl	8000b44 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0ab      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	4b57      	ldr	r3, [pc, #348]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ee      	beq.n	80022e2 <HAL_RCC_OscConfig+0x37e>
 8002304:	e014      	b.n	8002330 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7fe fc1d 	bl	8000b44 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe fc19 	bl	8000b44 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	; 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e095      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002324:	4b4c      	ldr	r3, [pc, #304]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1ee      	bne.n	800230e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d105      	bne.n	8002342 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002336:	4b48      	ldr	r3, [pc, #288]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a47      	ldr	r2, [pc, #284]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002340:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8081 	beq.w	800244e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800234c:	4b42      	ldr	r3, [pc, #264]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b08      	cmp	r3, #8
 8002356:	d061      	beq.n	800241c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d146      	bne.n	80023ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002360:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <HAL_RCC_OscConfig+0x4fc>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7fe fbed 	bl	8000b44 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236e:	f7fe fbe9 	bl	8000b44 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e067      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002380:	4b35      	ldr	r3, [pc, #212]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d108      	bne.n	80023a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002396:	4b30      	ldr	r3, [pc, #192]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	492d      	ldr	r1, [pc, #180]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a8:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a19      	ldr	r1, [r3, #32]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	430b      	orrs	r3, r1
 80023ba:	4927      	ldr	r1, [pc, #156]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <HAL_RCC_OscConfig+0x4fc>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fbbd 	bl	8000b44 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fbb9 	bl	8000b44 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e037      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x46a>
 80023ec:	e02f      	b.n	800244e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <HAL_RCC_OscConfig+0x4fc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fba6 	bl	8000b44 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fba2 	bl	8000b44 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e020      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x498>
 800241a:	e018      	b.n	800244e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e013      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	429a      	cmp	r2, r3
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
 8002460:	42420060 	.word	0x42420060

08002464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0d0      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002478:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d910      	bls.n	80024a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b67      	ldr	r3, [pc, #412]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0207 	bic.w	r2, r3, #7
 800248e:	4965      	ldr	r1, [pc, #404]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0b8      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d020      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c0:	4b59      	ldr	r3, [pc, #356]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a58      	ldr	r2, [pc, #352]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d8:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a52      	ldr	r2, [pc, #328]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e4:	4b50      	ldr	r3, [pc, #320]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	494d      	ldr	r1, [pc, #308]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d040      	beq.n	8002584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d115      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e07f      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e073      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002532:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e06b      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002542:	4b39      	ldr	r3, [pc, #228]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f023 0203 	bic.w	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4936      	ldr	r1, [pc, #216]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002554:	f7fe faf6 	bl	8000b44 <HAL_GetTick>
 8002558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	e00a      	b.n	8002572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255c:	f7fe faf2 	bl	8000b44 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e053      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 020c 	and.w	r2, r3, #12
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	429a      	cmp	r2, r3
 8002582:	d1eb      	bne.n	800255c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d210      	bcs.n	80025b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 0207 	bic.w	r2, r3, #7
 800259a:	4922      	ldr	r1, [pc, #136]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e032      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4916      	ldr	r1, [pc, #88]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	490e      	ldr	r1, [pc, #56]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025f2:	f000 f821 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80025f6:	4601      	mov	r1, r0
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_RCC_ClockConfig+0x1c8>)
 8002604:	5cd3      	ldrb	r3, [r2, r3]
 8002606:	fa21 f303 	lsr.w	r3, r1, r3
 800260a:	4a09      	ldr	r2, [pc, #36]	; (8002630 <HAL_RCC_ClockConfig+0x1cc>)
 800260c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_ClockConfig+0x1d0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fa54 	bl	8000ac0 <HAL_InitTick>

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40022000 	.word	0x40022000
 8002628:	40021000 	.word	0x40021000
 800262c:	08005564 	.word	0x08005564
 8002630:	20000000 	.word	0x20000000
 8002634:	20000004 	.word	0x20000004

08002638 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002638:	b490      	push	{r4, r7}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800263e:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002640:	1d3c      	adds	r4, r7, #4
 8002642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002648:	4b28      	ldr	r3, [pc, #160]	; (80026ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	2300      	movs	r3, #0
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b04      	cmp	r3, #4
 8002670:	d002      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x40>
 8002672:	2b08      	cmp	r3, #8
 8002674:	d003      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0x46>
 8002676:	e02d      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800267a:	623b      	str	r3, [r7, #32]
      break;
 800267c:	e02d      	b.n	80026da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	0c9b      	lsrs	r3, r3, #18
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800268a:	4413      	add	r3, r2
 800268c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002690:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	0c5b      	lsrs	r3, r3, #17
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026aa:	4413      	add	r3, r2
 80026ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026b6:	fb02 f203 	mul.w	r2, r2, r3
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
 80026c2:	e004      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026c8:	fb02 f303 	mul.w	r3, r2, r3
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	623b      	str	r3, [r7, #32]
      break;
 80026d2:	e002      	b.n	80026da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026d6:	623b      	str	r3, [r7, #32]
      break;
 80026d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026da:	6a3b      	ldr	r3, [r7, #32]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3728      	adds	r7, #40	; 0x28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc90      	pop	{r4, r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	08005548 	.word	0x08005548
 80026ec:	08005558 	.word	0x08005558
 80026f0:	40021000 	.word	0x40021000
 80026f4:	007a1200 	.word	0x007a1200
 80026f8:	003d0900 	.word	0x003d0900

080026fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <RCC_Delay+0x34>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <RCC_Delay+0x38>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0a5b      	lsrs	r3, r3, #9
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002718:	bf00      	nop
  }
  while (Delay --);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1e5a      	subs	r2, r3, #1
 800271e:	60fa      	str	r2, [r7, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f9      	bne.n	8002718 <RCC_Delay+0x1c>
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000000 	.word	0x20000000
 8002734:	10624dd3 	.word	0x10624dd3

08002738 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d07d      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002754:	2300      	movs	r3, #0
 8002756:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002758:	4b4f      	ldr	r3, [pc, #316]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10d      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002764:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	4a4b      	ldr	r2, [pc, #300]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276e:	61d3      	str	r3, [r2, #28]
 8002770:	4b49      	ldr	r3, [pc, #292]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277c:	2301      	movs	r3, #1
 800277e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002780:	4b46      	ldr	r3, [pc, #280]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d118      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800278c:	4b43      	ldr	r3, [pc, #268]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a42      	ldr	r2, [pc, #264]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002796:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002798:	f7fe f9d4 	bl	8000b44 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	e008      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a0:	f7fe f9d0 	bl	8000b44 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e06d      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	4b3a      	ldr	r3, [pc, #232]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027be:	4b36      	ldr	r3, [pc, #216]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d02e      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d027      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027dc:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027e6:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027ec:	4b2c      	ldr	r3, [pc, #176]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027f2:	4a29      	ldr	r2, [pc, #164]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d014      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe f99f 	bl	8000b44 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fe f99b 	bl	8000b44 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	; 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e036      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ee      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800282c:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4917      	ldr	r1, [pc, #92]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283a:	4313      	orrs	r3, r2
 800283c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d105      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002844:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	4a13      	ldr	r2, [pc, #76]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	490b      	ldr	r1, [pc, #44]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	4904      	ldr	r1, [pc, #16]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	40007000 	.word	0x40007000
 80028a0:	42420440 	.word	0x42420440

080028a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e041      	b.n	800293a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe f85c 	bl	8000988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3304      	adds	r3, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	4610      	mov	r0, r2
 80028e4:	f000 fa92 	bl	8002e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d001      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e03a      	b.n	80029d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_TIM_Base_Start_IT+0x98>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00e      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x58>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002986:	d009      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x58>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d004      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x58>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d111      	bne.n	80029c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d010      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029be:	e007      	b.n	80029d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	40012c00 	.word	0x40012c00
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800

080029e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6a1a      	ldr	r2, [r3, #32]
 8002a06:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10f      	bne.n	8002a30 <HAL_TIM_Base_Stop_IT+0x48>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6a1a      	ldr	r2, [r3, #32]
 8002a16:	f240 4344 	movw	r3, #1092	; 0x444
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d107      	bne.n	8002a30 <HAL_TIM_Base_Stop_IT+0x48>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d122      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d11b      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0202 	mvn.w	r2, #2
 8002a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f9a4 	bl	8002dd4 <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f997 	bl	8002dc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f9a6 	bl	8002de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d122      	bne.n	8002af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d11b      	bne.n	8002af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0204 	mvn.w	r2, #4
 8002ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f97a 	bl	8002dd4 <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f96d 	bl	8002dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f97c 	bl	8002de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d122      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0208 	mvn.w	r2, #8
 8002b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f950 	bl	8002dd4 <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f943 	bl	8002dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f952 	bl	8002de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d122      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	d11b      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0210 	mvn.w	r2, #16
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2208      	movs	r2, #8
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f926 	bl	8002dd4 <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f919 	bl	8002dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f928 	bl	8002de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d107      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0201 	mvn.w	r2, #1
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fd fadc 	bl	8000180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd2:	2b80      	cmp	r3, #128	; 0x80
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be0:	2b80      	cmp	r3, #128	; 0x80
 8002be2:	d107      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fa6b 	bl	80030ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f8ec 	bl	8002df8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	d10e      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	d107      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0220 	mvn.w	r2, #32
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fa36 	bl	80030b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_TIM_ConfigClockSource+0x18>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e0a6      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x166>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d067      	beq.n	8002d74 <HAL_TIM_ConfigClockSource+0x120>
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d80b      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x6c>
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d073      	beq.n	8002d94 <HAL_TIM_ConfigClockSource+0x140>
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d802      	bhi.n	8002cb6 <HAL_TIM_ConfigClockSource+0x62>
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d06f      	beq.n	8002d94 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002cb4:	e078      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d06c      	beq.n	8002d94 <HAL_TIM_ConfigClockSource+0x140>
 8002cba:	2b30      	cmp	r3, #48	; 0x30
 8002cbc:	d06a      	beq.n	8002d94 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002cbe:	e073      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cc0:	2b70      	cmp	r3, #112	; 0x70
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_TIM_ConfigClockSource+0x8c>
 8002cc4:	2b70      	cmp	r3, #112	; 0x70
 8002cc6:	d804      	bhi.n	8002cd2 <HAL_TIM_ConfigClockSource+0x7e>
 8002cc8:	2b50      	cmp	r3, #80	; 0x50
 8002cca:	d033      	beq.n	8002d34 <HAL_TIM_ConfigClockSource+0xe0>
 8002ccc:	2b60      	cmp	r3, #96	; 0x60
 8002cce:	d041      	beq.n	8002d54 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002cd0:	e06a      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd6:	d066      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x152>
 8002cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cdc:	d017      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002cde:	e063      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6899      	ldr	r1, [r3, #8]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f000 f965 	bl	8002fbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	609a      	str	r2, [r3, #8]
      break;
 8002d0c:	e04c      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6899      	ldr	r1, [r3, #8]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f000 f94e 	bl	8002fbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d30:	609a      	str	r2, [r3, #8]
      break;
 8002d32:	e039      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	461a      	mov	r2, r3
 8002d42:	f000 f8c5 	bl	8002ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2150      	movs	r1, #80	; 0x50
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 f91c 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d52:	e029      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	461a      	mov	r2, r3
 8002d62:	f000 f8e3 	bl	8002f2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2160      	movs	r1, #96	; 0x60
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f90c 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d72:	e019      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	461a      	mov	r2, r3
 8002d82:	f000 f8a5 	bl	8002ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2140      	movs	r1, #64	; 0x40
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 f8fc 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d92:	e009      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	f000 f8f3 	bl	8002f8a <TIM_ITRx_SetConfig>
        break;
 8002da4:	e000      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002da6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr
	...

08002e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a29      	ldr	r2, [pc, #164]	; (8002ec4 <TIM_Base_SetConfig+0xb8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00b      	beq.n	8002e3c <TIM_Base_SetConfig+0x30>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2a:	d007      	beq.n	8002e3c <TIM_Base_SetConfig+0x30>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a26      	ldr	r2, [pc, #152]	; (8002ec8 <TIM_Base_SetConfig+0xbc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <TIM_Base_SetConfig+0x30>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <TIM_Base_SetConfig+0xc0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d108      	bne.n	8002e4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <TIM_Base_SetConfig+0xb8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00b      	beq.n	8002e6e <TIM_Base_SetConfig+0x62>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d007      	beq.n	8002e6e <TIM_Base_SetConfig+0x62>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a19      	ldr	r2, [pc, #100]	; (8002ec8 <TIM_Base_SetConfig+0xbc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_Base_SetConfig+0x62>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <TIM_Base_SetConfig+0xc0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d108      	bne.n	8002e80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <TIM_Base_SetConfig+0xb8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d103      	bne.n	8002eb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	615a      	str	r2, [r3, #20]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40000800 	.word	0x40000800

08002ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f023 0201 	bic.w	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f023 030a 	bic.w	r3, r3, #10
 8002f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	621a      	str	r2, [r3, #32]
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f023 0210 	bic.w	r2, r3, #16
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	031b      	lsls	r3, r3, #12
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	621a      	str	r2, [r3, #32]
}
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f043 0307 	orr.w	r3, r3, #7
 8002fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b087      	sub	sp, #28
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	021a      	lsls	r2, r3, #8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	609a      	str	r2, [r3, #8]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003010:	2302      	movs	r3, #2
 8003012:	e046      	b.n	80030a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a16      	ldr	r2, [pc, #88]	; (80030ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003060:	d009      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a10      	ldr	r2, [pc, #64]	; (80030b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10c      	bne.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800307c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	4313      	orrs	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	40012c00 	.word	0x40012c00
 80030b0:	40000400 	.word	0x40000400
 80030b4:	40000800 	.word	0x40000800

080030b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80030ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ee:	2b84      	cmp	r3, #132	; 0x84
 80030f0:	d005      	beq.n	80030fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80030f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	3303      	adds	r3, #3
 80030fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80030fe:	68fb      	ldr	r3, [r7, #12]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003110:	f3ef 8305 	mrs	r3, IPSR
 8003114:	607b      	str	r3, [r7, #4]
  return(result);
 8003116:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003130:	f001 f8d8 	bl	80042e4 <vTaskStartScheduler>
  
  return osOK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	bd80      	pop	{r7, pc}

0800313a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800313a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800313c:	b089      	sub	sp, #36	; 0x24
 800313e:	af04      	add	r7, sp, #16
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <osThreadCreate+0x54>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01c      	beq.n	800318e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685c      	ldr	r4, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681d      	ldr	r5, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691e      	ldr	r6, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff ffb8 	bl	80030dc <makeFreeRtosPriority>
 800316c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003176:	9202      	str	r2, [sp, #8]
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	9100      	str	r1, [sp, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4632      	mov	r2, r6
 8003180:	4629      	mov	r1, r5
 8003182:	4620      	mov	r0, r4
 8003184:	f000 fef3 	bl	8003f6e <xTaskCreateStatic>
 8003188:	4603      	mov	r3, r0
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	e01c      	b.n	80031c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685c      	ldr	r4, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800319a:	b29e      	uxth	r6, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff ff9a 	bl	80030dc <makeFreeRtosPriority>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	9200      	str	r2, [sp, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	4632      	mov	r2, r6
 80031b6:	4629      	mov	r1, r5
 80031b8:	4620      	mov	r0, r4
 80031ba:	f000 ff31 	bl	8004020 <xTaskCreate>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d001      	beq.n	80031c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e000      	b.n	80031ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80031c8:	68fb      	ldr	r3, [r7, #12]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <osDelay+0x16>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	e000      	b.n	80031ea <osDelay+0x18>
 80031e8:	2301      	movs	r3, #1
 80031ea:	4618      	mov	r0, r3
 80031ec:	f001 f846 	bl	800427c <vTaskDelay>
  
  return osOK;
 80031f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80031fa:	b590      	push	{r4, r7, lr}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af02      	add	r7, sp, #8
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <osMessageCreate+0x38>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00e      	beq.n	8003232 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68dc      	ldr	r4, [r3, #12]
 8003224:	2300      	movs	r3, #0
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	4623      	mov	r3, r4
 800322a:	f000 f9db 	bl	80035e4 <xQueueGenericCreateStatic>
 800322e:	4603      	mov	r3, r0
 8003230:	e008      	b.n	8003244 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	4619      	mov	r1, r3
 800323e:	f000 fa43 	bl	80036c8 <xQueueGenericCreate>
 8003242:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bd90      	pop	{r4, r7, pc}

0800324c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <osMessagePut+0x1e>
    ticks = 1;
 8003266:	2301      	movs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800326a:	f7ff ff4e 	bl	800310a <inHandlerMode>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d018      	beq.n	80032a6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003274:	f107 0210 	add.w	r2, r7, #16
 8003278:	f107 0108 	add.w	r1, r7, #8
 800327c:	2300      	movs	r3, #0
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fb78 	bl	8003974 <xQueueGenericSendFromISR>
 8003284:	4603      	mov	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d001      	beq.n	800328e <osMessagePut+0x42>
      return osErrorOS;
 800328a:	23ff      	movs	r3, #255	; 0xff
 800328c:	e018      	b.n	80032c0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d014      	beq.n	80032be <osMessagePut+0x72>
 8003294:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <osMessagePut+0x7c>)
 8003296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	e00b      	b.n	80032be <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80032a6:	f107 0108 	add.w	r1, r7, #8
 80032aa:	2300      	movs	r3, #0
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fa66 	bl	8003780 <xQueueGenericSend>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d001      	beq.n	80032be <osMessagePut+0x72>
      return osErrorOS;
 80032ba:	23ff      	movs	r3, #255	; 0xff
 80032bc:	e000      	b.n	80032c0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	e000ed04 	.word	0xe000ed04

080032cc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80032cc:	b590      	push	{r4, r7, lr}
 80032ce:	b08b      	sub	sp, #44	; 0x2c
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	617b      	str	r3, [r7, #20]
    return event;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	461c      	mov	r4, r3
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032fa:	e054      	b.n	80033a6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80032fc:	2300      	movs	r3, #0
 80032fe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330a:	d103      	bne.n	8003314 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800330c:	f04f 33ff 	mov.w	r3, #4294967295
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
 8003312:	e009      	b.n	8003328 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d006      	beq.n	8003328 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <osMessageGet+0x5c>
      ticks = 1;
 8003324:	2301      	movs	r3, #1
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003328:	f7ff feef 	bl	800310a <inHandlerMode>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01c      	beq.n	800336c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003332:	f107 0220 	add.w	r2, r7, #32
 8003336:	f107 0314 	add.w	r3, r7, #20
 800333a:	3304      	adds	r3, #4
 800333c:	4619      	mov	r1, r3
 800333e:	68b8      	ldr	r0, [r7, #8]
 8003340:	f000 fc88 	bl	8003c54 <xQueueReceiveFromISR>
 8003344:	4603      	mov	r3, r0
 8003346:	2b01      	cmp	r3, #1
 8003348:	d102      	bne.n	8003350 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800334a:	2310      	movs	r3, #16
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	e001      	b.n	8003354 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d01d      	beq.n	8003396 <osMessageGet+0xca>
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <osMessageGet+0xe4>)
 800335c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	e014      	b.n	8003396 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	3304      	adds	r3, #4
 8003372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003374:	4619      	mov	r1, r3
 8003376:	68b8      	ldr	r0, [r7, #8]
 8003378:	f000 fb90 	bl	8003a9c <xQueueReceive>
 800337c:	4603      	mov	r3, r0
 800337e:	2b01      	cmp	r3, #1
 8003380:	d102      	bne.n	8003388 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003382:	2310      	movs	r3, #16
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	e006      	b.n	8003396 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <osMessageGet+0xc6>
 800338e:	2300      	movs	r3, #0
 8003390:	e000      	b.n	8003394 <osMessageGet+0xc8>
 8003392:	2340      	movs	r3, #64	; 0x40
 8003394:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	461c      	mov	r4, r3
 800339a:	f107 0314 	add.w	r3, r7, #20
 800339e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	372c      	adds	r7, #44	; 0x2c
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd90      	pop	{r4, r7, pc}
 80033ae:	bf00      	nop
 80033b0:	e000ed04 	.word	0xe000ed04

080033b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f103 0208 	add.w	r2, r3, #8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f04f 32ff 	mov.w	r2, #4294967295
 80033cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f103 0208 	add.w	r2, r3, #8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f103 0208 	add.w	r2, r3, #8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	601a      	str	r2, [r3, #0]
}
 8003446:	bf00      	nop
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d103      	bne.n	8003470 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	e00c      	b.n	800348a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3308      	adds	r3, #8
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e002      	b.n	800347e <vListInsert+0x2e>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	429a      	cmp	r2, r3
 8003488:	d2f6      	bcs.n	8003478 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	601a      	str	r2, [r3, #0]
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6892      	ldr	r2, [r2, #8]
 80034d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6852      	ldr	r2, [r2, #4]
 80034e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d103      	bne.n	80034f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	1e5a      	subs	r2, r3, #1
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr
	...

08003514 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	e7fe      	b.n	800353a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800353c:	f001 fcc4 	bl	8004ec8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	68f9      	ldr	r1, [r7, #12]
 800354a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	441a      	add	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	3b01      	subs	r3, #1
 800356e:	68f9      	ldr	r1, [r7, #12]
 8003570:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	441a      	add	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	22ff      	movs	r2, #255	; 0xff
 8003580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	22ff      	movs	r2, #255	; 0xff
 8003588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d114      	bne.n	80035bc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01a      	beq.n	80035d0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3310      	adds	r3, #16
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 f8e2 	bl	8004768 <xTaskRemoveFromEventList>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d012      	beq.n	80035d0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <xQueueGenericReset+0xcc>)
 80035ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	e009      	b.n	80035d0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3310      	adds	r3, #16
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fef7 	bl	80033b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3324      	adds	r3, #36	; 0x24
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fef2 	bl	80033b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035d0:	f001 fca8 	bl	8004f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035d4:	2301      	movs	r3, #1
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	e000ed04 	.word	0xe000ed04

080035e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08e      	sub	sp, #56	; 0x38
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d109      	bne.n	800360c <xQueueGenericCreateStatic+0x28>
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
 800360a:	e7fe      	b.n	800360a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <xQueueGenericCreateStatic+0x42>
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
 8003624:	e7fe      	b.n	8003624 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <xQueueGenericCreateStatic+0x4e>
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <xQueueGenericCreateStatic+0x52>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <xQueueGenericCreateStatic+0x54>
 8003636:	2300      	movs	r3, #0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <xQueueGenericCreateStatic+0x6c>
 800363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003640:	f383 8811 	msr	BASEPRI, r3
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	623b      	str	r3, [r7, #32]
 800364e:	e7fe      	b.n	800364e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <xQueueGenericCreateStatic+0x78>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <xQueueGenericCreateStatic+0x7c>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <xQueueGenericCreateStatic+0x7e>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <xQueueGenericCreateStatic+0x96>
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	e7fe      	b.n	8003678 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800367a:	2348      	movs	r3, #72	; 0x48
 800367c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b48      	cmp	r3, #72	; 0x48
 8003682:	d009      	beq.n	8003698 <xQueueGenericCreateStatic+0xb4>
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	e7fe      	b.n	8003696 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	4613      	mov	r3, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f842 	bl	8003742 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3730      	adds	r7, #48	; 0x30
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	; 0x28
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <xQueueGenericCreate+0x28>
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	e7fe      	b.n	80036ee <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e004      	b.n	8003706 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	fb02 f303 	mul.w	r3, r2, r3
 8003704:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3348      	adds	r3, #72	; 0x48
 800370a:	4618      	mov	r0, r3
 800370c:	f001 fcd2 	bl	80050b4 <pvPortMalloc>
 8003710:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00f      	beq.n	8003738 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	3348      	adds	r3, #72	; 0x48
 800371c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003726:	79fa      	ldrb	r2, [r7, #7]
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f805 	bl	8003742 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003738:	69bb      	ldr	r3, [r7, #24]
	}
 800373a:	4618      	mov	r0, r3
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	e002      	b.n	8003764 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003770:	2101      	movs	r1, #1
 8003772:	69b8      	ldr	r0, [r7, #24]
 8003774:	f7ff fece 	bl	8003514 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08e      	sub	sp, #56	; 0x38
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800378e:	2300      	movs	r3, #0
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <xQueueGenericSend+0x30>
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ae:	e7fe      	b.n	80037ae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d103      	bne.n	80037be <xQueueGenericSend+0x3e>
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <xQueueGenericSend+0x42>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <xQueueGenericSend+0x44>
 80037c2:	2300      	movs	r3, #0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <xQueueGenericSend+0x5c>
 80037c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
 80037da:	e7fe      	b.n	80037da <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d103      	bne.n	80037ea <xQueueGenericSend+0x6a>
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <xQueueGenericSend+0x6e>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <xQueueGenericSend+0x70>
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <xQueueGenericSend+0x88>
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	623b      	str	r3, [r7, #32]
 8003806:	e7fe      	b.n	8003806 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003808:	f001 f968 	bl	8004adc <xTaskGetSchedulerState>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <xQueueGenericSend+0x98>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <xQueueGenericSend+0x9c>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <xQueueGenericSend+0x9e>
 800381c:	2300      	movs	r3, #0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <xQueueGenericSend+0xb6>
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	e7fe      	b.n	8003834 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003836:	f001 fb47 	bl	8004ec8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003842:	429a      	cmp	r2, r3
 8003844:	d302      	bcc.n	800384c <xQueueGenericSend+0xcc>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d129      	bne.n	80038a0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003852:	f000 fa7c 	bl	8003d4e <prvCopyDataToQueue>
 8003856:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	2b00      	cmp	r3, #0
 800385e:	d010      	beq.n	8003882 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003862:	3324      	adds	r3, #36	; 0x24
 8003864:	4618      	mov	r0, r3
 8003866:	f000 ff7f 	bl	8004768 <xTaskRemoveFromEventList>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d013      	beq.n	8003898 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003870:	4b3f      	ldr	r3, [pc, #252]	; (8003970 <xQueueGenericSend+0x1f0>)
 8003872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	e00a      	b.n	8003898 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003888:	4b39      	ldr	r3, [pc, #228]	; (8003970 <xQueueGenericSend+0x1f0>)
 800388a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003898:	f001 fb44 	bl	8004f24 <vPortExitCritical>
				return pdPASS;
 800389c:	2301      	movs	r3, #1
 800389e:	e063      	b.n	8003968 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d103      	bne.n	80038ae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038a6:	f001 fb3d 	bl	8004f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e05c      	b.n	8003968 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d106      	bne.n	80038c2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 ffb7 	bl	800482c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038be:	2301      	movs	r3, #1
 80038c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038c2:	f001 fb2f 	bl	8004f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038c6:	f000 fd6b 	bl	80043a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038ca:	f001 fafd 	bl	8004ec8 <vPortEnterCritical>
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038d4:	b25b      	sxtb	r3, r3
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038da:	d103      	bne.n	80038e4 <xQueueGenericSend+0x164>
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ea:	b25b      	sxtb	r3, r3
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f0:	d103      	bne.n	80038fa <xQueueGenericSend+0x17a>
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038fa:	f001 fb13 	bl	8004f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038fe:	1d3a      	adds	r2, r7, #4
 8003900:	f107 0314 	add.w	r3, r7, #20
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f000 ffa6 	bl	8004858 <xTaskCheckForTimeOut>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d124      	bne.n	800395c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003914:	f000 fb13 	bl	8003f3e <prvIsQueueFull>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d018      	beq.n	8003950 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	3310      	adds	r3, #16
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fefa 	bl	8004720 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800392c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800392e:	f000 fa9e 	bl	8003e6e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003932:	f000 fd43 	bl	80043bc <xTaskResumeAll>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	f47f af7c 	bne.w	8003836 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800393e:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <xQueueGenericSend+0x1f0>)
 8003940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	e772      	b.n	8003836 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003952:	f000 fa8c 	bl	8003e6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003956:	f000 fd31 	bl	80043bc <xTaskResumeAll>
 800395a:	e76c      	b.n	8003836 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800395c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800395e:	f000 fa86 	bl	8003e6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003962:	f000 fd2b 	bl	80043bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003966:	2300      	movs	r3, #0
		}
	}
}
 8003968:	4618      	mov	r0, r3
 800396a:	3738      	adds	r7, #56	; 0x38
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08e      	sub	sp, #56	; 0x38
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	2b00      	cmp	r3, #0
 800398a:	d109      	bne.n	80039a0 <xQueueGenericSendFromISR+0x2c>
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
 800399e:	e7fe      	b.n	800399e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d103      	bne.n	80039ae <xQueueGenericSendFromISR+0x3a>
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <xQueueGenericSendFromISR+0x3e>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <xQueueGenericSendFromISR+0x40>
 80039b2:	2300      	movs	r3, #0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d109      	bne.n	80039cc <xQueueGenericSendFromISR+0x58>
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	623b      	str	r3, [r7, #32]
 80039ca:	e7fe      	b.n	80039ca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d103      	bne.n	80039da <xQueueGenericSendFromISR+0x66>
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <xQueueGenericSendFromISR+0x6a>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <xQueueGenericSendFromISR+0x6c>
 80039de:	2300      	movs	r3, #0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d109      	bne.n	80039f8 <xQueueGenericSendFromISR+0x84>
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e7fe      	b.n	80039f6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039f8:	f001 fb20 	bl	800503c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039fc:	f3ef 8211 	mrs	r2, BASEPRI
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	61ba      	str	r2, [r7, #24]
 8003a12:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a14:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d302      	bcc.n	8003a2a <xQueueGenericSendFromISR+0xb6>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d12c      	bne.n	8003a84 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a3a:	f000 f988 	bl	8003d4e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a3e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d112      	bne.n	8003a6e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d016      	beq.n	8003a7e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	3324      	adds	r3, #36	; 0x24
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fe87 	bl	8004768 <xTaskRemoveFromEventList>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00e      	beq.n	8003a7e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	e007      	b.n	8003a7e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a72:	3301      	adds	r3, #1
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	b25a      	sxtb	r2, r3
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003a82:	e001      	b.n	8003a88 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	637b      	str	r3, [r7, #52]	; 0x34
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3738      	adds	r7, #56	; 0x38
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08c      	sub	sp, #48	; 0x30
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <xQueueReceive+0x2e>
	__asm volatile
 8003ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	e7fe      	b.n	8003ac8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d103      	bne.n	8003ad8 <xQueueReceive+0x3c>
 8003ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <xQueueReceive+0x40>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <xQueueReceive+0x42>
 8003adc:	2300      	movs	r3, #0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <xQueueReceive+0x5a>
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	e7fe      	b.n	8003af4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003af6:	f000 fff1 	bl	8004adc <xTaskGetSchedulerState>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <xQueueReceive+0x6a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <xQueueReceive+0x6e>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <xQueueReceive+0x70>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <xQueueReceive+0x88>
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	e7fe      	b.n	8003b22 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b24:	f001 f9d0 	bl	8004ec8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01f      	beq.n	8003b74 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b38:	f000 f973 	bl	8003e22 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	1e5a      	subs	r2, r3, #1
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00f      	beq.n	8003b6c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	3310      	adds	r3, #16
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fe09 	bl	8004768 <xTaskRemoveFromEventList>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b5c:	4b3c      	ldr	r3, [pc, #240]	; (8003c50 <xQueueReceive+0x1b4>)
 8003b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b6c:	f001 f9da 	bl	8004f24 <vPortExitCritical>
				return pdPASS;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e069      	b.n	8003c48 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d103      	bne.n	8003b82 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b7a:	f001 f9d3 	bl	8004f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e062      	b.n	8003c48 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b88:	f107 0310 	add.w	r3, r7, #16
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fe4d 	bl	800482c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b92:	2301      	movs	r3, #1
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b96:	f001 f9c5 	bl	8004f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b9a:	f000 fc01 	bl	80043a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b9e:	f001 f993 	bl	8004ec8 <vPortEnterCritical>
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ba8:	b25b      	sxtb	r3, r3
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d103      	bne.n	8003bb8 <xQueueReceive+0x11c>
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bbe:	b25b      	sxtb	r3, r3
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d103      	bne.n	8003bce <xQueueReceive+0x132>
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bce:	f001 f9a9 	bl	8004f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bd2:	1d3a      	adds	r2, r7, #4
 8003bd4:	f107 0310 	add.w	r3, r7, #16
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fe3c 	bl	8004858 <xTaskCheckForTimeOut>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d123      	bne.n	8003c2e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003be8:	f000 f993 	bl	8003f12 <prvIsQueueEmpty>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d017      	beq.n	8003c22 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	3324      	adds	r3, #36	; 0x24
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fd90 	bl	8004720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c02:	f000 f934 	bl	8003e6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c06:	f000 fbd9 	bl	80043bc <xTaskResumeAll>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d189      	bne.n	8003b24 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <xQueueReceive+0x1b4>)
 8003c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	e780      	b.n	8003b24 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c24:	f000 f923 	bl	8003e6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c28:	f000 fbc8 	bl	80043bc <xTaskResumeAll>
 8003c2c:	e77a      	b.n	8003b24 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c30:	f000 f91d 	bl	8003e6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c34:	f000 fbc2 	bl	80043bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c3a:	f000 f96a 	bl	8003f12 <prvIsQueueEmpty>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f43f af6f 	beq.w	8003b24 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3730      	adds	r7, #48	; 0x30
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	e000ed04 	.word	0xe000ed04

08003c54 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08e      	sub	sp, #56	; 0x38
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <xQueueReceiveFromISR+0x2a>
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	623b      	str	r3, [r7, #32]
 8003c7c:	e7fe      	b.n	8003c7c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d103      	bne.n	8003c8c <xQueueReceiveFromISR+0x38>
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <xQueueReceiveFromISR+0x3c>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <xQueueReceiveFromISR+0x3e>
 8003c90:	2300      	movs	r3, #0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <xQueueReceiveFromISR+0x56>
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003caa:	f001 f9c7 	bl	800503c <vPortValidateInterruptPriority>
	__asm volatile
 8003cae:	f3ef 8211 	mrs	r2, BASEPRI
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	61ba      	str	r2, [r7, #24]
 8003cc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003cc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d02f      	beq.n	8003d36 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ce4:	f000 f89d 	bl	8003e22 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cea:	1e5a      	subs	r2, r3, #1
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003cf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d112      	bne.n	8003d20 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d016      	beq.n	8003d30 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	3310      	adds	r3, #16
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fd2e 	bl	8004768 <xTaskRemoveFromEventList>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00e      	beq.n	8003d30 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00b      	beq.n	8003d30 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e007      	b.n	8003d30 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d24:	3301      	adds	r3, #1
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	b25a      	sxtb	r2, r3
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003d30:	2301      	movs	r3, #1
 8003d32:	637b      	str	r3, [r7, #52]	; 0x34
 8003d34:	e001      	b.n	8003d3a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3738      	adds	r7, #56	; 0x38
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b086      	sub	sp, #24
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10d      	bne.n	8003d88 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d14d      	bne.n	8003e10 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fecd 	bl	8004b18 <xTaskPriorityDisinherit>
 8003d7e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	e043      	b.n	8003e10 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d119      	bne.n	8003dc2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6898      	ldr	r0, [r3, #8]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	461a      	mov	r2, r3
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	f001 fb83 	bl	80054a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	441a      	add	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d32b      	bcc.n	8003e10 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	e026      	b.n	8003e10 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	68d8      	ldr	r0, [r3, #12]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	f001 fb69 	bl	80054a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	425b      	negs	r3, r3
 8003ddc:	441a      	add	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d207      	bcs.n	8003dfe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	425b      	negs	r3, r3
 8003df8:	441a      	add	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d105      	bne.n	8003e10 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e18:	697b      	ldr	r3, [r7, #20]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d018      	beq.n	8003e66 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	441a      	add	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d303      	bcc.n	8003e56 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68d9      	ldr	r1, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6838      	ldr	r0, [r7, #0]
 8003e62:	f001 fb1f 	bl	80054a4 <memcpy>
	}
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e76:	f001 f827 	bl	8004ec8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e80:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e82:	e011      	b.n	8003ea8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d012      	beq.n	8003eb2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3324      	adds	r3, #36	; 0x24
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fc69 	bl	8004768 <xTaskRemoveFromEventList>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e9c:	f000 fd3c 	bl	8004918 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	dce9      	bgt.n	8003e84 <prvUnlockQueue+0x16>
 8003eb0:	e000      	b.n	8003eb4 <prvUnlockQueue+0x46>
					break;
 8003eb2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	22ff      	movs	r2, #255	; 0xff
 8003eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ebc:	f001 f832 	bl	8004f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ec0:	f001 f802 	bl	8004ec8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ecc:	e011      	b.n	8003ef2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d012      	beq.n	8003efc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3310      	adds	r3, #16
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fc44 	bl	8004768 <xTaskRemoveFromEventList>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ee6:	f000 fd17 	bl	8004918 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003eea:	7bbb      	ldrb	r3, [r7, #14]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ef2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	dce9      	bgt.n	8003ece <prvUnlockQueue+0x60>
 8003efa:	e000      	b.n	8003efe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003efc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	22ff      	movs	r2, #255	; 0xff
 8003f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f06:	f001 f80d 	bl	8004f24 <vPortExitCritical>
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f1a:	f000 ffd5 	bl	8004ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d102      	bne.n	8003f2c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f26:	2301      	movs	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	e001      	b.n	8003f30 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f30:	f000 fff8 	bl	8004f24 <vPortExitCritical>

	return xReturn;
 8003f34:	68fb      	ldr	r3, [r7, #12]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f46:	f000 ffbf 	bl	8004ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d102      	bne.n	8003f5c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f56:	2301      	movs	r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	e001      	b.n	8003f60 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f60:	f000 ffe0 	bl	8004f24 <vPortExitCritical>

	return xReturn;
 8003f64:	68fb      	ldr	r3, [r7, #12]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b08e      	sub	sp, #56	; 0x38
 8003f72:	af04      	add	r7, sp, #16
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <xTaskCreateStatic+0x28>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	623b      	str	r3, [r7, #32]
 8003f94:	e7fe      	b.n	8003f94 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <xTaskCreateStatic+0x42>
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	e7fe      	b.n	8003fae <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fb0:	2354      	movs	r3, #84	; 0x54
 8003fb2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b54      	cmp	r3, #84	; 0x54
 8003fb8:	d009      	beq.n	8003fce <xTaskCreateStatic+0x60>
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	e7fe      	b.n	8003fcc <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01e      	beq.n	8004012 <xTaskCreateStatic+0xa4>
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01b      	beq.n	8004012 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fec:	2300      	movs	r3, #0
 8003fee:	9303      	str	r3, [sp, #12]
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	9302      	str	r3, [sp, #8]
 8003ff4:	f107 0314 	add.w	r3, r7, #20
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f850 	bl	80040aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800400a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800400c:	f000 f8cc 	bl	80041a8 <prvAddNewTaskToReadyList>
 8004010:	e001      	b.n	8004016 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004016:	697b      	ldr	r3, [r7, #20]
	}
 8004018:	4618      	mov	r0, r3
 800401a:	3728      	adds	r7, #40	; 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08c      	sub	sp, #48	; 0x30
 8004024:	af04      	add	r7, sp, #16
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	4613      	mov	r3, r2
 800402e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4618      	mov	r0, r3
 8004036:	f001 f83d 	bl	80050b4 <pvPortMalloc>
 800403a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00e      	beq.n	8004060 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004042:	2054      	movs	r0, #84	; 0x54
 8004044:	f001 f836 	bl	80050b4 <pvPortMalloc>
 8004048:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	631a      	str	r2, [r3, #48]	; 0x30
 8004056:	e005      	b.n	8004064 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004058:	6978      	ldr	r0, [r7, #20]
 800405a:	f001 f8ed 	bl	8005238 <vPortFree>
 800405e:	e001      	b.n	8004064 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d017      	beq.n	800409a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004072:	88fa      	ldrh	r2, [r7, #6]
 8004074:	2300      	movs	r3, #0
 8004076:	9303      	str	r3, [sp, #12]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	9302      	str	r3, [sp, #8]
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f80e 	bl	80040aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800408e:	69f8      	ldr	r0, [r7, #28]
 8004090:	f000 f88a 	bl	80041a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004094:	2301      	movs	r3, #1
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	e002      	b.n	80040a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800409a:	f04f 33ff 	mov.w	r3, #4294967295
 800409e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040a0:	69bb      	ldr	r3, [r7, #24]
	}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b088      	sub	sp, #32
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
 80040b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040c2:	3b01      	subs	r3, #1
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f023 0307 	bic.w	r3, r3, #7
 80040d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d009      	beq.n	80040f0 <prvInitialiseNewTask+0x46>
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e7fe      	b.n	80040ee <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040f0:	2300      	movs	r3, #0
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	e012      	b.n	800411c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	4413      	add	r3, r2
 80040fc:	7819      	ldrb	r1, [r3, #0]
 80040fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	3334      	adds	r3, #52	; 0x34
 8004106:	460a      	mov	r2, r1
 8004108:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	4413      	add	r3, r2
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d006      	beq.n	8004124 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3301      	adds	r3, #1
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b0f      	cmp	r3, #15
 8004120:	d9e9      	bls.n	80040f6 <prvInitialiseNewTask+0x4c>
 8004122:	e000      	b.n	8004126 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004124:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	2b06      	cmp	r3, #6
 8004132:	d901      	bls.n	8004138 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004134:	2306      	movs	r3, #6
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800413c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004142:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004146:	2200      	movs	r2, #0
 8004148:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	3304      	adds	r3, #4
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff f94f 	bl	80033f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	3318      	adds	r3, #24
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff f94a 	bl	80033f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004162:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	f1c3 0207 	rsb	r2, r3, #7
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004172:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	2200      	movs	r2, #0
 8004178:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	68f9      	ldr	r1, [r7, #12]
 8004186:	69b8      	ldr	r0, [r7, #24]
 8004188:	f000 fdb0 	bl	8004cec <pxPortInitialiseStack>
 800418c:	4602      	mov	r2, r0
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800419e:	bf00      	nop
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041b0:	f000 fe8a 	bl	8004ec8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041b4:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <prvAddNewTaskToReadyList+0xb8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3301      	adds	r3, #1
 80041ba:	4a29      	ldr	r2, [pc, #164]	; (8004260 <prvAddNewTaskToReadyList+0xb8>)
 80041bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <prvAddNewTaskToReadyList+0xbc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041c6:	4a27      	ldr	r2, [pc, #156]	; (8004264 <prvAddNewTaskToReadyList+0xbc>)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041cc:	4b24      	ldr	r3, [pc, #144]	; (8004260 <prvAddNewTaskToReadyList+0xb8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d110      	bne.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041d4:	f000 fbc4 	bl	8004960 <prvInitialiseTaskLists>
 80041d8:	e00d      	b.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041da:	4b23      	ldr	r3, [pc, #140]	; (8004268 <prvAddNewTaskToReadyList+0xc0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041e2:	4b20      	ldr	r3, [pc, #128]	; (8004264 <prvAddNewTaskToReadyList+0xbc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d802      	bhi.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041f0:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <prvAddNewTaskToReadyList+0xbc>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <prvAddNewTaskToReadyList+0xc4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	4a1b      	ldr	r2, [pc, #108]	; (800426c <prvAddNewTaskToReadyList+0xc4>)
 80041fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	2201      	movs	r2, #1
 8004206:	409a      	lsls	r2, r3
 8004208:	4b19      	ldr	r3, [pc, #100]	; (8004270 <prvAddNewTaskToReadyList+0xc8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4313      	orrs	r3, r2
 800420e:	4a18      	ldr	r2, [pc, #96]	; (8004270 <prvAddNewTaskToReadyList+0xc8>)
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4a15      	ldr	r2, [pc, #84]	; (8004274 <prvAddNewTaskToReadyList+0xcc>)
 8004220:	441a      	add	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f7ff f8ee 	bl	800340a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800422e:	f000 fe79 	bl	8004f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004232:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <prvAddNewTaskToReadyList+0xc0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <prvAddNewTaskToReadyList+0xbc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	429a      	cmp	r2, r3
 8004246:	d207      	bcs.n	8004258 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <prvAddNewTaskToReadyList+0xd0>)
 800424a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000384 	.word	0x20000384
 8004264:	20000284 	.word	0x20000284
 8004268:	20000390 	.word	0x20000390
 800426c:	200003a0 	.word	0x200003a0
 8004270:	2000038c 	.word	0x2000038c
 8004274:	20000288 	.word	0x20000288
 8004278:	e000ed04 	.word	0xe000ed04

0800427c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <vTaskDelay+0x60>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <vTaskDelay+0x2e>
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	e7fe      	b.n	80042a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80042aa:	f000 f879 	bl	80043a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042ae:	2100      	movs	r1, #0
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fcb5 	bl	8004c20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042b6:	f000 f881 	bl	80043bc <xTaskResumeAll>
 80042ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d107      	bne.n	80042d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <vTaskDelay+0x64>)
 80042c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	200003ac 	.word	0x200003ac
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042f2:	463a      	mov	r2, r7
 80042f4:	1d39      	adds	r1, r7, #4
 80042f6:	f107 0308 	add.w	r3, r7, #8
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fb ff28 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004300:	6839      	ldr	r1, [r7, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	9202      	str	r2, [sp, #8]
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	2300      	movs	r3, #0
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	2300      	movs	r3, #0
 8004310:	460a      	mov	r2, r1
 8004312:	491d      	ldr	r1, [pc, #116]	; (8004388 <vTaskStartScheduler+0xa4>)
 8004314:	481d      	ldr	r0, [pc, #116]	; (800438c <vTaskStartScheduler+0xa8>)
 8004316:	f7ff fe2a 	bl	8003f6e <xTaskCreateStatic>
 800431a:	4602      	mov	r2, r0
 800431c:	4b1c      	ldr	r3, [pc, #112]	; (8004390 <vTaskStartScheduler+0xac>)
 800431e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004320:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <vTaskStartScheduler+0xac>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004328:	2301      	movs	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e001      	b.n	8004332 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d115      	bne.n	8004364 <vTaskStartScheduler+0x80>
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <vTaskStartScheduler+0xb0>)
 800434c:	f04f 32ff 	mov.w	r2, #4294967295
 8004350:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004352:	4b11      	ldr	r3, [pc, #68]	; (8004398 <vTaskStartScheduler+0xb4>)
 8004354:	2201      	movs	r2, #1
 8004356:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004358:	4b10      	ldr	r3, [pc, #64]	; (800439c <vTaskStartScheduler+0xb8>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800435e:	f000 fd43 	bl	8004de8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004362:	e00d      	b.n	8004380 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	d109      	bne.n	8004380 <vTaskStartScheduler+0x9c>
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e7fe      	b.n	800437e <vTaskStartScheduler+0x9a>
}
 8004380:	bf00      	nop
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	0800555c 	.word	0x0800555c
 800438c:	08004931 	.word	0x08004931
 8004390:	200003a8 	.word	0x200003a8
 8004394:	200003a4 	.word	0x200003a4
 8004398:	20000390 	.word	0x20000390
 800439c:	20000388 	.word	0x20000388

080043a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043a4:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <vTaskSuspendAll+0x18>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3301      	adds	r3, #1
 80043aa:	4a03      	ldr	r2, [pc, #12]	; (80043b8 <vTaskSuspendAll+0x18>)
 80043ac:	6013      	str	r3, [r2, #0]
}
 80043ae:	bf00      	nop
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	200003ac 	.word	0x200003ac

080043bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043ca:	4b41      	ldr	r3, [pc, #260]	; (80044d0 <xTaskResumeAll+0x114>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <xTaskResumeAll+0x2a>
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	e7fe      	b.n	80043e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043e6:	f000 fd6f 	bl	8004ec8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043ea:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <xTaskResumeAll+0x114>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	4a37      	ldr	r2, [pc, #220]	; (80044d0 <xTaskResumeAll+0x114>)
 80043f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043f4:	4b36      	ldr	r3, [pc, #216]	; (80044d0 <xTaskResumeAll+0x114>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d161      	bne.n	80044c0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043fc:	4b35      	ldr	r3, [pc, #212]	; (80044d4 <xTaskResumeAll+0x118>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d05d      	beq.n	80044c0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004404:	e02e      	b.n	8004464 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004406:	4b34      	ldr	r3, [pc, #208]	; (80044d8 <xTaskResumeAll+0x11c>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3318      	adds	r3, #24
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff f854 	bl	80034c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3304      	adds	r3, #4
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff f84f 	bl	80034c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	2201      	movs	r2, #1
 8004428:	409a      	lsls	r2, r3
 800442a:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <xTaskResumeAll+0x120>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4313      	orrs	r3, r2
 8004430:	4a2a      	ldr	r2, [pc, #168]	; (80044dc <xTaskResumeAll+0x120>)
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4a27      	ldr	r2, [pc, #156]	; (80044e0 <xTaskResumeAll+0x124>)
 8004442:	441a      	add	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3304      	adds	r3, #4
 8004448:	4619      	mov	r1, r3
 800444a:	4610      	mov	r0, r2
 800444c:	f7fe ffdd 	bl	800340a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <xTaskResumeAll+0x128>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	429a      	cmp	r2, r3
 800445c:	d302      	bcc.n	8004464 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800445e:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <xTaskResumeAll+0x12c>)
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004464:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <xTaskResumeAll+0x11c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1cc      	bne.n	8004406 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004472:	f000 fb0f 	bl	8004a94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004476:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <xTaskResumeAll+0x130>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d010      	beq.n	80044a4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004482:	f000 f837 	bl	80044f4 <xTaskIncrementTick>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800448c:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <xTaskResumeAll+0x12c>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3b01      	subs	r3, #1
 8004496:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f1      	bne.n	8004482 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <xTaskResumeAll+0x130>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044a4:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <xTaskResumeAll+0x12c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d009      	beq.n	80044c0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044ac:	2301      	movs	r3, #1
 80044ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044b0:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <xTaskResumeAll+0x134>)
 80044b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044c0:	f000 fd30 	bl	8004f24 <vPortExitCritical>

	return xAlreadyYielded;
 80044c4:	68bb      	ldr	r3, [r7, #8]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	200003ac 	.word	0x200003ac
 80044d4:	20000384 	.word	0x20000384
 80044d8:	20000344 	.word	0x20000344
 80044dc:	2000038c 	.word	0x2000038c
 80044e0:	20000288 	.word	0x20000288
 80044e4:	20000284 	.word	0x20000284
 80044e8:	20000398 	.word	0x20000398
 80044ec:	20000394 	.word	0x20000394
 80044f0:	e000ed04 	.word	0xe000ed04

080044f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044fe:	4b50      	ldr	r3, [pc, #320]	; (8004640 <xTaskIncrementTick+0x14c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 808c 	bne.w	8004620 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004508:	4b4e      	ldr	r3, [pc, #312]	; (8004644 <xTaskIncrementTick+0x150>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3301      	adds	r3, #1
 800450e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004510:	4a4c      	ldr	r2, [pc, #304]	; (8004644 <xTaskIncrementTick+0x150>)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d11f      	bne.n	800455c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800451c:	4b4a      	ldr	r3, [pc, #296]	; (8004648 <xTaskIncrementTick+0x154>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <xTaskIncrementTick+0x46>
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	e7fe      	b.n	8004538 <xTaskIncrementTick+0x44>
 800453a:	4b43      	ldr	r3, [pc, #268]	; (8004648 <xTaskIncrementTick+0x154>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	4b42      	ldr	r3, [pc, #264]	; (800464c <xTaskIncrementTick+0x158>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a40      	ldr	r2, [pc, #256]	; (8004648 <xTaskIncrementTick+0x154>)
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	4a40      	ldr	r2, [pc, #256]	; (800464c <xTaskIncrementTick+0x158>)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b40      	ldr	r3, [pc, #256]	; (8004650 <xTaskIncrementTick+0x15c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3301      	adds	r3, #1
 8004554:	4a3e      	ldr	r2, [pc, #248]	; (8004650 <xTaskIncrementTick+0x15c>)
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	f000 fa9c 	bl	8004a94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800455c:	4b3d      	ldr	r3, [pc, #244]	; (8004654 <xTaskIncrementTick+0x160>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	429a      	cmp	r2, r3
 8004564:	d34d      	bcc.n	8004602 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004566:	4b38      	ldr	r3, [pc, #224]	; (8004648 <xTaskIncrementTick+0x154>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <xTaskIncrementTick+0x80>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <xTaskIncrementTick+0x82>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d004      	beq.n	8004584 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800457a:	4b36      	ldr	r3, [pc, #216]	; (8004654 <xTaskIncrementTick+0x160>)
 800457c:	f04f 32ff 	mov.w	r2, #4294967295
 8004580:	601a      	str	r2, [r3, #0]
					break;
 8004582:	e03e      	b.n	8004602 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004584:	4b30      	ldr	r3, [pc, #192]	; (8004648 <xTaskIncrementTick+0x154>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	429a      	cmp	r2, r3
 800459a:	d203      	bcs.n	80045a4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800459c:	4a2d      	ldr	r2, [pc, #180]	; (8004654 <xTaskIncrementTick+0x160>)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6013      	str	r3, [r2, #0]
						break;
 80045a2:	e02e      	b.n	8004602 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe ff89 	bl	80034c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d004      	beq.n	80045c0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3318      	adds	r3, #24
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe ff80 	bl	80034c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	2201      	movs	r2, #1
 80045c6:	409a      	lsls	r2, r3
 80045c8:	4b23      	ldr	r3, [pc, #140]	; (8004658 <xTaskIncrementTick+0x164>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	4a22      	ldr	r2, [pc, #136]	; (8004658 <xTaskIncrementTick+0x164>)
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4a1f      	ldr	r2, [pc, #124]	; (800465c <xTaskIncrementTick+0x168>)
 80045e0:	441a      	add	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4619      	mov	r1, r3
 80045e8:	4610      	mov	r0, r2
 80045ea:	f7fe ff0e 	bl	800340a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f2:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <xTaskIncrementTick+0x16c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d3b4      	bcc.n	8004566 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80045fc:	2301      	movs	r3, #1
 80045fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004600:	e7b1      	b.n	8004566 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004602:	4b17      	ldr	r3, [pc, #92]	; (8004660 <xTaskIncrementTick+0x16c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	4914      	ldr	r1, [pc, #80]	; (800465c <xTaskIncrementTick+0x168>)
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d907      	bls.n	800462a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800461a:	2301      	movs	r3, #1
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e004      	b.n	800462a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004620:	4b10      	ldr	r3, [pc, #64]	; (8004664 <xTaskIncrementTick+0x170>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3301      	adds	r3, #1
 8004626:	4a0f      	ldr	r2, [pc, #60]	; (8004664 <xTaskIncrementTick+0x170>)
 8004628:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <xTaskIncrementTick+0x174>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004632:	2301      	movs	r3, #1
 8004634:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004636:	697b      	ldr	r3, [r7, #20]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	200003ac 	.word	0x200003ac
 8004644:	20000388 	.word	0x20000388
 8004648:	2000033c 	.word	0x2000033c
 800464c:	20000340 	.word	0x20000340
 8004650:	2000039c 	.word	0x2000039c
 8004654:	200003a4 	.word	0x200003a4
 8004658:	2000038c 	.word	0x2000038c
 800465c:	20000288 	.word	0x20000288
 8004660:	20000284 	.word	0x20000284
 8004664:	20000394 	.word	0x20000394
 8004668:	20000398 	.word	0x20000398

0800466c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004672:	4b26      	ldr	r3, [pc, #152]	; (800470c <vTaskSwitchContext+0xa0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800467a:	4b25      	ldr	r3, [pc, #148]	; (8004710 <vTaskSwitchContext+0xa4>)
 800467c:	2201      	movs	r2, #1
 800467e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004680:	e03e      	b.n	8004700 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004682:	4b23      	ldr	r3, [pc, #140]	; (8004710 <vTaskSwitchContext+0xa4>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004688:	4b22      	ldr	r3, [pc, #136]	; (8004714 <vTaskSwitchContext+0xa8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	fab3 f383 	clz	r3, r3
 8004694:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004696:	7afb      	ldrb	r3, [r7, #11]
 8004698:	f1c3 031f 	rsb	r3, r3, #31
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	491e      	ldr	r1, [pc, #120]	; (8004718 <vTaskSwitchContext+0xac>)
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	607b      	str	r3, [r7, #4]
 80046c4:	e7fe      	b.n	80046c4 <vTaskSwitchContext+0x58>
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4a11      	ldr	r2, [pc, #68]	; (8004718 <vTaskSwitchContext+0xac>)
 80046d2:	4413      	add	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	3308      	adds	r3, #8
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d104      	bne.n	80046f6 <vTaskSwitchContext+0x8a>
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a07      	ldr	r2, [pc, #28]	; (800471c <vTaskSwitchContext+0xb0>)
 80046fe:	6013      	str	r3, [r2, #0]
}
 8004700:	bf00      	nop
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	200003ac 	.word	0x200003ac
 8004710:	20000398 	.word	0x20000398
 8004714:	2000038c 	.word	0x2000038c
 8004718:	20000288 	.word	0x20000288
 800471c:	20000284 	.word	0x20000284

08004720 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <vTaskPlaceOnEventList+0x24>
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	e7fe      	b.n	8004742 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004744:	4b07      	ldr	r3, [pc, #28]	; (8004764 <vTaskPlaceOnEventList+0x44>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3318      	adds	r3, #24
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7fe fe7f 	bl	8003450 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004752:	2101      	movs	r1, #1
 8004754:	6838      	ldr	r0, [r7, #0]
 8004756:	f000 fa63 	bl	8004c20 <prvAddCurrentTaskToDelayedList>
}
 800475a:	bf00      	nop
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20000284 	.word	0x20000284

08004768 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <xTaskRemoveFromEventList+0x2a>
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	e7fe      	b.n	8004790 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	3318      	adds	r3, #24
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe fe92 	bl	80034c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800479c:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <xTaskRemoveFromEventList+0xac>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d11c      	bne.n	80047de <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fe fe89 	bl	80034c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	2201      	movs	r2, #1
 80047b4:	409a      	lsls	r2, r3
 80047b6:	4b18      	ldr	r3, [pc, #96]	; (8004818 <xTaskRemoveFromEventList+0xb0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	4a16      	ldr	r2, [pc, #88]	; (8004818 <xTaskRemoveFromEventList+0xb0>)
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4a13      	ldr	r2, [pc, #76]	; (800481c <xTaskRemoveFromEventList+0xb4>)
 80047ce:	441a      	add	r2, r3
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4619      	mov	r1, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	f7fe fe17 	bl	800340a <vListInsertEnd>
 80047dc:	e005      	b.n	80047ea <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	3318      	adds	r3, #24
 80047e2:	4619      	mov	r1, r3
 80047e4:	480e      	ldr	r0, [pc, #56]	; (8004820 <xTaskRemoveFromEventList+0xb8>)
 80047e6:	f7fe fe10 	bl	800340a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ee:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <xTaskRemoveFromEventList+0xbc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d905      	bls.n	8004804 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047f8:	2301      	movs	r3, #1
 80047fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <xTaskRemoveFromEventList+0xc0>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e001      	b.n	8004808 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004808:	697b      	ldr	r3, [r7, #20]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	200003ac 	.word	0x200003ac
 8004818:	2000038c 	.word	0x2000038c
 800481c:	20000288 	.word	0x20000288
 8004820:	20000344 	.word	0x20000344
 8004824:	20000284 	.word	0x20000284
 8004828:	20000398 	.word	0x20000398

0800482c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <vTaskInternalSetTimeOutState+0x24>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800483c:	4b05      	ldr	r3, [pc, #20]	; (8004854 <vTaskInternalSetTimeOutState+0x28>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	605a      	str	r2, [r3, #4]
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	2000039c 	.word	0x2000039c
 8004854:	20000388 	.word	0x20000388

08004858 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <xTaskCheckForTimeOut+0x24>
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	e7fe      	b.n	800487a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <xTaskCheckForTimeOut+0x3e>
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e7fe      	b.n	8004894 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004896:	f000 fb17 	bl	8004ec8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800489a:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <xTaskCheckForTimeOut+0xb8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d102      	bne.n	80048ba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	e023      	b.n	8004902 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4b15      	ldr	r3, [pc, #84]	; (8004914 <xTaskCheckForTimeOut+0xbc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d007      	beq.n	80048d6 <xTaskCheckForTimeOut+0x7e>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d302      	bcc.n	80048d6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	e015      	b.n	8004902 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d20b      	bcs.n	80048f8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	1ad2      	subs	r2, r2, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff ff9d 	bl	800482c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	e004      	b.n	8004902 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048fe:	2301      	movs	r3, #1
 8004900:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004902:	f000 fb0f 	bl	8004f24 <vPortExitCritical>

	return xReturn;
 8004906:	69fb      	ldr	r3, [r7, #28]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3720      	adds	r7, #32
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20000388 	.word	0x20000388
 8004914:	2000039c 	.word	0x2000039c

08004918 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800491c:	4b03      	ldr	r3, [pc, #12]	; (800492c <vTaskMissedYield+0x14>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]
}
 8004922:	bf00      	nop
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000398 	.word	0x20000398

08004930 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004938:	f000 f852 	bl	80049e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <prvIdleTask+0x28>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d9f9      	bls.n	8004938 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <prvIdleTask+0x2c>)
 8004946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004954:	e7f0      	b.n	8004938 <prvIdleTask+0x8>
 8004956:	bf00      	nop
 8004958:	20000288 	.word	0x20000288
 800495c:	e000ed04 	.word	0xe000ed04

08004960 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004966:	2300      	movs	r3, #0
 8004968:	607b      	str	r3, [r7, #4]
 800496a:	e00c      	b.n	8004986 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4a12      	ldr	r2, [pc, #72]	; (80049c0 <prvInitialiseTaskLists+0x60>)
 8004978:	4413      	add	r3, r2
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fd1a 	bl	80033b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3301      	adds	r3, #1
 8004984:	607b      	str	r3, [r7, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b06      	cmp	r3, #6
 800498a:	d9ef      	bls.n	800496c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800498c:	480d      	ldr	r0, [pc, #52]	; (80049c4 <prvInitialiseTaskLists+0x64>)
 800498e:	f7fe fd11 	bl	80033b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004992:	480d      	ldr	r0, [pc, #52]	; (80049c8 <prvInitialiseTaskLists+0x68>)
 8004994:	f7fe fd0e 	bl	80033b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004998:	480c      	ldr	r0, [pc, #48]	; (80049cc <prvInitialiseTaskLists+0x6c>)
 800499a:	f7fe fd0b 	bl	80033b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800499e:	480c      	ldr	r0, [pc, #48]	; (80049d0 <prvInitialiseTaskLists+0x70>)
 80049a0:	f7fe fd08 	bl	80033b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049a4:	480b      	ldr	r0, [pc, #44]	; (80049d4 <prvInitialiseTaskLists+0x74>)
 80049a6:	f7fe fd05 	bl	80033b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <prvInitialiseTaskLists+0x78>)
 80049ac:	4a05      	ldr	r2, [pc, #20]	; (80049c4 <prvInitialiseTaskLists+0x64>)
 80049ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <prvInitialiseTaskLists+0x7c>)
 80049b2:	4a05      	ldr	r2, [pc, #20]	; (80049c8 <prvInitialiseTaskLists+0x68>)
 80049b4:	601a      	str	r2, [r3, #0]
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000288 	.word	0x20000288
 80049c4:	20000314 	.word	0x20000314
 80049c8:	20000328 	.word	0x20000328
 80049cc:	20000344 	.word	0x20000344
 80049d0:	20000358 	.word	0x20000358
 80049d4:	20000370 	.word	0x20000370
 80049d8:	2000033c 	.word	0x2000033c
 80049dc:	20000340 	.word	0x20000340

080049e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049e6:	e019      	b.n	8004a1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049e8:	f000 fa6e 	bl	8004ec8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80049ec:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <prvCheckTasksWaitingTermination+0x4c>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe fd61 	bl	80034c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <prvCheckTasksWaitingTermination+0x50>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <prvCheckTasksWaitingTermination+0x50>)
 8004a06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a08:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <prvCheckTasksWaitingTermination+0x54>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	4a09      	ldr	r2, [pc, #36]	; (8004a34 <prvCheckTasksWaitingTermination+0x54>)
 8004a10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a12:	f000 fa87 	bl	8004f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f80e 	bl	8004a38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <prvCheckTasksWaitingTermination+0x54>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e1      	bne.n	80049e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000358 	.word	0x20000358
 8004a30:	20000384 	.word	0x20000384
 8004a34:	2000036c 	.word	0x2000036c

08004a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d108      	bne.n	8004a5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fbf2 	bl	8005238 <vPortFree>
				vPortFree( pxTCB );
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fbef 	bl	8005238 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a5a:	e017      	b.n	8004a8c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d103      	bne.n	8004a6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fbe6 	bl	8005238 <vPortFree>
	}
 8004a6c:	e00e      	b.n	8004a8c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d009      	beq.n	8004a8c <prvDeleteTCB+0x54>
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	e7fe      	b.n	8004a8a <prvDeleteTCB+0x52>
	}
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <prvResetNextTaskUnblockTime+0x40>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <prvResetNextTaskUnblockTime+0x14>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <prvResetNextTaskUnblockTime+0x16>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d004      	beq.n	8004ab8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004aae:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <prvResetNextTaskUnblockTime+0x44>)
 8004ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ab6:	e008      	b.n	8004aca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <prvResetNextTaskUnblockTime+0x40>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	4a04      	ldr	r2, [pc, #16]	; (8004ad8 <prvResetNextTaskUnblockTime+0x44>)
 8004ac8:	6013      	str	r3, [r2, #0]
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr
 8004ad4:	2000033c 	.word	0x2000033c
 8004ad8:	200003a4 	.word	0x200003a4

08004adc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <xTaskGetSchedulerState+0x34>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004aea:	2301      	movs	r3, #1
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	e008      	b.n	8004b02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <xTaskGetSchedulerState+0x38>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004af8:	2302      	movs	r3, #2
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	e001      	b.n	8004b02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004afe:	2300      	movs	r3, #0
 8004b00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b02:	687b      	ldr	r3, [r7, #4]
	}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000390 	.word	0x20000390
 8004b14:	200003ac 	.word	0x200003ac

08004b18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d06c      	beq.n	8004c08 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b2e:	4b39      	ldr	r3, [pc, #228]	; (8004c14 <xTaskPriorityDisinherit+0xfc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d009      	beq.n	8004b4c <xTaskPriorityDisinherit+0x34>
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	e7fe      	b.n	8004b4a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d109      	bne.n	8004b68 <xTaskPriorityDisinherit+0x50>
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	e7fe      	b.n	8004b66 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6c:	1e5a      	subs	r2, r3, #1
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d044      	beq.n	8004c08 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d140      	bne.n	8004c08 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe fc98 	bl	80034c0 <uxListRemove>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d115      	bne.n	8004bc2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9a:	491f      	ldr	r1, [pc, #124]	; (8004c18 <xTaskPriorityDisinherit+0x100>)
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xTaskPriorityDisinherit+0xaa>
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43da      	mvns	r2, r3
 8004bb8:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <xTaskPriorityDisinherit+0x104>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <xTaskPriorityDisinherit+0x104>)
 8004bc0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	f1c3 0207 	rsb	r2, r3, #7
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	2201      	movs	r2, #1
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <xTaskPriorityDisinherit+0x104>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	4a0d      	ldr	r2, [pc, #52]	; (8004c1c <xTaskPriorityDisinherit+0x104>)
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4a08      	ldr	r2, [pc, #32]	; (8004c18 <xTaskPriorityDisinherit+0x100>)
 8004bf6:	441a      	add	r2, r3
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f7fe fc03 	bl	800340a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c04:	2301      	movs	r3, #1
 8004c06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c08:	697b      	ldr	r3, [r7, #20]
	}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000284 	.word	0x20000284
 8004c18:	20000288 	.word	0x20000288
 8004c1c:	2000038c 	.word	0x2000038c

08004c20 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c2a:	4b29      	ldr	r3, [pc, #164]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c30:	4b28      	ldr	r3, [pc, #160]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe fc42 	bl	80034c0 <uxListRemove>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10b      	bne.n	8004c5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004c42:	4b24      	ldr	r3, [pc, #144]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	2201      	movs	r2, #1
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	4b21      	ldr	r3, [pc, #132]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4013      	ands	r3, r2
 8004c56:	4a20      	ldr	r2, [pc, #128]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d10a      	bne.n	8004c78 <prvAddCurrentTaskToDelayedList+0x58>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c68:	4b1a      	ldr	r3, [pc, #104]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4619      	mov	r1, r3
 8004c70:	481a      	ldr	r0, [pc, #104]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c72:	f7fe fbca 	bl	800340a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c76:	e026      	b.n	8004cc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c80:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d209      	bcs.n	8004ca4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c90:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	f7fe fbd7 	bl	8003450 <vListInsert>
}
 8004ca2:	e010      	b.n	8004cc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3304      	adds	r3, #4
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f7fe fbcd 	bl	8003450 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d202      	bcs.n	8004cc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004cc0:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6013      	str	r3, [r2, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000388 	.word	0x20000388
 8004cd4:	20000284 	.word	0x20000284
 8004cd8:	2000038c 	.word	0x2000038c
 8004cdc:	20000370 	.word	0x20000370
 8004ce0:	20000340 	.word	0x20000340
 8004ce4:	2000033c 	.word	0x2000033c
 8004ce8:	200003a4 	.word	0x200003a4

08004cec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3b04      	subs	r3, #4
 8004cfc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3b04      	subs	r3, #4
 8004d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f023 0201 	bic.w	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3b04      	subs	r3, #4
 8004d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d1c:	4a08      	ldr	r2, [pc, #32]	; (8004d40 <pxPortInitialiseStack+0x54>)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3b14      	subs	r3, #20
 8004d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3b20      	subs	r3, #32
 8004d32:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d34:	68fb      	ldr	r3, [r7, #12]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr
 8004d40:	08004d45 	.word	0x08004d45

08004d44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d4e:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <prvTaskExitError+0x4c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d56:	d009      	beq.n	8004d6c <prvTaskExitError+0x28>
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	e7fe      	b.n	8004d6a <prvTaskExitError+0x26>
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d7e:	bf00      	nop
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0fc      	beq.n	8004d80 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d86:	bf00      	nop
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr
 8004d90:	2000000c 	.word	0x2000000c
	...

08004da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004da0:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <pxCurrentTCBConst2>)
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	6808      	ldr	r0, [r1, #0]
 8004da6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004daa:	f380 8809 	msr	PSP, r0
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f04f 0000 	mov.w	r0, #0
 8004db6:	f380 8811 	msr	BASEPRI, r0
 8004dba:	f04e 0e0d 	orr.w	lr, lr, #13
 8004dbe:	4770      	bx	lr

08004dc0 <pxCurrentTCBConst2>:
 8004dc0:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop

08004dc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004dc8:	4806      	ldr	r0, [pc, #24]	; (8004de4 <prvPortStartFirstTask+0x1c>)
 8004dca:	6800      	ldr	r0, [r0, #0]
 8004dcc:	6800      	ldr	r0, [r0, #0]
 8004dce:	f380 8808 	msr	MSP, r0
 8004dd2:	b662      	cpsie	i
 8004dd4:	b661      	cpsie	f
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	df00      	svc	0
 8004de0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004de2:	bf00      	nop
 8004de4:	e000ed08 	.word	0xe000ed08

08004de8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dee:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <xPortStartScheduler+0xcc>)
 8004df0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	22ff      	movs	r2, #255	; 0xff
 8004dfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	4b29      	ldr	r3, [pc, #164]	; (8004eb8 <xPortStartScheduler+0xd0>)
 8004e14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e16:	4b29      	ldr	r3, [pc, #164]	; (8004ebc <xPortStartScheduler+0xd4>)
 8004e18:	2207      	movs	r2, #7
 8004e1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e1c:	e009      	b.n	8004e32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004e1e:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <xPortStartScheduler+0xd4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	4a25      	ldr	r2, [pc, #148]	; (8004ebc <xPortStartScheduler+0xd4>)
 8004e26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3a:	2b80      	cmp	r3, #128	; 0x80
 8004e3c:	d0ef      	beq.n	8004e1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e3e:	4b1f      	ldr	r3, [pc, #124]	; (8004ebc <xPortStartScheduler+0xd4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f1c3 0307 	rsb	r3, r3, #7
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d009      	beq.n	8004e5e <xPortStartScheduler+0x76>
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	e7fe      	b.n	8004e5c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e5e:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <xPortStartScheduler+0xd4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <xPortStartScheduler+0xd4>)
 8004e66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e68:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <xPortStartScheduler+0xd4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e70:	4a12      	ldr	r2, [pc, #72]	; (8004ebc <xPortStartScheduler+0xd4>)
 8004e72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e7c:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <xPortStartScheduler+0xd8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a0f      	ldr	r2, [pc, #60]	; (8004ec0 <xPortStartScheduler+0xd8>)
 8004e82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e88:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <xPortStartScheduler+0xd8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a0c      	ldr	r2, [pc, #48]	; (8004ec0 <xPortStartScheduler+0xd8>)
 8004e8e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e94:	f000 f8b0 	bl	8004ff8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <xPortStartScheduler+0xdc>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e9e:	f7ff ff93 	bl	8004dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ea2:	f7ff fbe3 	bl	800466c <vTaskSwitchContext>
	prvTaskExitError();
 8004ea6:	f7ff ff4d 	bl	8004d44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	e000e400 	.word	0xe000e400
 8004eb8:	200003b0 	.word	0x200003b0
 8004ebc:	200003b4 	.word	0x200003b4
 8004ec0:	e000ed20 	.word	0xe000ed20
 8004ec4:	2000000c 	.word	0x2000000c

08004ec8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ee0:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <vPortEnterCritical+0x54>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <vPortEnterCritical+0x54>)
 8004ee8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <vPortEnterCritical+0x54>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d10e      	bne.n	8004f10 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <vPortEnterCritical+0x58>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <vPortEnterCritical+0x48>
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	e7fe      	b.n	8004f0e <vPortEnterCritical+0x46>
	}
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	2000000c 	.word	0x2000000c
 8004f20:	e000ed04 	.word	0xe000ed04

08004f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f2a:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <vPortExitCritical+0x48>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <vPortExitCritical+0x22>
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	e7fe      	b.n	8004f44 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004f46:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <vPortExitCritical+0x48>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	4a07      	ldr	r2, [pc, #28]	; (8004f6c <vPortExitCritical+0x48>)
 8004f4e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f50:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <vPortExitCritical+0x48>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d104      	bne.n	8004f62 <vPortExitCritical+0x3e>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr
 8004f6c:	2000000c 	.word	0x2000000c

08004f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f70:	f3ef 8009 	mrs	r0, PSP
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <pxCurrentTCBConst>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f80:	6010      	str	r0, [r2, #0]
 8004f82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004f86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f8a:	f380 8811 	msr	BASEPRI, r0
 8004f8e:	f7ff fb6d 	bl	800466c <vTaskSwitchContext>
 8004f92:	f04f 0000 	mov.w	r0, #0
 8004f96:	f380 8811 	msr	BASEPRI, r0
 8004f9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004f9e:	6819      	ldr	r1, [r3, #0]
 8004fa0:	6808      	ldr	r0, [r1, #0]
 8004fa2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fa6:	f380 8809 	msr	PSP, r0
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	4770      	bx	lr

08004fb0 <pxCurrentTCBConst>:
 8004fb0:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop

08004fb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fd0:	f7ff fa90 	bl	80044f4 <xTaskIncrementTick>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <xPortSysTickHandler+0x3c>)
 8004fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	e000ed04 	.word	0xe000ed04

08004ff8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <vPortSetupTimerInterrupt+0x30>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <vPortSetupTimerInterrupt+0x34>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005008:	4b09      	ldr	r3, [pc, #36]	; (8005030 <vPortSetupTimerInterrupt+0x38>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a09      	ldr	r2, [pc, #36]	; (8005034 <vPortSetupTimerInterrupt+0x3c>)
 800500e:	fba2 2303 	umull	r2, r3, r2, r3
 8005012:	099b      	lsrs	r3, r3, #6
 8005014:	4a08      	ldr	r2, [pc, #32]	; (8005038 <vPortSetupTimerInterrupt+0x40>)
 8005016:	3b01      	subs	r3, #1
 8005018:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800501a:	4b03      	ldr	r3, [pc, #12]	; (8005028 <vPortSetupTimerInterrupt+0x30>)
 800501c:	2207      	movs	r2, #7
 800501e:	601a      	str	r2, [r3, #0]
}
 8005020:	bf00      	nop
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr
 8005028:	e000e010 	.word	0xe000e010
 800502c:	e000e018 	.word	0xe000e018
 8005030:	20000000 	.word	0x20000000
 8005034:	10624dd3 	.word	0x10624dd3
 8005038:	e000e014 	.word	0xe000e014

0800503c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005042:	f3ef 8305 	mrs	r3, IPSR
 8005046:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b0f      	cmp	r3, #15
 800504c:	d913      	bls.n	8005076 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800504e:	4a15      	ldr	r2, [pc, #84]	; (80050a4 <vPortValidateInterruptPriority+0x68>)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005058:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <vPortValidateInterruptPriority+0x6c>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	7afa      	ldrb	r2, [r7, #11]
 800505e:	429a      	cmp	r2, r3
 8005060:	d209      	bcs.n	8005076 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	607b      	str	r3, [r7, #4]
 8005074:	e7fe      	b.n	8005074 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005076:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <vPortValidateInterruptPriority+0x70>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800507e:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <vPortValidateInterruptPriority+0x74>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d909      	bls.n	800509a <vPortValidateInterruptPriority+0x5e>
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	e7fe      	b.n	8005098 <vPortValidateInterruptPriority+0x5c>
	}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr
 80050a4:	e000e3f0 	.word	0xe000e3f0
 80050a8:	200003b0 	.word	0x200003b0
 80050ac:	e000ed0c 	.word	0xe000ed0c
 80050b0:	200003b4 	.word	0x200003b4

080050b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	; 0x28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050c0:	f7ff f96e 	bl	80043a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050c4:	4b57      	ldr	r3, [pc, #348]	; (8005224 <pvPortMalloc+0x170>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050cc:	f000 f90c 	bl	80052e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050d0:	4b55      	ldr	r3, [pc, #340]	; (8005228 <pvPortMalloc+0x174>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f040 808c 	bne.w	80051f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01c      	beq.n	800511e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80050e4:	2208      	movs	r2, #8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4413      	add	r3, r2
 80050ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d013      	beq.n	800511e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f023 0307 	bic.w	r3, r3, #7
 80050fc:	3308      	adds	r3, #8
 80050fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d009      	beq.n	800511e <pvPortMalloc+0x6a>
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	e7fe      	b.n	800511c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d068      	beq.n	80051f6 <pvPortMalloc+0x142>
 8005124:	4b41      	ldr	r3, [pc, #260]	; (800522c <pvPortMalloc+0x178>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	429a      	cmp	r2, r3
 800512c:	d863      	bhi.n	80051f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800512e:	4b40      	ldr	r3, [pc, #256]	; (8005230 <pvPortMalloc+0x17c>)
 8005130:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005132:	4b3f      	ldr	r3, [pc, #252]	; (8005230 <pvPortMalloc+0x17c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005138:	e004      	b.n	8005144 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	429a      	cmp	r2, r3
 800514c:	d903      	bls.n	8005156 <pvPortMalloc+0xa2>
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f1      	bne.n	800513a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005156:	4b33      	ldr	r3, [pc, #204]	; (8005224 <pvPortMalloc+0x170>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800515c:	429a      	cmp	r2, r3
 800515e:	d04a      	beq.n	80051f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2208      	movs	r2, #8
 8005166:	4413      	add	r3, r2
 8005168:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	1ad2      	subs	r2, r2, r3
 800517a:	2308      	movs	r3, #8
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	429a      	cmp	r2, r3
 8005180:	d91e      	bls.n	80051c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4413      	add	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <pvPortMalloc+0xf4>
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	e7fe      	b.n	80051a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	1ad2      	subs	r2, r2, r3
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051ba:	69b8      	ldr	r0, [r7, #24]
 80051bc:	f000 f8f6 	bl	80053ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051c0:	4b1a      	ldr	r3, [pc, #104]	; (800522c <pvPortMalloc+0x178>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	4a18      	ldr	r2, [pc, #96]	; (800522c <pvPortMalloc+0x178>)
 80051cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051ce:	4b17      	ldr	r3, [pc, #92]	; (800522c <pvPortMalloc+0x178>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4b18      	ldr	r3, [pc, #96]	; (8005234 <pvPortMalloc+0x180>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d203      	bcs.n	80051e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051da:	4b14      	ldr	r3, [pc, #80]	; (800522c <pvPortMalloc+0x178>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a15      	ldr	r2, [pc, #84]	; (8005234 <pvPortMalloc+0x180>)
 80051e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	4b10      	ldr	r3, [pc, #64]	; (8005228 <pvPortMalloc+0x174>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051f6:	f7ff f8e1 	bl	80043bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	2b00      	cmp	r3, #0
 8005202:	d009      	beq.n	8005218 <pvPortMalloc+0x164>
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	e7fe      	b.n	8005216 <pvPortMalloc+0x162>
	return pvReturn;
 8005218:	69fb      	ldr	r3, [r7, #28]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3728      	adds	r7, #40	; 0x28
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000fc0 	.word	0x20000fc0
 8005228:	20000fcc 	.word	0x20000fcc
 800522c:	20000fc4 	.word	0x20000fc4
 8005230:	20000fb8 	.word	0x20000fb8
 8005234:	20000fc8 	.word	0x20000fc8

08005238 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d046      	beq.n	80052d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800524a:	2308      	movs	r3, #8
 800524c:	425b      	negs	r3, r3
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4413      	add	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	4b20      	ldr	r3, [pc, #128]	; (80052e0 <vPortFree+0xa8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <vPortFree+0x42>
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	e7fe      	b.n	8005278 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d009      	beq.n	8005296 <vPortFree+0x5e>
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	60bb      	str	r3, [r7, #8]
 8005294:	e7fe      	b.n	8005294 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <vPortFree+0xa8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d019      	beq.n	80052d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d115      	bne.n	80052d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <vPortFree+0xa8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	43db      	mvns	r3, r3
 80052b6:	401a      	ands	r2, r3
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052bc:	f7ff f870 	bl	80043a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <vPortFree+0xac>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4413      	add	r3, r2
 80052ca:	4a06      	ldr	r2, [pc, #24]	; (80052e4 <vPortFree+0xac>)
 80052cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052ce:	6938      	ldr	r0, [r7, #16]
 80052d0:	f000 f86c 	bl	80053ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80052d4:	f7ff f872 	bl	80043bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052d8:	bf00      	nop
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20000fcc 	.word	0x20000fcc
 80052e4:	20000fc4 	.word	0x20000fc4

080052e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80052f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052f4:	4b27      	ldr	r3, [pc, #156]	; (8005394 <prvHeapInit+0xac>)
 80052f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3307      	adds	r3, #7
 8005306:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0307 	bic.w	r3, r3, #7
 800530e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <prvHeapInit+0xac>)
 8005318:	4413      	add	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005320:	4a1d      	ldr	r2, [pc, #116]	; (8005398 <prvHeapInit+0xb0>)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005326:	4b1c      	ldr	r3, [pc, #112]	; (8005398 <prvHeapInit+0xb0>)
 8005328:	2200      	movs	r2, #0
 800532a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	4413      	add	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005334:	2208      	movs	r2, #8
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0307 	bic.w	r3, r3, #7
 8005342:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4a15      	ldr	r2, [pc, #84]	; (800539c <prvHeapInit+0xb4>)
 8005348:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800534a:	4b14      	ldr	r3, [pc, #80]	; (800539c <prvHeapInit+0xb4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2200      	movs	r2, #0
 8005350:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005352:	4b12      	ldr	r3, [pc, #72]	; (800539c <prvHeapInit+0xb4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	1ad2      	subs	r2, r2, r3
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005368:	4b0c      	ldr	r3, [pc, #48]	; (800539c <prvHeapInit+0xb4>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <prvHeapInit+0xb8>)
 8005376:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4a09      	ldr	r2, [pc, #36]	; (80053a4 <prvHeapInit+0xbc>)
 800537e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005380:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <prvHeapInit+0xc0>)
 8005382:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005386:	601a      	str	r2, [r3, #0]
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	bc80      	pop	{r7}
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	200003b8 	.word	0x200003b8
 8005398:	20000fb8 	.word	0x20000fb8
 800539c:	20000fc0 	.word	0x20000fc0
 80053a0:	20000fc8 	.word	0x20000fc8
 80053a4:	20000fc4 	.word	0x20000fc4
 80053a8:	20000fcc 	.word	0x20000fcc

080053ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053b4:	4b27      	ldr	r3, [pc, #156]	; (8005454 <prvInsertBlockIntoFreeList+0xa8>)
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	e002      	b.n	80053c0 <prvInsertBlockIntoFreeList+0x14>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d8f7      	bhi.n	80053ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	4413      	add	r3, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d108      	bne.n	80053ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	441a      	add	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	441a      	add	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d118      	bne.n	8005434 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <prvInsertBlockIntoFreeList+0xac>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d00d      	beq.n	800542a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	441a      	add	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	e008      	b.n	800543c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800542a:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <prvInsertBlockIntoFreeList+0xac>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e003      	b.n	800543c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	429a      	cmp	r2, r3
 8005442:	d002      	beq.n	800544a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800544a:	bf00      	nop
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr
 8005454:	20000fb8 	.word	0x20000fb8
 8005458:	20000fc0 	.word	0x20000fc0

0800545c <__libc_init_array>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	2500      	movs	r5, #0
 8005460:	4e0c      	ldr	r6, [pc, #48]	; (8005494 <__libc_init_array+0x38>)
 8005462:	4c0d      	ldr	r4, [pc, #52]	; (8005498 <__libc_init_array+0x3c>)
 8005464:	1ba4      	subs	r4, r4, r6
 8005466:	10a4      	asrs	r4, r4, #2
 8005468:	42a5      	cmp	r5, r4
 800546a:	d109      	bne.n	8005480 <__libc_init_array+0x24>
 800546c:	f000 f82e 	bl	80054cc <_init>
 8005470:	2500      	movs	r5, #0
 8005472:	4e0a      	ldr	r6, [pc, #40]	; (800549c <__libc_init_array+0x40>)
 8005474:	4c0a      	ldr	r4, [pc, #40]	; (80054a0 <__libc_init_array+0x44>)
 8005476:	1ba4      	subs	r4, r4, r6
 8005478:	10a4      	asrs	r4, r4, #2
 800547a:	42a5      	cmp	r5, r4
 800547c:	d105      	bne.n	800548a <__libc_init_array+0x2e>
 800547e:	bd70      	pop	{r4, r5, r6, pc}
 8005480:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005484:	4798      	blx	r3
 8005486:	3501      	adds	r5, #1
 8005488:	e7ee      	b.n	8005468 <__libc_init_array+0xc>
 800548a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800548e:	4798      	blx	r3
 8005490:	3501      	adds	r5, #1
 8005492:	e7f2      	b.n	800547a <__libc_init_array+0x1e>
 8005494:	08005574 	.word	0x08005574
 8005498:	08005574 	.word	0x08005574
 800549c:	08005574 	.word	0x08005574
 80054a0:	08005578 	.word	0x08005578

080054a4 <memcpy>:
 80054a4:	b510      	push	{r4, lr}
 80054a6:	1e43      	subs	r3, r0, #1
 80054a8:	440a      	add	r2, r1
 80054aa:	4291      	cmp	r1, r2
 80054ac:	d100      	bne.n	80054b0 <memcpy+0xc>
 80054ae:	bd10      	pop	{r4, pc}
 80054b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054b8:	e7f7      	b.n	80054aa <memcpy+0x6>

080054ba <memset>:
 80054ba:	4603      	mov	r3, r0
 80054bc:	4402      	add	r2, r0
 80054be:	4293      	cmp	r3, r2
 80054c0:	d100      	bne.n	80054c4 <memset+0xa>
 80054c2:	4770      	bx	lr
 80054c4:	f803 1b01 	strb.w	r1, [r3], #1
 80054c8:	e7f9      	b.n	80054be <memset+0x4>
	...

080054cc <_init>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	bf00      	nop
 80054d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d2:	bc08      	pop	{r3}
 80054d4:	469e      	mov	lr, r3
 80054d6:	4770      	bx	lr

080054d8 <_fini>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	bf00      	nop
 80054dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054de:	bc08      	pop	{r3}
 80054e0:	469e      	mov	lr, r3
 80054e2:	4770      	bx	lr
