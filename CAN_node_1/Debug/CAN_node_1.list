
CAN_node_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068e8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ab4  08006ab4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006ab4  08006ab4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ab4  08006ab4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ab4  08006ab4  00016ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ab8  08006ab8  00016ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001188  20000074  08006b30  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011fc  08006b30  000211fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018aab  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003532  00000000  00000000  00038b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015b8  00000000  00000000  0003c080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001448  00000000  00000000  0003d638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a5ad  00000000  00000000  0003ea80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001187d  00000000  00000000  0005902d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a34c  00000000  00000000  0006a8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00104bf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc0  00000000  00000000  00104c74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080069e0 	.word	0x080069e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080069e0 	.word	0x080069e0

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800020c:	f1a2 0201 	sub.w	r2, r2, #1
 8000210:	d1ed      	bne.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2uiz>:
 800060c:	0042      	lsls	r2, r0, #1
 800060e:	d20e      	bcs.n	800062e <__aeabi_f2uiz+0x22>
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30b      	bcc.n	800062e <__aeabi_f2uiz+0x22>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d409      	bmi.n	8000634 <__aeabi_f2uiz+0x28>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	4770      	bx	lr
 800062e:	f04f 0000 	mov.w	r0, #0
 8000632:	4770      	bx	lr
 8000634:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000638:	d101      	bne.n	800063e <__aeabi_f2uiz+0x32>
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	d102      	bne.n	8000644 <__aeabi_f2uiz+0x38>
 800063e:	f04f 30ff 	mov.w	r0, #4294967295
 8000642:	4770      	bx	lr
 8000644:	f04f 0000 	mov.w	r0, #0
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4a06      	ldr	r2, [pc, #24]	; (8000674 <vApplicationGetIdleTaskMemory+0x28>)
 800065c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	4a05      	ldr	r2, [pc, #20]	; (8000678 <vApplicationGetIdleTaskMemory+0x2c>)
 8000662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	20000090 	.word	0x20000090
 8000678:	200000e4 	.word	0x200000e4

0800067c <create_kalman>:
 *      Author: tantr
 */
#include "kalman_filter.h"

kalman_t * create_kalman (float mea_e, float est_e, float q)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
    kalman_t * kalman_instance = (kalman_t *)malloc(sizeof(kalman_t));
 8000688:	2018      	movs	r0, #24
 800068a:	f006 f921 	bl	80068d0 <malloc>
 800068e:	4603      	mov	r3, r0
 8000690:	617b      	str	r3, [r7, #20]
    kalman_instance->_current_estimate = 0;
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
    kalman_instance->_last_estimate = 0;
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	f04f 0200 	mov.w	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
    kalman_instance->_kalman_gain = 0;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	f04f 0200 	mov.w	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
    kalman_instance->_err_measure = mea_e;
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	601a      	str	r2, [r3, #0]
    kalman_instance->_err_estimate = est_e;
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	605a      	str	r2, [r3, #4]
    kalman_instance->_q = q;
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	609a      	str	r2, [r3, #8]
    return kalman_instance;
 80006bc:	697b      	ldr	r3, [r7, #20]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <update_kalman>:

float update_kalman (kalman_t * kalman, float value)
{
 80006c6:	b5b0      	push	{r4, r5, r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
    kalman->_kalman_gain = kalman->_err_estimate / (kalman->_err_estimate + kalman->_err_measure);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	685c      	ldr	r4, [r3, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	685a      	ldr	r2, [r3, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	4610      	mov	r0, r2
 80006e0:	f7ff fd3c 	bl	800015c <__addsf3>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4619      	mov	r1, r3
 80006e8:	4620      	mov	r0, r4
 80006ea:	f7ff fef3 	bl	80004d4 <__aeabi_fdiv>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	615a      	str	r2, [r3, #20]
    kalman->_current_estimate = kalman->_last_estimate + kalman->_kalman_gain * (value - kalman->_last_estimate);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	691c      	ldr	r4, [r3, #16]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	695d      	ldr	r5, [r3, #20]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	4619      	mov	r1, r3
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	f7ff fd27 	bl	8000158 <__aeabi_fsub>
 800070a:	4603      	mov	r3, r0
 800070c:	4619      	mov	r1, r3
 800070e:	4628      	mov	r0, r5
 8000710:	f7ff fe2c 	bl	800036c <__aeabi_fmul>
 8000714:	4603      	mov	r3, r0
 8000716:	4619      	mov	r1, r3
 8000718:	4620      	mov	r0, r4
 800071a:	f7ff fd1f 	bl	800015c <__addsf3>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	60da      	str	r2, [r3, #12]
    kalman->_err_estimate = (1.0f - kalman->_kalman_gain) * kalman->_err_estimate + fabsf(kalman->_last_estimate - kalman->_current_estimate) * kalman->_q;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4619      	mov	r1, r3
 800072c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000730:	f7ff fd12 	bl	8000158 <__aeabi_fsub>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	4619      	mov	r1, r3
 800073e:	4610      	mov	r0, r2
 8000740:	f7ff fe14 	bl	800036c <__aeabi_fmul>
 8000744:	4603      	mov	r3, r0
 8000746:	461c      	mov	r4, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	691a      	ldr	r2, [r3, #16]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	4619      	mov	r1, r3
 8000752:	4610      	mov	r0, r2
 8000754:	f7ff fd00 	bl	8000158 <__aeabi_fsub>
 8000758:	4603      	mov	r3, r0
 800075a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	4619      	mov	r1, r3
 8000764:	4610      	mov	r0, r2
 8000766:	f7ff fe01 	bl	800036c <__aeabi_fmul>
 800076a:	4603      	mov	r3, r0
 800076c:	4619      	mov	r1, r3
 800076e:	4620      	mov	r0, r4
 8000770:	f7ff fcf4 	bl	800015c <__addsf3>
 8000774:	4603      	mov	r3, r0
 8000776:	461a      	mov	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	605a      	str	r2, [r3, #4]
    kalman->_last_estimate = kalman->_current_estimate;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	68da      	ldr	r2, [r3, #12]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	611a      	str	r2, [r3, #16]

    return kalman->_current_estimate;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	68db      	ldr	r3, [r3, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bdb0      	pop	{r4, r5, r7, pc}

08000790 <clear_buff>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clear_buff (uint8_t * buff_clear, size_t num)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
	if (buff_clear == NULL) return;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d005      	beq.n	80007ac <clear_buff+0x1c>

	memset(buff_clear, 0, num);
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	2100      	movs	r1, #0
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f006 f8a6 	bl	80068f6 <memset>
 80007aa:	e000      	b.n	80007ae <clear_buff+0x1e>
	if (buff_clear == NULL) return;
 80007ac:	bf00      	nop
}
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <prepare_buff_send>:

void prepare_buff_send ()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
	static uint16_t pre_steering = 0;
	static uint16_t pre_light = 0;

	uint16_t current_value;
	osEvent q_message;
	uint8_t * p_buff_ptr = (uint8_t *)&current_value;
 80007ba:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80007be:	627b      	str	r3, [r7, #36]	; 0x24

	tx_header.IDE = CAN_ID_STD;
 80007c0:	4b65      	ldr	r3, [pc, #404]	; (8000958 <prepare_buff_send+0x1a4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]

	/* get element from throttle queue to send motor node control speed motor */
	q_message = osMessageGet(q_throttle_controlHandle, 0);
 80007c6:	4b65      	ldr	r3, [pc, #404]	; (800095c <prepare_buff_send+0x1a8>)
 80007c8:	6819      	ldr	r1, [r3, #0]
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 ff8d 	bl	80046f0 <osMessageGet>

	/* get a message in q_throttle_control if it is not empty */
	if (q_message.status == osEventMessage)
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	2b10      	cmp	r3, #16
 80007da:	d136      	bne.n	800084a <prepare_buff_send+0x96>
	{
		/* check if the value has changed, then send a message */
		current_value = (uint16_t)q_message.value.v;
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	847b      	strh	r3, [r7, #34]	; 0x22
		if (abs(current_value - pre_throttle) > 10)
 80007e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b5e      	ldr	r3, [pc, #376]	; (8000960 <prepare_buff_send+0x1ac>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bfb8      	it	lt
 80007f0:	425b      	neglt	r3, r3
 80007f2:	2b0a      	cmp	r3, #10
 80007f4:	dd29      	ble.n	800084a <prepare_buff_send+0x96>
		{
			pre_throttle = current_value;
 80007f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80007f8:	4b59      	ldr	r3, [pc, #356]	; (8000960 <prepare_buff_send+0x1ac>)
 80007fa:	801a      	strh	r2, [r3, #0]
			tx_header.StdId = 0x100;
 80007fc:	4b56      	ldr	r3, [pc, #344]	; (8000958 <prepare_buff_send+0x1a4>)
 80007fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000802:	601a      	str	r2, [r3, #0]
			tx_header.RTR = CAN_RTR_DATA;
 8000804:	4b54      	ldr	r3, [pc, #336]	; (8000958 <prepare_buff_send+0x1a4>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
			tx_header.DLC = 2;
 800080a:	4b53      	ldr	r3, [pc, #332]	; (8000958 <prepare_buff_send+0x1a4>)
 800080c:	2202      	movs	r2, #2
 800080e:	611a      	str	r2, [r3, #16]

			tx_data[0] = *p_buff_ptr;
 8000810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000812:	781a      	ldrb	r2, [r3, #0]
 8000814:	4b53      	ldr	r3, [pc, #332]	; (8000964 <prepare_buff_send+0x1b0>)
 8000816:	701a      	strb	r2, [r3, #0]
			p_buff_ptr++;
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081a:	3301      	adds	r3, #1
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
			tx_data[1] = *p_buff_ptr;
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	4b50      	ldr	r3, [pc, #320]	; (8000964 <prepare_buff_send+0x1b0>)
 8000824:	705a      	strb	r2, [r3, #1]
			if (HAL_CAN_AddTxMessage(&hcan, &tx_header, tx_data, &tx_mailbox) != HAL_OK)
 8000826:	4b50      	ldr	r3, [pc, #320]	; (8000968 <prepare_buff_send+0x1b4>)
 8000828:	4a4e      	ldr	r2, [pc, #312]	; (8000964 <prepare_buff_send+0x1b0>)
 800082a:	494b      	ldr	r1, [pc, #300]	; (8000958 <prepare_buff_send+0x1a4>)
 800082c:	484f      	ldr	r0, [pc, #316]	; (800096c <prepare_buff_send+0x1b8>)
 800082e:	f001 fd0a 	bl	8002246 <HAL_CAN_AddTxMessage>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <prepare_buff_send+0x88>
			{
			   Error_Handler ();
 8000838:	f000 fcc0 	bl	80011bc <Error_Handler>
			}
			clear_buff(&tx_data, sizeof(uint8_t)*8);
 800083c:	2108      	movs	r1, #8
 800083e:	4849      	ldr	r0, [pc, #292]	; (8000964 <prepare_buff_send+0x1b0>)
 8000840:	f7ff ffa6 	bl	8000790 <clear_buff>
			p_buff_ptr = &current_value;
 8000844:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	/* get element from steering queue to send motor node control angle servo */
	q_message = osMessageGet(q_steering_controlHandle, 0);
 800084a:	4b49      	ldr	r3, [pc, #292]	; (8000970 <prepare_buff_send+0x1bc>)
 800084c:	6819      	ldr	r1, [r3, #0]
 800084e:	463b      	mov	r3, r7
 8000850:	2200      	movs	r2, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f003 ff4c 	bl	80046f0 <osMessageGet>
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	463a      	mov	r2, r7
 800085e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000860:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* get a message in q_steering_control if it is not empty */
	if (q_message.status == osEventMessage)
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	2b10      	cmp	r3, #16
 8000868:	d136      	bne.n	80008d8 <prepare_buff_send+0x124>
	{
		/* check if the value has changed, then send a message */
		current_value = (uint16_t)q_message.value.v;
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	b29b      	uxth	r3, r3
 800086e:	847b      	strh	r3, [r7, #34]	; 0x22
		if (abs(current_value - pre_steering) > 10)
 8000870:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000872:	461a      	mov	r2, r3
 8000874:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <prepare_buff_send+0x1c0>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	bfb8      	it	lt
 800087e:	425b      	neglt	r3, r3
 8000880:	2b0a      	cmp	r3, #10
 8000882:	dd29      	ble.n	80008d8 <prepare_buff_send+0x124>
		{
			pre_steering = current_value;
 8000884:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000886:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <prepare_buff_send+0x1c0>)
 8000888:	801a      	strh	r2, [r3, #0]
			tx_header.StdId = 0x110;
 800088a:	4b33      	ldr	r3, [pc, #204]	; (8000958 <prepare_buff_send+0x1a4>)
 800088c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000890:	601a      	str	r2, [r3, #0]
			tx_header.RTR = CAN_RTR_DATA;
 8000892:	4b31      	ldr	r3, [pc, #196]	; (8000958 <prepare_buff_send+0x1a4>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
			tx_header.DLC = 2;
 8000898:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <prepare_buff_send+0x1a4>)
 800089a:	2202      	movs	r2, #2
 800089c:	611a      	str	r2, [r3, #16]

			tx_data[0] = *p_buff_ptr;
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <prepare_buff_send+0x1b0>)
 80008a4:	701a      	strb	r2, [r3, #0]
			p_buff_ptr++;
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	3301      	adds	r3, #1
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
			tx_data[1] = *p_buff_ptr;
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <prepare_buff_send+0x1b0>)
 80008b2:	705a      	strb	r2, [r3, #1]
			if (HAL_CAN_AddTxMessage(&hcan, &tx_header, tx_data, &tx_mailbox) != HAL_OK)
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <prepare_buff_send+0x1b4>)
 80008b6:	4a2b      	ldr	r2, [pc, #172]	; (8000964 <prepare_buff_send+0x1b0>)
 80008b8:	4927      	ldr	r1, [pc, #156]	; (8000958 <prepare_buff_send+0x1a4>)
 80008ba:	482c      	ldr	r0, [pc, #176]	; (800096c <prepare_buff_send+0x1b8>)
 80008bc:	f001 fcc3 	bl	8002246 <HAL_CAN_AddTxMessage>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <prepare_buff_send+0x116>
			{
			   Error_Handler ();
 80008c6:	f000 fc79 	bl	80011bc <Error_Handler>
			}
			clear_buff(&tx_data, sizeof(uint8_t)*8);
 80008ca:	2108      	movs	r1, #8
 80008cc:	4825      	ldr	r0, [pc, #148]	; (8000964 <prepare_buff_send+0x1b0>)
 80008ce:	f7ff ff5f 	bl	8000790 <clear_buff>
			p_buff_ptr = &current_value;
 80008d2:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	/* get element from light queue to send light node control light */
	q_message = osMessageGet(q_light_controlHandle, 0);
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <prepare_buff_send+0x1c4>)
 80008da:	6819      	ldr	r1, [r3, #0]
 80008dc:	463b      	mov	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 ff05 	bl	80046f0 <osMessageGet>
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	463a      	mov	r2, r7
 80008ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80008ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* get a message in q_light_control if it is not empty */
	if (q_message.status == osEventMessage)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	2b10      	cmp	r3, #16
 80008f6:	d12b      	bne.n	8000950 <prepare_buff_send+0x19c>
	{
		current_value = (uint16_t)q_message.value.v;
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	847b      	strh	r3, [r7, #34]	; 0x22
		if (current_value != pre_light)
 80008fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <prepare_buff_send+0x1c8>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	429a      	cmp	r2, r3
 8000906:	d023      	beq.n	8000950 <prepare_buff_send+0x19c>
		{
			pre_light = current_value;
 8000908:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <prepare_buff_send+0x1c8>)
 800090c:	801a      	strh	r2, [r3, #0]
			tx_header.StdId = 0x210;
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <prepare_buff_send+0x1a4>)
 8000910:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000914:	601a      	str	r2, [r3, #0]
			tx_header.RTR = CAN_RTR_DATA;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <prepare_buff_send+0x1a4>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
			tx_header.DLC = 1;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <prepare_buff_send+0x1a4>)
 800091e:	2201      	movs	r2, #1
 8000920:	611a      	str	r2, [r3, #16]

			tx_data[0] = current_value;
 8000922:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <prepare_buff_send+0x1b0>)
 8000928:	701a      	strb	r2, [r3, #0]
			if (HAL_CAN_AddTxMessage(&hcan, &tx_header, tx_data, &tx_mailbox) != HAL_OK)
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <prepare_buff_send+0x1b4>)
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <prepare_buff_send+0x1b0>)
 800092e:	490a      	ldr	r1, [pc, #40]	; (8000958 <prepare_buff_send+0x1a4>)
 8000930:	480e      	ldr	r0, [pc, #56]	; (800096c <prepare_buff_send+0x1b8>)
 8000932:	f001 fc88 	bl	8002246 <HAL_CAN_AddTxMessage>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <prepare_buff_send+0x18c>
			{
			   Error_Handler ();
 800093c:	f000 fc3e 	bl	80011bc <Error_Handler>
			}
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000940:	2104      	movs	r1, #4
 8000942:	480f      	ldr	r0, [pc, #60]	; (8000980 <prepare_buff_send+0x1cc>)
 8000944:	f002 fc29 	bl	800319a <HAL_GPIO_TogglePin>
			clear_buff(&tx_data, sizeof(uint8_t)*8);
 8000948:	2108      	movs	r1, #8
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <prepare_buff_send+0x1b0>)
 800094c:	f7ff ff20 	bl	8000790 <clear_buff>

		}
	}
}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20001130 	.word	0x20001130
 800095c:	2000104c 	.word	0x2000104c
 8000960:	200002e6 	.word	0x200002e6
 8000964:	200011ec 	.word	0x200011ec
 8000968:	200010ec 	.word	0x200010ec
 800096c:	200010c0 	.word	0x200010c0
 8000970:	20001124 	.word	0x20001124
 8000974:	200002e8 	.word	0x200002e8
 8000978:	200010e8 	.word	0x200010e8
 800097c:	200002ea 	.word	0x200002ea
 8000980:	40010c00 	.word	0x40010c00

08000984 <emergency_buff_send>:

void emergency_buff_send ()
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	tx_header.IDE = CAN_ID_STD;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <emergency_buff_send+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]

	/* stop motor emergency */
	if (status_motor == 0)
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <emergency_buff_send+0x44>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d114      	bne.n	80009c0 <emergency_buff_send+0x3c>
	{
		tx_header.StdId = 0x102;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <emergency_buff_send+0x40>)
 8000998:	f44f 7281 	mov.w	r2, #258	; 0x102
 800099c:	601a      	str	r2, [r3, #0]
		tx_header.RTR = CAN_RTR_DATA;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <emergency_buff_send+0x40>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
		tx_header.DLC = 1;
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <emergency_buff_send+0x40>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	611a      	str	r2, [r3, #16]

		if (HAL_CAN_AddTxMessage(&hcan, &tx_header, 0, &tx_mailbox) != HAL_OK)
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <emergency_buff_send+0x48>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	4905      	ldr	r1, [pc, #20]	; (80009c4 <emergency_buff_send+0x40>)
 80009b0:	4807      	ldr	r0, [pc, #28]	; (80009d0 <emergency_buff_send+0x4c>)
 80009b2:	f001 fc48 	bl	8002246 <HAL_CAN_AddTxMessage>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <emergency_buff_send+0x3c>
		{
		   Error_Handler ();
 80009bc:	f000 fbfe 	bl	80011bc <Error_Handler>
		}
	}
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20001130 	.word	0x20001130
 80009c8:	200002e4 	.word	0x200002e4
 80009cc:	200010ec 	.word	0x200010ec
 80009d0:	200010c0 	.word	0x200010c0

080009d4 <dashboard>:

void dashboard ()
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	static uint8_t pre_sw_button = 0;
	tx_header.IDE = CAN_ID_STD;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <dashboard+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]

	/* check if the value has changed, then send a message */
	read_sw_button();
 80009de:	f000 f867 	bl	8000ab0 <read_sw_button>
	if (sw_button != pre_sw_button)
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <dashboard+0x5c>)
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <dashboard+0x60>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d01c      	beq.n	8000a28 <dashboard+0x54>
	{
		pre_sw_button = sw_button;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <dashboard+0x5c>)
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <dashboard+0x60>)
 80009f4:	701a      	strb	r2, [r3, #0]
		tx_header.StdId = 0x210;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <dashboard+0x58>)
 80009f8:	f44f 7204 	mov.w	r2, #528	; 0x210
 80009fc:	601a      	str	r2, [r3, #0]
		tx_header.RTR = CAN_RTR_DATA;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <dashboard+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
		tx_header.DLC = 1;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <dashboard+0x58>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	611a      	str	r2, [r3, #16]

		if (HAL_CAN_AddTxMessage(&hcan, &tx_header, &sw_button, &tx_mailbox) != HAL_OK)
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <dashboard+0x64>)
 8000a0c:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <dashboard+0x5c>)
 8000a0e:	4907      	ldr	r1, [pc, #28]	; (8000a2c <dashboard+0x58>)
 8000a10:	480a      	ldr	r0, [pc, #40]	; (8000a3c <dashboard+0x68>)
 8000a12:	f001 fc18 	bl	8002246 <HAL_CAN_AddTxMessage>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <dashboard+0x4c>
		{
		   Error_Handler ();
 8000a1c:	f000 fbce 	bl	80011bc <Error_Handler>
		}
		clear_buff(&tx_data, sizeof(uint8_t)*8);
 8000a20:	2108      	movs	r1, #8
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <dashboard+0x6c>)
 8000a24:	f7ff feb4 	bl	8000790 <clear_buff>
	}

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20001130 	.word	0x20001130
 8000a30:	200011e0 	.word	0x200011e0
 8000a34:	200002ec 	.word	0x200002ec
 8000a38:	200010ec 	.word	0x200010ec
 8000a3c:	200010c0 	.word	0x200010c0
 8000a40:	200011ec 	.word	0x200011ec

08000a44 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	  adc_value[0] = update_kalman(kalman_1, adc_value[0]);
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_ADC_ConvCpltCallback+0x60>)
 8000a4e:	681c      	ldr	r4, [r3, #0]
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_ADC_ConvCpltCallback+0x64>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fc31 	bl	80002bc <__aeabi_ui2f>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f7ff fe31 	bl	80006c6 <update_kalman>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fdd0 	bl	800060c <__aeabi_f2uiz>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_ADC_ConvCpltCallback+0x64>)
 8000a72:	801a      	strh	r2, [r3, #0]
	  adc_value[1] = update_kalman(kalman_2, adc_value[1]);
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_ADC_ConvCpltCallback+0x68>)
 8000a76:	681c      	ldr	r4, [r3, #0]
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_ADC_ConvCpltCallback+0x64>)
 8000a7a:	885b      	ldrh	r3, [r3, #2]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fc1d 	bl	80002bc <__aeabi_ui2f>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4619      	mov	r1, r3
 8000a86:	4620      	mov	r0, r4
 8000a88:	f7ff fe1d 	bl	80006c6 <update_kalman>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fdbc 	bl	800060c <__aeabi_f2uiz>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_ADC_ConvCpltCallback+0x64>)
 8000a9a:	805a      	strh	r2, [r3, #2]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd90      	pop	{r4, r7, pc}
 8000aa4:	2000112c 	.word	0x2000112c
 8000aa8:	200010f0 	.word	0x200010f0
 8000aac:	200011e4 	.word	0x200011e4

08000ab0 <read_sw_button>:

void read_sw_button ()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

	/* ON/OFF main light */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET)
 8000ab4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab8:	4844      	ldr	r0, [pc, #272]	; (8000bcc <read_sw_button+0x11c>)
 8000aba:	f002 fb3f 	bl	800313c <HAL_GPIO_ReadPin>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d107      	bne.n	8000ad4 <read_sw_button+0x24>
	{
		sw_button |= (1 << 0);
 8000ac4:	4b42      	ldr	r3, [pc, #264]	; (8000bd0 <read_sw_button+0x120>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b40      	ldr	r3, [pc, #256]	; (8000bd0 <read_sw_button+0x120>)
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	e006      	b.n	8000ae2 <read_sw_button+0x32>
	}
	else
	{
		sw_button &= ~(1 << 0);
 8000ad4:	4b3e      	ldr	r3, [pc, #248]	; (8000bd0 <read_sw_button+0x120>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	f023 0301 	bic.w	r3, r3, #1
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b3c      	ldr	r3, [pc, #240]	; (8000bd0 <read_sw_button+0x120>)
 8000ae0:	701a      	strb	r2, [r3, #0]
	}

	/* ON/OFF hazard mode */
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET)
 8000ae2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae6:	483b      	ldr	r0, [pc, #236]	; (8000bd4 <read_sw_button+0x124>)
 8000ae8:	f002 fb28 	bl	800313c <HAL_GPIO_ReadPin>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d107      	bne.n	8000b02 <read_sw_button+0x52>
	{
		sw_button |= (1 << 1);
 8000af2:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <read_sw_button+0x120>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <read_sw_button+0x120>)
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e006      	b.n	8000b10 <read_sw_button+0x60>
	}
	else
	{
		sw_button &= ~(1 << 1);
 8000b02:	4b33      	ldr	r3, [pc, #204]	; (8000bd0 <read_sw_button+0x120>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	f023 0302 	bic.w	r3, r3, #2
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b30      	ldr	r3, [pc, #192]	; (8000bd0 <read_sw_button+0x120>)
 8000b0e:	701a      	strb	r2, [r3, #0]
	}

	/* ON/OFF blinker left light */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000b10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b14:	482d      	ldr	r0, [pc, #180]	; (8000bcc <read_sw_button+0x11c>)
 8000b16:	f002 fb11 	bl	800313c <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d107      	bne.n	8000b30 <read_sw_button+0x80>
	{
		sw_button |= (1 << 2);
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <read_sw_button+0x120>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <read_sw_button+0x120>)
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	e006      	b.n	8000b3e <read_sw_button+0x8e>
	}
	else
	{
		sw_button &= ~(1 << 2);
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <read_sw_button+0x120>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f023 0304 	bic.w	r3, r3, #4
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <read_sw_button+0x120>)
 8000b3c:	701a      	strb	r2, [r3, #0]
	}

	/* ON/OFF blinker right light */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_RESET)
 8000b3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b42:	4822      	ldr	r0, [pc, #136]	; (8000bcc <read_sw_button+0x11c>)
 8000b44:	f002 fafa 	bl	800313c <HAL_GPIO_ReadPin>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d107      	bne.n	8000b5e <read_sw_button+0xae>
	{
		sw_button |= (1 << 3);
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <read_sw_button+0x120>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <read_sw_button+0x120>)
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e006      	b.n	8000b6c <read_sw_button+0xbc>
	}
	else
	{
		sw_button &= ~(1 << 3);
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <read_sw_button+0x120>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	f023 0308 	bic.w	r3, r3, #8
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <read_sw_button+0x120>)
 8000b6a:	701a      	strb	r2, [r3, #0]
	}

	/* trimming down steering */
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8000b6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b70:	4818      	ldr	r0, [pc, #96]	; (8000bd4 <read_sw_button+0x124>)
 8000b72:	f002 fae3 	bl	800313c <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d107      	bne.n	8000b8c <read_sw_button+0xdc>
	{
		sw_button |= (1 << 4);
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <read_sw_button+0x120>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <read_sw_button+0x120>)
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	e006      	b.n	8000b9a <read_sw_button+0xea>
	}
	else
	{
		sw_button &= ~(1 << 4);
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <read_sw_button+0x120>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	f023 0310 	bic.w	r3, r3, #16
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <read_sw_button+0x120>)
 8000b98:	701a      	strb	r2, [r3, #0]
	}

	/* trimming up steering */
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <read_sw_button+0x124>)
 8000ba0:	f002 facc 	bl	800313c <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d107      	bne.n	8000bba <read_sw_button+0x10a>
	{
		sw_button |= (1 << 5);
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <read_sw_button+0x120>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	f043 0320 	orr.w	r3, r3, #32
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <read_sw_button+0x120>)
 8000bb6:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		sw_button &= ~(1 << 5);
	}
}
 8000bb8:	e006      	b.n	8000bc8 <read_sw_button+0x118>
		sw_button &= ~(1 << 5);
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <read_sw_button+0x120>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f023 0320 	bic.w	r3, r3, #32
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <read_sw_button+0x120>)
 8000bc6:	701a      	strb	r2, [r3, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40011000 	.word	0x40011000
 8000bd0:	200011e0 	.word	0x200011e0
 8000bd4:	40010c00 	.word	0x40010c00

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b0a6      	sub	sp, #152	; 0x98
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bde:	f000 fcfb 	bl	80015d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f8b9 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 fa2f 	bl	8001048 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bea:	f000 fa0f 	bl	800100c <MX_DMA_Init>
  MX_CAN_Init();
 8000bee:	f000 f95d 	bl	8000eac <MX_CAN_Init>
  MX_I2C1_Init();
 8000bf2:	f000 f991 	bl	8000f18 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000bf6:	f000 f9bd 	bl	8000f74 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000bfa:	f000 f909 	bl	8000e10 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000bfe:	4846      	ldr	r0, [pc, #280]	; (8000d18 <main+0x140>)
 8000c00:	f001 fadd 	bl	80021be <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000c04:	2102      	movs	r1, #2
 8000c06:	4844      	ldr	r0, [pc, #272]	; (8000d18 <main+0x140>)
 8000c08:	f001 fbf7 	bl	80023fa <HAL_CAN_ActivateNotification>
  kalman_1 = create_kalman(50, 50, 0.01);
 8000c0c:	4a43      	ldr	r2, [pc, #268]	; (8000d1c <main+0x144>)
 8000c0e:	4944      	ldr	r1, [pc, #272]	; (8000d20 <main+0x148>)
 8000c10:	4843      	ldr	r0, [pc, #268]	; (8000d20 <main+0x148>)
 8000c12:	f7ff fd33 	bl	800067c <create_kalman>
 8000c16:	4602      	mov	r2, r0
 8000c18:	4b42      	ldr	r3, [pc, #264]	; (8000d24 <main+0x14c>)
 8000c1a:	601a      	str	r2, [r3, #0]
  kalman_2 = create_kalman(50, 50, 0.01);
 8000c1c:	4a3f      	ldr	r2, [pc, #252]	; (8000d1c <main+0x144>)
 8000c1e:	4940      	ldr	r1, [pc, #256]	; (8000d20 <main+0x148>)
 8000c20:	483f      	ldr	r0, [pc, #252]	; (8000d20 <main+0x148>)
 8000c22:	f7ff fd2b 	bl	800067c <create_kalman>
 8000c26:	4602      	mov	r2, r0
 8000c28:	4b3f      	ldr	r3, [pc, #252]	; (8000d28 <main+0x150>)
 8000c2a:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of q_display_info */
  osMessageQDef(q_display_info, 32, uint16_t);
 8000c2c:	4b3f      	ldr	r3, [pc, #252]	; (8000d2c <main+0x154>)
 8000c2e:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8000c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_display_infoHandle = osMessageCreate(osMessageQ(q_display_info), NULL);
 8000c38:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 fced 	bl	800461e <osMessageCreate>
 8000c44:	4602      	mov	r2, r0
 8000c46:	4b3a      	ldr	r3, [pc, #232]	; (8000d30 <main+0x158>)
 8000c48:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_steering_control */
  osMessageQDef(q_steering_control, 32, uint16_t);
 8000c4a:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <main+0x154>)
 8000c4c:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_steering_controlHandle = osMessageCreate(osMessageQ(q_steering_control), NULL);
 8000c56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 fcde 	bl	800461e <osMessageCreate>
 8000c62:	4602      	mov	r2, r0
 8000c64:	4b33      	ldr	r3, [pc, #204]	; (8000d34 <main+0x15c>)
 8000c66:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_throttle_control */
  osMessageQDef(q_throttle_control, 32, uint16_t);
 8000c68:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <main+0x154>)
 8000c6a:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_throttle_controlHandle = osMessageCreate(osMessageQ(q_throttle_control), NULL);
 8000c74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 fccf 	bl	800461e <osMessageCreate>
 8000c80:	4602      	mov	r2, r0
 8000c82:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <main+0x160>)
 8000c84:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_light_control */
  osMessageQDef(q_light_control, 32, uint16_t);
 8000c86:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <main+0x154>)
 8000c88:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000c8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_light_controlHandle = osMessageCreate(osMessageQ(q_light_control), NULL);
 8000c92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fcc0 	bl	800461e <osMessageCreate>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <main+0x164>)
 8000ca2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of display */
  osThreadDef(display, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <main+0x168>)
 8000ca6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000caa:	461d      	mov	r5, r3
 8000cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayHandle = osThreadCreate(osThread(display), NULL);
 8000cb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 fc4d 	bl	800455e <osThreadCreate>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <main+0x16c>)
 8000cc8:	601a      	str	r2, [r3, #0]

  /* definition and creation of send_message */
  osThreadDef(send_message, StartTask01, osPriorityNormal, 0, 128);
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <main+0x170>)
 8000ccc:	f107 0420 	add.w	r4, r7, #32
 8000cd0:	461d      	mov	r5, r3
 8000cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  send_messageHandle = osThreadCreate(osThread(send_message), NULL);
 8000cde:	f107 0320 	add.w	r3, r7, #32
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 fc3a 	bl	800455e <osThreadCreate>
 8000cea:	4602      	mov	r2, r0
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <main+0x174>)
 8000cee:	601a      	str	r2, [r3, #0]

  /* definition and creation of dashboard */
  osThreadDef(dashboard, StartTask02, osPriorityNormal, 0, 128);
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <main+0x178>)
 8000cf2:	1d3c      	adds	r4, r7, #4
 8000cf4:	461d      	mov	r5, r3
 8000cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dashboardHandle = osThreadCreate(osThread(dashboard), NULL);
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f003 fc29 	bl	800455e <osThreadCreate>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <main+0x17c>)
 8000d10:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d12:	f003 fc1d 	bl	8004550 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <main+0x13e>
 8000d18:	200010c0 	.word	0x200010c0
 8000d1c:	3c23d70a 	.word	0x3c23d70a
 8000d20:	42480000 	.word	0x42480000
 8000d24:	2000112c 	.word	0x2000112c
 8000d28:	200011e4 	.word	0x200011e4
 8000d2c:	080069f8 	.word	0x080069f8
 8000d30:	200011e8 	.word	0x200011e8
 8000d34:	20001124 	.word	0x20001124
 8000d38:	2000104c 	.word	0x2000104c
 8000d3c:	200010e8 	.word	0x200010e8
 8000d40:	08006a10 	.word	0x08006a10
 8000d44:	200011dc 	.word	0x200011dc
 8000d48:	08006a3c 	.word	0x08006a3c
 8000d4c:	20001128 	.word	0x20001128
 8000d50:	08006a64 	.word	0x08006a64
 8000d54:	20001048 	.word	0x20001048

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b094      	sub	sp, #80	; 0x50
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d62:	2228      	movs	r2, #40	; 0x28
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f005 fdc5 	bl	80068f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d96:	2301      	movs	r3, #1
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000da4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 fb44 	bl	800343c <HAL_RCC_OscConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dba:	f000 f9ff 	bl	80011bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2102      	movs	r1, #2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 fdae 	bl	800393c <HAL_RCC_ClockConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000de6:	f000 f9e9 	bl	80011bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dea:	2302      	movs	r3, #2
 8000dec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000df2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 ff28 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e02:	f000 f9db 	bl	80011bc <Error_Handler>
  }
}
 8000e06:	bf00      	nop
 8000e08:	3750      	adds	r7, #80	; 0x50
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_ADC1_Init+0x94>)
 8000e22:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <MX_ADC1_Init+0x98>)
 8000e24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e26:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_ADC1_Init+0x94>)
 8000e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_ADC1_Init+0x94>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_ADC1_Init+0x94>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_ADC1_Init+0x94>)
 8000e3c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_ADC1_Init+0x94>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_ADC1_Init+0x94>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e4e:	4815      	ldr	r0, [pc, #84]	; (8000ea4 <MX_ADC1_Init+0x94>)
 8000e50:	f000 fc24 	bl	800169c <HAL_ADC_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000e5a:	f000 f9af 	bl	80011bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e66:	2307      	movs	r3, #7
 8000e68:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_ADC1_Init+0x94>)
 8000e70:	f000 fea8 	bl	8001bc4 <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e7a:	f000 f99f 	bl	80011bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <MX_ADC1_Init+0x94>)
 8000e8c:	f000 fe9a 	bl	8001bc4 <HAL_ADC_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e96:	f000 f991 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200010f4 	.word	0x200010f4
 8000ea8:	40012400 	.word	0x40012400

08000eac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_CAN_Init+0x64>)
 8000eb2:	4a18      	ldr	r2, [pc, #96]	; (8000f14 <MX_CAN_Init+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_CAN_Init+0x64>)
 8000eb8:	2209      	movs	r2, #9
 8000eba:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_CAN_Init+0x64>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_CAN_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_CAN_Init+0x64>)
 8000eca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ece:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_CAN_Init+0x64>)
 8000ed2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000ed6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <MX_CAN_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_CAN_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <MX_CAN_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_CAN_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <MX_CAN_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_CAN_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_CAN_Init+0x64>)
 8000efe:	f001 f863 	bl	8001fc8 <HAL_CAN_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000f08:	f000 f958 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200010c0 	.word	0x200010c0
 8000f14:	40006400 	.word	0x40006400

08000f18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <MX_I2C1_Init+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f24:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <MX_I2C1_Init+0x58>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f56:	f002 f939 	bl	80031cc <HAL_I2C_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f60:	f000 f92c 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000106c 	.word	0x2000106c
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	00061a80 	.word	0x00061a80

08000f74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_TIM2_Init+0x94>)
 8000f92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_TIM2_Init+0x94>)
 8000f9a:	2247      	movs	r2, #71	; 0x47
 8000f9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fa6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000faa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb8:	4813      	ldr	r0, [pc, #76]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fba:	f002 fefd 	bl	8003db8 <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fc4:	f000 f8fa 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fd6:	f003 f846 	bl	8004066 <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fe0:	f000 f8ec 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_TIM2_Init+0x94>)
 8000ff2:	f003 fa15 	bl	8004420 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ffc:	f000 f8de 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20001194 	.word	0x20001194

0800100c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_DMA_Init+0x38>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <MX_DMA_Init+0x38>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6153      	str	r3, [r2, #20]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_DMA_Init+0x38>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2105      	movs	r1, #5
 800102e:	200b      	movs	r0, #11
 8001030:	f001 fd05 	bl	8002a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001034:	200b      	movs	r0, #11
 8001036:	f001 fd1e 	bl	8002a76 <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <MX_GPIO_Init+0xd8>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a2f      	ldr	r2, [pc, #188]	; (8001120 <MX_GPIO_Init+0xd8>)
 8001062:	f043 0310 	orr.w	r3, r3, #16
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <MX_GPIO_Init+0xd8>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001074:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <MX_GPIO_Init+0xd8>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a29      	ldr	r2, [pc, #164]	; (8001120 <MX_GPIO_Init+0xd8>)
 800107a:	f043 0320 	orr.w	r3, r3, #32
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <MX_GPIO_Init+0xd8>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <MX_GPIO_Init+0xd8>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a23      	ldr	r2, [pc, #140]	; (8001120 <MX_GPIO_Init+0xd8>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b21      	ldr	r3, [pc, #132]	; (8001120 <MX_GPIO_Init+0xd8>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <MX_GPIO_Init+0xd8>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <MX_GPIO_Init+0xd8>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_GPIO_Init+0xd8>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2104      	movs	r1, #4
 80010c0:	4818      	ldr	r0, [pc, #96]	; (8001124 <MX_GPIO_Init+0xdc>)
 80010c2:	f002 f852 	bl	800316a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4619      	mov	r1, r3
 80010da:	4813      	ldr	r0, [pc, #76]	; (8001128 <MX_GPIO_Init+0xe0>)
 80010dc:	f001 fed4 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010e0:	2304      	movs	r3, #4
 80010e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	480b      	ldr	r0, [pc, #44]	; (8001124 <MX_GPIO_Init+0xdc>)
 80010f8:	f001 fec6 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80010fc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001106:	2301      	movs	r3, #1
 8001108:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4619      	mov	r1, r3
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_GPIO_Init+0xdc>)
 8001112:	f001 feb9 	bl	8002e88 <HAL_GPIO_Init>

}
 8001116:	bf00      	nop
 8001118:	3720      	adds	r7, #32
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	40010c00 	.word	0x40010c00
 8001128:	40011000 	.word	0x40011000

0800112c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
				/* this task is displays information */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001134:	2104      	movs	r1, #4
 8001136:	4804      	ldr	r0, [pc, #16]	; (8001148 <StartDefaultTask+0x1c>)
 8001138:	f002 f82f 	bl	800319a <HAL_GPIO_TogglePin>
	osDelay(500);
 800113c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001140:	f003 fa59 	bl	80045f6 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001144:	e7f6      	b.n	8001134 <StartDefaultTask+0x8>
 8001146:	bf00      	nop
 8001148:	40010c00 	.word	0x40010c00

0800114c <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
				/* this task is prepares message and send message */
  /* Infinite loop */
  for(;;)
  {
	emergency_buff_send();
 8001154:	f7ff fc16 	bl	8000984 <emergency_buff_send>
	prepare_buff_send();
 8001158:	f7ff fb2c 	bl	80007b4 <prepare_buff_send>
	dashboard();
 800115c:	f7ff fc3a 	bl	80009d4 <dashboard>
	osDelay(1);
 8001160:	2001      	movs	r0, #1
 8001162:	f003 fa48 	bl	80045f6 <osDelay>
	emergency_buff_send();
 8001166:	e7f5      	b.n	8001154 <StartTask01+0x8>

08001168 <StartTask02>:
* @retval None
*/

/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
				/* this task is get data from dashboard */
  /* Infinite loop */
	HAL_ADC_Start_DMA(&hadc1, &adc_value, 2);
 8001170:	2202      	movs	r2, #2
 8001172:	490d      	ldr	r1, [pc, #52]	; (80011a8 <StartTask02+0x40>)
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <StartTask02+0x44>)
 8001176:	f000 fb69 	bl	800184c <HAL_ADC_Start_DMA>
  for(;;)
  {
	status_motor = 1;
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <StartTask02+0x48>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
	osMessagePut(q_throttle_controlHandle, adc_value[0], 0);
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <StartTask02+0x4c>)
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <StartTask02+0x40>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	2200      	movs	r2, #0
 800118a:	4619      	mov	r1, r3
 800118c:	f003 fa70 	bl	8004670 <osMessagePut>
	osMessagePut(q_steering_controlHandle, adc_value[1], 0);
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <StartTask02+0x50>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <StartTask02+0x40>)
 8001196:	885b      	ldrh	r3, [r3, #2]
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	f003 fa68 	bl	8004670 <osMessagePut>
	osDelay(1);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f003 fa28 	bl	80045f6 <osDelay>
	status_motor = 1;
 80011a6:	e7e8      	b.n	800117a <StartTask02+0x12>
 80011a8:	200010f0 	.word	0x200010f0
 80011ac:	200010f4 	.word	0x200010f4
 80011b0:	200002e4 	.word	0x200002e4
 80011b4:	2000104c 	.word	0x2000104c
 80011b8:	20001124 	.word	0x20001124

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <Error_Handler+0x6>

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_MspInit+0x68>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_MspInit+0x68>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6193      	str	r3, [r2, #24]
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_MspInit+0x68>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_MspInit+0x68>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <HAL_MspInit+0x68>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_MspInit+0x68>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	210f      	movs	r1, #15
 80011fe:	f06f 0001 	mvn.w	r0, #1
 8001202:	f001 fc1c 	bl	8002a3e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_MspInit+0x6c>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_MspInit+0x6c>)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000

08001234 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a2c      	ldr	r2, [pc, #176]	; (8001300 <HAL_ADC_MspInit+0xcc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d151      	bne.n	80012f8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001254:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <HAL_ADC_MspInit+0xd0>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <HAL_ADC_MspInit+0xd0>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b28      	ldr	r3, [pc, #160]	; (8001304 <HAL_ADC_MspInit+0xd0>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b25      	ldr	r3, [pc, #148]	; (8001304 <HAL_ADC_MspInit+0xd0>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a24      	ldr	r2, [pc, #144]	; (8001304 <HAL_ADC_MspInit+0xd0>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <HAL_ADC_MspInit+0xd0>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001284:	2303      	movs	r3, #3
 8001286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001288:	2303      	movs	r3, #3
 800128a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	481d      	ldr	r0, [pc, #116]	; (8001308 <HAL_ADC_MspInit+0xd4>)
 8001294:	f001 fdf8 	bl	8002e88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <HAL_ADC_MspInit+0xd8>)
 800129a:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_ADC_MspInit+0xdc>)
 800129c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_ADC_MspInit+0xd8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_ADC_MspInit+0xd8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_ADC_MspInit+0xd8>)
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_ADC_MspInit+0xd8>)
 80012b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <HAL_ADC_MspInit+0xd8>)
 80012ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_ADC_MspInit+0xd8>)
 80012c2:	2220      	movs	r2, #32
 80012c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_ADC_MspInit+0xd8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012cc:	480f      	ldr	r0, [pc, #60]	; (800130c <HAL_ADC_MspInit+0xd8>)
 80012ce:	f001 fbed 	bl	8002aac <HAL_DMA_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80012d8:	f7ff ff70 	bl	80011bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <HAL_ADC_MspInit+0xd8>)
 80012e0:	621a      	str	r2, [r3, #32]
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_ADC_MspInit+0xd8>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2105      	movs	r1, #5
 80012ec:	2012      	movs	r0, #18
 80012ee:	f001 fba6 	bl	8002a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012f2:	2012      	movs	r0, #18
 80012f4:	f001 fbbf 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40012400 	.word	0x40012400
 8001304:	40021000 	.word	0x40021000
 8001308:	40010800 	.word	0x40010800
 800130c:	20001148 	.word	0x20001148
 8001310:	40020008 	.word	0x40020008

08001314 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <HAL_CAN_MspInit+0x9c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d139      	bne.n	80013a8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <HAL_CAN_MspInit+0xa0>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <HAL_CAN_MspInit+0xa0>)
 800133a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800133e:	61d3      	str	r3, [r2, #28]
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_CAN_MspInit+0xa0>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_CAN_MspInit+0xa0>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <HAL_CAN_MspInit+0xa0>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_CAN_MspInit+0xa0>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001364:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001368:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4619      	mov	r1, r3
 8001378:	480f      	ldr	r0, [pc, #60]	; (80013b8 <HAL_CAN_MspInit+0xa4>)
 800137a:	f001 fd85 	bl	8002e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800137e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <HAL_CAN_MspInit+0xa4>)
 8001394:	f001 fd78 	bl	8002e88 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2105      	movs	r1, #5
 800139c:	2014      	movs	r0, #20
 800139e:	f001 fb4e 	bl	8002a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80013a2:	2014      	movs	r0, #20
 80013a4:	f001 fb67 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40006400 	.word	0x40006400
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010800 	.word	0x40010800

080013bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <HAL_I2C_MspInit+0x70>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d123      	bne.n	8001424 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <HAL_I2C_MspInit+0x74>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a13      	ldr	r2, [pc, #76]	; (8001430 <HAL_I2C_MspInit+0x74>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_I2C_MspInit+0x74>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013f4:	23c0      	movs	r3, #192	; 0xc0
 80013f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f8:	2312      	movs	r3, #18
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4619      	mov	r1, r3
 8001406:	480b      	ldr	r0, [pc, #44]	; (8001434 <HAL_I2C_MspInit+0x78>)
 8001408:	f001 fd3e 	bl	8002e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_I2C_MspInit+0x74>)
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_I2C_MspInit+0x74>)
 8001412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001416:	61d3      	str	r3, [r2, #28]
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_I2C_MspInit+0x74>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40005400 	.word	0x40005400
 8001430:	40021000 	.word	0x40021000
 8001434:	40010c00 	.word	0x40010c00

08001438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001448:	d113      	bne.n	8001472 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_TIM_Base_MspInit+0x44>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <HAL_TIM_Base_MspInit+0x44>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	61d3      	str	r3, [r2, #28]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_TIM_Base_MspInit+0x44>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2105      	movs	r1, #5
 8001466:	201c      	movs	r0, #28
 8001468:	f001 fae9 	bl	8002a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800146c:	201c      	movs	r0, #28
 800146e:	f001 fb02 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ae:	f000 f8d9 	bl	8001664 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014b2:	f004 fd25 	bl	8005f00 <xTaskGetSchedulerState>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d001      	beq.n	80014c0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014bc:	f004 ff8c 	bl	80063d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <DMA1_Channel1_IRQHandler+0x10>)
 80014ca:	f001 fba9 	bl	8002c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20001148 	.word	0x20001148

080014d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <ADC1_2_IRQHandler+0x10>)
 80014de:	f000 fa93 	bl	8001a08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200010f4 	.word	0x200010f4

080014ec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80014f2:	f000 ffa7 	bl	8002444 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200010c0 	.word	0x200010c0

08001500 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <TIM2_IRQHandler+0x10>)
 8001506:	f002 fca6 	bl	8003e56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20001194 	.word	0x20001194

08001514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800151c:	4a14      	ldr	r2, [pc, #80]	; (8001570 <_sbrk+0x5c>)
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <_sbrk+0x60>)
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <_sbrk+0x64>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <_sbrk+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	429a      	cmp	r2, r3
 8001542:	d207      	bcs.n	8001554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001544:	f005 f99a 	bl	800687c <__errno>
 8001548:	4602      	mov	r2, r0
 800154a:	230c      	movs	r3, #12
 800154c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e009      	b.n	8001568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <_sbrk+0x64>)
 8001564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20005000 	.word	0x20005000
 8001574:	00000400 	.word	0x00000400
 8001578:	200002f0 	.word	0x200002f0
 800157c:	20001200 	.word	0x20001200

08001580 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a4:	4c0a      	ldr	r4, [pc, #40]	; (80015d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015b2:	f7ff ffe5 	bl	8001580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b6:	f005 f967 	bl	8006888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ba:	f7ff fb0d 	bl	8000bd8 <main>
  bx lr
 80015be:	4770      	bx	lr
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80015c8:	08006abc 	.word	0x08006abc
  ldr r2, =_sbss
 80015cc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80015d0:	200011fc 	.word	0x200011fc

080015d4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <CAN1_RX1_IRQHandler>
	...

080015d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_Init+0x28>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_Init+0x28>)
 80015e2:	f043 0310 	orr.w	r3, r3, #16
 80015e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f001 fa1d 	bl	8002a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ee:	200f      	movs	r0, #15
 80015f0:	f000 f808 	bl	8001604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f4:	f7ff fde6 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40022000 	.word	0x40022000

08001604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x54>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x58>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161a:	fbb3 f3f1 	udiv	r3, r3, r1
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f001 fa35 	bl	8002a92 <HAL_SYSTICK_Config>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e00e      	b.n	8001650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b0f      	cmp	r3, #15
 8001636:	d80a      	bhi.n	800164e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001638:	2200      	movs	r2, #0
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f001 f9fd 	bl	8002a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001644:	4a06      	ldr	r2, [pc, #24]	; (8001660 <HAL_InitTick+0x5c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	e000      	b.n	8001650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000000 	.word	0x20000000
 800165c:	20000008 	.word	0x20000008
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_IncTick+0x1c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_IncTick+0x20>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a03      	ldr	r2, [pc, #12]	; (8001684 <HAL_IncTick+0x20>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	20000008 	.word	0x20000008
 8001684:	200011f4 	.word	0x200011f4

08001688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b02      	ldr	r3, [pc, #8]	; (8001698 <HAL_GetTick+0x10>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	200011f4 	.word	0x200011f4

0800169c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0be      	b.n	800183c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d109      	bne.n	80016e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fdaa 	bl	8001234 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 fbc1 	bl	8001e68 <ADC_ConversionStop_Disable>
 80016e6:	4603      	mov	r3, r0
 80016e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 8099 	bne.w	800182a <HAL_ADC_Init+0x18e>
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 8095 	bne.w	800182a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001708:	f023 0302 	bic.w	r3, r3, #2
 800170c:	f043 0202 	orr.w	r2, r3, #2
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800171c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7b1b      	ldrb	r3, [r3, #12]
 8001722:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001724:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	4313      	orrs	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001734:	d003      	beq.n	800173e <HAL_ADC_Init+0xa2>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d102      	bne.n	8001744 <HAL_ADC_Init+0xa8>
 800173e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001742:	e000      	b.n	8001746 <HAL_ADC_Init+0xaa>
 8001744:	2300      	movs	r3, #0
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7d1b      	ldrb	r3, [r3, #20]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d119      	bne.n	8001788 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7b1b      	ldrb	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d109      	bne.n	8001770 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	3b01      	subs	r3, #1
 8001762:	035a      	lsls	r2, r3, #13
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	e00b      	b.n	8001788 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	f043 0220 	orr.w	r2, r3, #32
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	430a      	orrs	r2, r1
 800179a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	4b28      	ldr	r3, [pc, #160]	; (8001844 <HAL_ADC_Init+0x1a8>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	68b9      	ldr	r1, [r7, #8]
 80017ac:	430b      	orrs	r3, r1
 80017ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017b8:	d003      	beq.n	80017c2 <HAL_ADC_Init+0x126>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d104      	bne.n	80017cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	051b      	lsls	r3, r3, #20
 80017ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	430a      	orrs	r2, r1
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <HAL_ADC_Init+0x1ac>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d10b      	bne.n	8001808 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	f023 0303 	bic.w	r3, r3, #3
 80017fe:	f043 0201 	orr.w	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001806:	e018      	b.n	800183a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f023 0312 	bic.w	r3, r3, #18
 8001810:	f043 0210 	orr.w	r2, r3, #16
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001828:	e007      	b.n	800183a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	f043 0210 	orr.w	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800183a:	7dfb      	ldrb	r3, [r7, #23]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	ffe1f7fd 	.word	0xffe1f7fd
 8001848:	ff1f0efe 	.word	0xff1f0efe

0800184c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a64      	ldr	r2, [pc, #400]	; (80019f4 <HAL_ADC_Start_DMA+0x1a8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d004      	beq.n	8001870 <HAL_ADC_Start_DMA+0x24>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a63      	ldr	r2, [pc, #396]	; (80019f8 <HAL_ADC_Start_DMA+0x1ac>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d106      	bne.n	800187e <HAL_ADC_Start_DMA+0x32>
 8001870:	4b60      	ldr	r3, [pc, #384]	; (80019f4 <HAL_ADC_Start_DMA+0x1a8>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001878:	2b00      	cmp	r3, #0
 800187a:	f040 80b3 	bne.w	80019e4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_ADC_Start_DMA+0x40>
 8001888:	2302      	movs	r3, #2
 800188a:	e0ae      	b.n	80019ea <HAL_ADC_Start_DMA+0x19e>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 fa8d 	bl	8001db4 <ADC_Enable>
 800189a:	4603      	mov	r3, r0
 800189c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f040 809a 	bne.w	80019da <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a4e      	ldr	r2, [pc, #312]	; (80019f8 <HAL_ADC_Start_DMA+0x1ac>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d105      	bne.n	80018d0 <HAL_ADC_Start_DMA+0x84>
 80018c4:	4b4b      	ldr	r3, [pc, #300]	; (80019f4 <HAL_ADC_Start_DMA+0x1a8>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d115      	bne.n	80018fc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d026      	beq.n	8001938 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018fa:	e01d      	b.n	8001938 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a39      	ldr	r2, [pc, #228]	; (80019f4 <HAL_ADC_Start_DMA+0x1a8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d004      	beq.n	800191c <HAL_ADC_Start_DMA+0xd0>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a38      	ldr	r2, [pc, #224]	; (80019f8 <HAL_ADC_Start_DMA+0x1ac>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d10d      	bne.n	8001938 <HAL_ADC_Start_DMA+0xec>
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_ADC_Start_DMA+0x1a8>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001930:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	f023 0206 	bic.w	r2, r3, #6
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001950:	e002      	b.n	8001958 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <HAL_ADC_Start_DMA+0x1b0>)
 8001966:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <HAL_ADC_Start_DMA+0x1b4>)
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <HAL_ADC_Start_DMA+0x1b8>)
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f06f 0202 	mvn.w	r2, #2
 8001980:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001990:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a18      	ldr	r0, [r3, #32]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	334c      	adds	r3, #76	; 0x4c
 800199c:	4619      	mov	r1, r3
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f001 f8dd 	bl	8002b60 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019b4:	d108      	bne.n	80019c8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80019c4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80019c6:	e00f      	b.n	80019e8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019d6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80019d8:	e006      	b.n	80019e8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80019e2:	e001      	b.n	80019e8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40012400 	.word	0x40012400
 80019f8:	40012800 	.word	0x40012800
 80019fc:	08001eeb 	.word	0x08001eeb
 8001a00:	08001f67 	.word	0x08001f67
 8001a04:	08001f83 	.word	0x08001f83

08001a08 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	d140      	bne.n	8001aa0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d139      	bne.n	8001aa0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a52:	d11d      	bne.n	8001a90 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d119      	bne.n	8001a90 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0220 	bic.w	r2, r2, #32
 8001a6a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d105      	bne.n	8001a90 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	f043 0201 	orr.w	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7fe ffd7 	bl	8000a44 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f06f 0212 	mvn.w	r2, #18
 8001a9e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aaa:	2b80      	cmp	r3, #128	; 0x80
 8001aac:	d14f      	bne.n	8001b4e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d148      	bne.n	8001b4e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001ade:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001ae2:	d012      	beq.n	8001b0a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d125      	bne.n	8001b3e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001afc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b00:	d11d      	bne.n	8001b3e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d119      	bne.n	8001b3e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b18:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fa39 	bl	8001fb6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f06f 020c 	mvn.w	r2, #12
 8001b4c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b58:	2b40      	cmp	r3, #64	; 0x40
 8001b5a:	d114      	bne.n	8001b86 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d10d      	bne.n	8001b86 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f812 	bl	8001ba0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0201 	mvn.w	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x20>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e0dc      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x1da>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b06      	cmp	r3, #6
 8001bf2:	d81c      	bhi.n	8001c2e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b05      	subs	r3, #5
 8001c06:	221f      	movs	r2, #31
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4019      	ands	r1, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b05      	subs	r3, #5
 8001c20:	fa00 f203 	lsl.w	r2, r0, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c2c:	e03c      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b0c      	cmp	r3, #12
 8001c34:	d81c      	bhi.n	8001c70 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	3b23      	subs	r3, #35	; 0x23
 8001c48:	221f      	movs	r2, #31
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4019      	ands	r1, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b23      	subs	r3, #35	; 0x23
 8001c62:	fa00 f203 	lsl.w	r2, r0, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6e:	e01b      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	3b41      	subs	r3, #65	; 0x41
 8001c82:	221f      	movs	r2, #31
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	4019      	ands	r1, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b41      	subs	r3, #65	; 0x41
 8001c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b09      	cmp	r3, #9
 8001cae:	d91c      	bls.n	8001cea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68d9      	ldr	r1, [r3, #12]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b1e      	subs	r3, #30
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	4019      	ands	r1, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	6898      	ldr	r0, [r3, #8]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b1e      	subs	r3, #30
 8001cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	e019      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6919      	ldr	r1, [r3, #16]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4019      	ands	r1, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6898      	ldr	r0, [r3, #8]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	fa00 f203 	lsl.w	r2, r0, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d003      	beq.n	8001d2e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d2a:	2b11      	cmp	r3, #17
 8001d2c:	d132      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d125      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d126      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d54:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d11a      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_ADC_ConfigChannel+0x1e8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	0c9a      	lsrs	r2, r3, #18
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d74:	e002      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f9      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x1b2>
 8001d82:	e007      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	f043 0220 	orr.w	r2, r3, #32
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	40012400 	.word	0x40012400
 8001dac:	20000000 	.word	0x20000000
 8001db0:	431bde83 	.word	0x431bde83

08001db4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d040      	beq.n	8001e54 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001de2:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <ADC_Enable+0xac>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <ADC_Enable+0xb0>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	0c9b      	lsrs	r3, r3, #18
 8001dee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001df0:	e002      	b.n	8001df8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f9      	bne.n	8001df2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dfe:	f7ff fc43 	bl	8001688 <HAL_GetTick>
 8001e02:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e04:	e01f      	b.n	8001e46 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e06:	f7ff fc3f 	bl	8001688 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d918      	bls.n	8001e46 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d011      	beq.n	8001e46 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	f043 0210 	orr.w	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e007      	b.n	8001e56 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d1d8      	bne.n	8001e06 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000000 	.word	0x20000000
 8001e64:	431bde83 	.word	0x431bde83

08001e68 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d12e      	bne.n	8001ee0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e92:	f7ff fbf9 	bl	8001688 <HAL_GetTick>
 8001e96:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e98:	e01b      	b.n	8001ed2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e9a:	f7ff fbf5 	bl	8001688 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d914      	bls.n	8001ed2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10d      	bne.n	8001ed2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	f043 0210 	orr.w	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e007      	b.n	8001ee2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d0dc      	beq.n	8001e9a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d127      	bne.n	8001f54 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f1e:	d115      	bne.n	8001f4c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d111      	bne.n	8001f4c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	f043 0201 	orr.w	r2, r3, #1
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f7fe fd79 	bl	8000a44 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001f52:	e004      	b.n	8001f5e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	4798      	blx	r3
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7ff fe0a 	bl	8001b8e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	f043 0204 	orr.w	r2, r3, #4
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff fe02 	bl	8001bb2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0ed      	b.n	80021b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff f994 	bl	8001314 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ffc:	f7ff fb44 	bl	8001688 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002002:	e012      	b.n	800202a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002004:	f7ff fb40 	bl	8001688 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b0a      	cmp	r3, #10
 8002010:	d90b      	bls.n	800202a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2205      	movs	r2, #5
 8002022:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0c5      	b.n	80021b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0e5      	beq.n	8002004 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0202 	bic.w	r2, r2, #2
 8002046:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002048:	f7ff fb1e 	bl	8001688 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800204e:	e012      	b.n	8002076 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002050:	f7ff fb1a 	bl	8001688 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b0a      	cmp	r3, #10
 800205c:	d90b      	bls.n	8002076 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2205      	movs	r2, #5
 800206e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e09f      	b.n	80021b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e5      	bne.n	8002050 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7e1b      	ldrb	r3, [r3, #24]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d108      	bne.n	800209e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e007      	b.n	80020ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7e5b      	ldrb	r3, [r3, #25]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d108      	bne.n	80020c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e007      	b.n	80020d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7e9b      	ldrb	r3, [r3, #26]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d108      	bne.n	80020f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0220 	orr.w	r2, r2, #32
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e007      	b.n	8002102 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0220 	bic.w	r2, r2, #32
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7edb      	ldrb	r3, [r3, #27]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d108      	bne.n	800211c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0210 	bic.w	r2, r2, #16
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e007      	b.n	800212c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0210 	orr.w	r2, r2, #16
 800212a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7f1b      	ldrb	r3, [r3, #28]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d108      	bne.n	8002146 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0208 	orr.w	r2, r2, #8
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e007      	b.n	8002156 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0208 	bic.w	r2, r2, #8
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7f5b      	ldrb	r3, [r3, #29]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d108      	bne.n	8002170 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0204 	orr.w	r2, r2, #4
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	e007      	b.n	8002180 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0204 	bic.w	r2, r2, #4
 800217e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	ea42 0103 	orr.w	r1, r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	1e5a      	subs	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d12e      	bne.n	8002230 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0201 	bic.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021ea:	f7ff fa4d 	bl	8001688 <HAL_GetTick>
 80021ee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021f0:	e012      	b.n	8002218 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021f2:	f7ff fa49 	bl	8001688 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b0a      	cmp	r3, #10
 80021fe:	d90b      	bls.n	8002218 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2205      	movs	r2, #5
 8002210:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e012      	b.n	800223e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1e5      	bne.n	80021f2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	e006      	b.n	800223e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
  }
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002246:	b480      	push	{r7}
 8002248:	b089      	sub	sp, #36	; 0x24
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800225a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002264:	7ffb      	ldrb	r3, [r7, #31]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d003      	beq.n	8002272 <HAL_CAN_AddTxMessage+0x2c>
 800226a:	7ffb      	ldrb	r3, [r7, #31]
 800226c:	2b02      	cmp	r3, #2
 800226e:	f040 80b8 	bne.w	80023e2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80a0 	beq.w	80023d2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	0e1b      	lsrs	r3, r3, #24
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d907      	bls.n	80022b2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e09e      	b.n	80023f0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80022b2:	2201      	movs	r2, #1
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10d      	bne.n	80022e0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022ce:	68f9      	ldr	r1, [r7, #12]
 80022d0:	6809      	ldr	r1, [r1, #0]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3318      	adds	r3, #24
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	440b      	add	r3, r1
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e00f      	b.n	8002300 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022ea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80022f4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3318      	adds	r3, #24
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	440b      	add	r3, r1
 80022fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6819      	ldr	r1, [r3, #0]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3318      	adds	r3, #24
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	440b      	add	r3, r1
 8002310:	3304      	adds	r3, #4
 8002312:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	7d1b      	ldrb	r3, [r3, #20]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d111      	bne.n	8002340 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3318      	adds	r3, #24
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	4413      	add	r3, r2
 8002328:	3304      	adds	r3, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	6811      	ldr	r1, [r2, #0]
 8002330:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3318      	adds	r3, #24
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	440b      	add	r3, r1
 800233c:	3304      	adds	r3, #4
 800233e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3307      	adds	r3, #7
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	061a      	lsls	r2, r3, #24
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3306      	adds	r3, #6
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	041b      	lsls	r3, r3, #16
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3305      	adds	r3, #5
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	4313      	orrs	r3, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	3204      	adds	r2, #4
 8002360:	7812      	ldrb	r2, [r2, #0]
 8002362:	4610      	mov	r0, r2
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	6811      	ldr	r1, [r2, #0]
 8002368:	ea43 0200 	orr.w	r2, r3, r0
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	440b      	add	r3, r1
 8002372:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002376:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3303      	adds	r3, #3
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	061a      	lsls	r2, r3, #24
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3302      	adds	r3, #2
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	041b      	lsls	r3, r3, #16
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3301      	adds	r3, #1
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	4313      	orrs	r3, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	7812      	ldrb	r2, [r2, #0]
 8002398:	4610      	mov	r0, r2
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	6811      	ldr	r1, [r2, #0]
 800239e:	ea43 0200 	orr.w	r2, r3, r0
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80023ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3318      	adds	r3, #24
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4413      	add	r3, r2
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	6811      	ldr	r1, [r2, #0]
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3318      	adds	r3, #24
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	440b      	add	r3, r1
 80023cc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e00e      	b.n	80023f0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e006      	b.n	80023f0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
  }
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3724      	adds	r7, #36	; 0x24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b085      	sub	sp, #20
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800240a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d002      	beq.n	8002418 <HAL_CAN_ActivateNotification+0x1e>
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d109      	bne.n	800242c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6959      	ldr	r1, [r3, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	e006      	b.n	800243a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
  }
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d07c      	beq.n	8002584 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d023      	beq.n	80024dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2201      	movs	r2, #1
 800249a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f97d 	bl	80027a6 <HAL_CAN_TxMailbox0CompleteCallback>
 80024ac:	e016      	b.n	80024dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
 80024c0:	e00c      	b.n	80024dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
 80024d4:	e002      	b.n	80024dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f980 	bl	80027dc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d024      	beq.n	8002530 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f95c 	bl	80027b8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002500:	e016      	b.n	8002530 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
 8002514:	e00c      	b.n	8002530 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251c:	2b00      	cmp	r3, #0
 800251e:	d004      	beq.n	800252a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
 8002528:	e002      	b.n	8002530 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f95f 	bl	80027ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d024      	beq.n	8002584 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002542:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f93b 	bl	80027ca <HAL_CAN_TxMailbox2CompleteCallback>
 8002554:	e016      	b.n	8002584 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	e00c      	b.n	8002584 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	e002      	b.n	8002584 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f93e 	bl	8002800 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2210      	movs	r2, #16
 80025a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2208      	movs	r2, #8
 80025c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f92d 	bl	8002824 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f915 	bl	8002812 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00c      	beq.n	800260c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002602:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2210      	movs	r2, #16
 800260a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d006      	beq.n	800262e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2208      	movs	r2, #8
 8002626:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f90d 	bl	8002848 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f8f5 	bl	8002836 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00b      	beq.n	800266e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	2b00      	cmp	r3, #0
 800265e:	d006      	beq.n	800266e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2210      	movs	r2, #16
 8002666:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f8f6 	bl	800285a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2208      	movs	r2, #8
 8002688:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f8ee 	bl	800286c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d075      	beq.n	8002786 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06c      	beq.n	800277e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	f043 0302 	orr.w	r3, r3, #2
 80026da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d03d      	beq.n	800277e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002708:	2b00      	cmp	r3, #0
 800270a:	d038      	beq.n	800277e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002712:	2b30      	cmp	r3, #48	; 0x30
 8002714:	d017      	beq.n	8002746 <HAL_CAN_IRQHandler+0x302>
 8002716:	2b30      	cmp	r3, #48	; 0x30
 8002718:	d804      	bhi.n	8002724 <HAL_CAN_IRQHandler+0x2e0>
 800271a:	2b10      	cmp	r3, #16
 800271c:	d009      	beq.n	8002732 <HAL_CAN_IRQHandler+0x2ee>
 800271e:	2b20      	cmp	r3, #32
 8002720:	d00c      	beq.n	800273c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002722:	e024      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002724:	2b50      	cmp	r3, #80	; 0x50
 8002726:	d018      	beq.n	800275a <HAL_CAN_IRQHandler+0x316>
 8002728:	2b60      	cmp	r3, #96	; 0x60
 800272a:	d01b      	beq.n	8002764 <HAL_CAN_IRQHandler+0x320>
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d00f      	beq.n	8002750 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002730:	e01d      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	f043 0308 	orr.w	r3, r3, #8
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800273a:	e018      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	f043 0310 	orr.w	r3, r3, #16
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002744:	e013      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	f043 0320 	orr.w	r3, r3, #32
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800274e:	e00e      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002758:	e009      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002762:	e004      	b.n	800276e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800276c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699a      	ldr	r2, [r3, #24]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800277c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2204      	movs	r2, #4
 8002784:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f870 	bl	800287e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800279e:	bf00      	nop
 80027a0:	3728      	adds	r7, #40	; 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db0b      	blt.n	800291e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4906      	ldr	r1, [pc, #24]	; (8002928 <__NVIC_EnableIRQ+0x34>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	e000e100 	.word	0xe000e100

0800292c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db0a      	blt.n	8002956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	490c      	ldr	r1, [pc, #48]	; (8002978 <__NVIC_SetPriority+0x4c>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	440b      	add	r3, r1
 8002950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002954:	e00a      	b.n	800296c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4908      	ldr	r1, [pc, #32]	; (800297c <__NVIC_SetPriority+0x50>)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3b04      	subs	r3, #4
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	440b      	add	r3, r1
 800296a:	761a      	strb	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f1c3 0307 	rsb	r3, r3, #7
 800299a:	2b04      	cmp	r3, #4
 800299c:	bf28      	it	cs
 800299e:	2304      	movcs	r3, #4
 80029a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d902      	bls.n	80029b0 <NVIC_EncodePriority+0x30>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	e000      	b.n	80029b2 <NVIC_EncodePriority+0x32>
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	4313      	orrs	r3, r2
         );
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	; 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f4:	d301      	bcc.n	80029fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00f      	b.n	8002a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <SysTick_Config+0x40>)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a02:	210f      	movs	r1, #15
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f7ff ff90 	bl	800292c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <SysTick_Config+0x40>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a12:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <SysTick_Config+0x40>)
 8002a14:	2207      	movs	r2, #7
 8002a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	e000e010 	.word	0xe000e010

08002a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff ff2d 	bl	8002890 <__NVIC_SetPriorityGrouping>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b086      	sub	sp, #24
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4603      	mov	r3, r0
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
 8002a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a50:	f7ff ff42 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	6978      	ldr	r0, [r7, #20]
 8002a5c:	f7ff ff90 	bl	8002980 <NVIC_EncodePriority>
 8002a60:	4602      	mov	r2, r0
 8002a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff5f 	bl	800292c <__NVIC_SetPriority>
}
 8002a6e:	bf00      	nop
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff35 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff ffa2 	bl	80029e4 <SysTick_Config>
 8002aa0:	4603      	mov	r3, r0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e043      	b.n	8002b4a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_DMA_Init+0xa8>)
 8002aca:	4413      	add	r3, r2
 8002acc:	4a22      	ldr	r2, [pc, #136]	; (8002b58 <HAL_DMA_Init+0xac>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	009a      	lsls	r2, r3, #2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_DMA_Init+0xb0>)
 8002ade:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002af6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002afa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	bffdfff8 	.word	0xbffdfff8
 8002b58:	cccccccd 	.word	0xcccccccd
 8002b5c:	40020000 	.word	0x40020000

08002b60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_DMA_Start_IT+0x20>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e04a      	b.n	8002c16 <HAL_DMA_Start_IT+0xb6>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d13a      	bne.n	8002c08 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f938 	bl	8002e2c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 020e 	orr.w	r2, r2, #14
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e00f      	b.n	8002bf6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0204 	bic.w	r2, r2, #4
 8002be4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 020a 	orr.w	r2, r2, #10
 8002bf4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	e005      	b.n	8002c14 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
 8002c12:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d04f      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0xc8>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d04a      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0204 	bic.w	r2, r2, #4
 8002c6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a66      	ldr	r2, [pc, #408]	; (8002e10 <HAL_DMA_IRQHandler+0x1f0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d029      	beq.n	8002cce <HAL_DMA_IRQHandler+0xae>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a65      	ldr	r2, [pc, #404]	; (8002e14 <HAL_DMA_IRQHandler+0x1f4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d022      	beq.n	8002cca <HAL_DMA_IRQHandler+0xaa>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a63      	ldr	r2, [pc, #396]	; (8002e18 <HAL_DMA_IRQHandler+0x1f8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01a      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0xa4>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a62      	ldr	r2, [pc, #392]	; (8002e1c <HAL_DMA_IRQHandler+0x1fc>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d012      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x9e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a60      	ldr	r2, [pc, #384]	; (8002e20 <HAL_DMA_IRQHandler+0x200>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x98>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a5f      	ldr	r2, [pc, #380]	; (8002e24 <HAL_DMA_IRQHandler+0x204>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d102      	bne.n	8002cb2 <HAL_DMA_IRQHandler+0x92>
 8002cac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cb0:	e00e      	b.n	8002cd0 <HAL_DMA_IRQHandler+0xb0>
 8002cb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002cb6:	e00b      	b.n	8002cd0 <HAL_DMA_IRQHandler+0xb0>
 8002cb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cbc:	e008      	b.n	8002cd0 <HAL_DMA_IRQHandler+0xb0>
 8002cbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cc2:	e005      	b.n	8002cd0 <HAL_DMA_IRQHandler+0xb0>
 8002cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc8:	e002      	b.n	8002cd0 <HAL_DMA_IRQHandler+0xb0>
 8002cca:	2340      	movs	r3, #64	; 0x40
 8002ccc:	e000      	b.n	8002cd0 <HAL_DMA_IRQHandler+0xb0>
 8002cce:	2304      	movs	r3, #4
 8002cd0:	4a55      	ldr	r2, [pc, #340]	; (8002e28 <HAL_DMA_IRQHandler+0x208>)
 8002cd2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8094 	beq.w	8002e06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ce6:	e08e      	b.n	8002e06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2202      	movs	r2, #2
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d056      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x186>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d051      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10b      	bne.n	8002d28 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 020a 	bic.w	r2, r2, #10
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a38      	ldr	r2, [pc, #224]	; (8002e10 <HAL_DMA_IRQHandler+0x1f0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d029      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x166>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a37      	ldr	r2, [pc, #220]	; (8002e14 <HAL_DMA_IRQHandler+0x1f4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d022      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x162>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a35      	ldr	r2, [pc, #212]	; (8002e18 <HAL_DMA_IRQHandler+0x1f8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01a      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x15c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a34      	ldr	r2, [pc, #208]	; (8002e1c <HAL_DMA_IRQHandler+0x1fc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d012      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x156>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a32      	ldr	r2, [pc, #200]	; (8002e20 <HAL_DMA_IRQHandler+0x200>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00a      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x150>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a31      	ldr	r2, [pc, #196]	; (8002e24 <HAL_DMA_IRQHandler+0x204>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d102      	bne.n	8002d6a <HAL_DMA_IRQHandler+0x14a>
 8002d64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d68:	e00e      	b.n	8002d88 <HAL_DMA_IRQHandler+0x168>
 8002d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6e:	e00b      	b.n	8002d88 <HAL_DMA_IRQHandler+0x168>
 8002d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d74:	e008      	b.n	8002d88 <HAL_DMA_IRQHandler+0x168>
 8002d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d7a:	e005      	b.n	8002d88 <HAL_DMA_IRQHandler+0x168>
 8002d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d80:	e002      	b.n	8002d88 <HAL_DMA_IRQHandler+0x168>
 8002d82:	2320      	movs	r3, #32
 8002d84:	e000      	b.n	8002d88 <HAL_DMA_IRQHandler+0x168>
 8002d86:	2302      	movs	r3, #2
 8002d88:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <HAL_DMA_IRQHandler+0x208>)
 8002d8a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d034      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002da4:	e02f      	b.n	8002e06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2208      	movs	r2, #8
 8002dac:	409a      	lsls	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d028      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x1e8>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d023      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 020e 	bic.w	r2, r2, #14
 8002dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f202 	lsl.w	r2, r1, r2
 8002dde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
    }
  }
  return;
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
}
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40020008 	.word	0x40020008
 8002e14:	4002001c 	.word	0x4002001c
 8002e18:	40020030 	.word	0x40020030
 8002e1c:	40020044 	.word	0x40020044
 8002e20:	40020058 	.word	0x40020058
 8002e24:	4002006c 	.word	0x4002006c
 8002e28:	40020000 	.word	0x40020000

08002e2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e42:	2101      	movs	r1, #1
 8002e44:	fa01 f202 	lsl.w	r2, r1, r2
 8002e48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b10      	cmp	r3, #16
 8002e58:	d108      	bne.n	8002e6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e6a:	e007      	b.n	8002e7c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	60da      	str	r2, [r3, #12]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
	...

08002e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b08b      	sub	sp, #44	; 0x2c
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e92:	2300      	movs	r3, #0
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e96:	2300      	movs	r3, #0
 8002e98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e9a:	e127      	b.n	80030ec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	f040 8116 	bne.w	80030e6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b12      	cmp	r3, #18
 8002ec0:	d034      	beq.n	8002f2c <HAL_GPIO_Init+0xa4>
 8002ec2:	2b12      	cmp	r3, #18
 8002ec4:	d80d      	bhi.n	8002ee2 <HAL_GPIO_Init+0x5a>
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d02b      	beq.n	8002f22 <HAL_GPIO_Init+0x9a>
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d804      	bhi.n	8002ed8 <HAL_GPIO_Init+0x50>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d031      	beq.n	8002f36 <HAL_GPIO_Init+0xae>
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d01c      	beq.n	8002f10 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ed6:	e048      	b.n	8002f6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d043      	beq.n	8002f64 <HAL_GPIO_Init+0xdc>
 8002edc:	2b11      	cmp	r3, #17
 8002ede:	d01b      	beq.n	8002f18 <HAL_GPIO_Init+0x90>
          break;
 8002ee0:	e043      	b.n	8002f6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ee2:	4a89      	ldr	r2, [pc, #548]	; (8003108 <HAL_GPIO_Init+0x280>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d026      	beq.n	8002f36 <HAL_GPIO_Init+0xae>
 8002ee8:	4a87      	ldr	r2, [pc, #540]	; (8003108 <HAL_GPIO_Init+0x280>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d806      	bhi.n	8002efc <HAL_GPIO_Init+0x74>
 8002eee:	4a87      	ldr	r2, [pc, #540]	; (800310c <HAL_GPIO_Init+0x284>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d020      	beq.n	8002f36 <HAL_GPIO_Init+0xae>
 8002ef4:	4a86      	ldr	r2, [pc, #536]	; (8003110 <HAL_GPIO_Init+0x288>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01d      	beq.n	8002f36 <HAL_GPIO_Init+0xae>
          break;
 8002efa:	e036      	b.n	8002f6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002efc:	4a85      	ldr	r2, [pc, #532]	; (8003114 <HAL_GPIO_Init+0x28c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d019      	beq.n	8002f36 <HAL_GPIO_Init+0xae>
 8002f02:	4a85      	ldr	r2, [pc, #532]	; (8003118 <HAL_GPIO_Init+0x290>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d016      	beq.n	8002f36 <HAL_GPIO_Init+0xae>
 8002f08:	4a84      	ldr	r2, [pc, #528]	; (800311c <HAL_GPIO_Init+0x294>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_GPIO_Init+0xae>
          break;
 8002f0e:	e02c      	b.n	8002f6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	623b      	str	r3, [r7, #32]
          break;
 8002f16:	e028      	b.n	8002f6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	623b      	str	r3, [r7, #32]
          break;
 8002f20:	e023      	b.n	8002f6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	3308      	adds	r3, #8
 8002f28:	623b      	str	r3, [r7, #32]
          break;
 8002f2a:	e01e      	b.n	8002f6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	330c      	adds	r3, #12
 8002f32:	623b      	str	r3, [r7, #32]
          break;
 8002f34:	e019      	b.n	8002f6a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f3e:	2304      	movs	r3, #4
 8002f40:	623b      	str	r3, [r7, #32]
          break;
 8002f42:	e012      	b.n	8002f6a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d105      	bne.n	8002f58 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	611a      	str	r2, [r3, #16]
          break;
 8002f56:	e008      	b.n	8002f6a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f58:	2308      	movs	r3, #8
 8002f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	615a      	str	r2, [r3, #20]
          break;
 8002f62:	e002      	b.n	8002f6a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f64:	2300      	movs	r3, #0
 8002f66:	623b      	str	r3, [r7, #32]
          break;
 8002f68:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2bff      	cmp	r3, #255	; 0xff
 8002f6e:	d801      	bhi.n	8002f74 <HAL_GPIO_Init+0xec>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	e001      	b.n	8002f78 <HAL_GPIO_Init+0xf0>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2bff      	cmp	r3, #255	; 0xff
 8002f7e:	d802      	bhi.n	8002f86 <HAL_GPIO_Init+0xfe>
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	e002      	b.n	8002f8c <HAL_GPIO_Init+0x104>
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	3b08      	subs	r3, #8
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	210f      	movs	r1, #15
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	6a39      	ldr	r1, [r7, #32]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8096 	beq.w	80030e6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fba:	4b59      	ldr	r3, [pc, #356]	; (8003120 <HAL_GPIO_Init+0x298>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	4a58      	ldr	r2, [pc, #352]	; (8003120 <HAL_GPIO_Init+0x298>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6193      	str	r3, [r2, #24]
 8002fc6:	4b56      	ldr	r3, [pc, #344]	; (8003120 <HAL_GPIO_Init+0x298>)
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fd2:	4a54      	ldr	r2, [pc, #336]	; (8003124 <HAL_GPIO_Init+0x29c>)
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fde:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	220f      	movs	r2, #15
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a4b      	ldr	r2, [pc, #300]	; (8003128 <HAL_GPIO_Init+0x2a0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_GPIO_Init+0x19e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4a      	ldr	r2, [pc, #296]	; (800312c <HAL_GPIO_Init+0x2a4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00d      	beq.n	8003022 <HAL_GPIO_Init+0x19a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a49      	ldr	r2, [pc, #292]	; (8003130 <HAL_GPIO_Init+0x2a8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <HAL_GPIO_Init+0x196>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a48      	ldr	r2, [pc, #288]	; (8003134 <HAL_GPIO_Init+0x2ac>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d101      	bne.n	800301a <HAL_GPIO_Init+0x192>
 8003016:	2303      	movs	r3, #3
 8003018:	e006      	b.n	8003028 <HAL_GPIO_Init+0x1a0>
 800301a:	2304      	movs	r3, #4
 800301c:	e004      	b.n	8003028 <HAL_GPIO_Init+0x1a0>
 800301e:	2302      	movs	r3, #2
 8003020:	e002      	b.n	8003028 <HAL_GPIO_Init+0x1a0>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_GPIO_Init+0x1a0>
 8003026:	2300      	movs	r3, #0
 8003028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302a:	f002 0203 	and.w	r2, r2, #3
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	4093      	lsls	r3, r2
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003038:	493a      	ldr	r1, [pc, #232]	; (8003124 <HAL_GPIO_Init+0x29c>)
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	089b      	lsrs	r3, r3, #2
 800303e:	3302      	adds	r3, #2
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003052:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4938      	ldr	r1, [pc, #224]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
 800305e:	e006      	b.n	800306e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003060:	4b35      	ldr	r3, [pc, #212]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	43db      	mvns	r3, r3
 8003068:	4933      	ldr	r1, [pc, #204]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 800306a:	4013      	ands	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800307a:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	492e      	ldr	r1, [pc, #184]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]
 8003086:	e006      	b.n	8003096 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003088:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	43db      	mvns	r3, r3
 8003090:	4929      	ldr	r1, [pc, #164]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 8003092:	4013      	ands	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d006      	beq.n	80030b0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030a2:	4b25      	ldr	r3, [pc, #148]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	4924      	ldr	r1, [pc, #144]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
 80030ae:	e006      	b.n	80030be <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030b0:	4b21      	ldr	r3, [pc, #132]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	491f      	ldr	r1, [pc, #124]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	491a      	ldr	r1, [pc, #104]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60cb      	str	r3, [r1, #12]
 80030d6:	e006      	b.n	80030e6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030d8:	4b17      	ldr	r3, [pc, #92]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	43db      	mvns	r3, r3
 80030e0:	4915      	ldr	r1, [pc, #84]	; (8003138 <HAL_GPIO_Init+0x2b0>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	3301      	adds	r3, #1
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f47f aed0 	bne.w	8002e9c <HAL_GPIO_Init+0x14>
  }
}
 80030fc:	bf00      	nop
 80030fe:	372c      	adds	r7, #44	; 0x2c
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	10210000 	.word	0x10210000
 800310c:	10110000 	.word	0x10110000
 8003110:	10120000 	.word	0x10120000
 8003114:	10310000 	.word	0x10310000
 8003118:	10320000 	.word	0x10320000
 800311c:	10220000 	.word	0x10220000
 8003120:	40021000 	.word	0x40021000
 8003124:	40010000 	.word	0x40010000
 8003128:	40010800 	.word	0x40010800
 800312c:	40010c00 	.word	0x40010c00
 8003130:	40011000 	.word	0x40011000
 8003134:	40011400 	.word	0x40011400
 8003138:	40010400 	.word	0x40010400

0800313c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	887b      	ldrh	r3, [r7, #2]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e001      	b.n	800315e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	807b      	strh	r3, [r7, #2]
 8003176:	4613      	mov	r3, r2
 8003178:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800317a:	787b      	ldrb	r3, [r7, #1]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003180:	887a      	ldrh	r2, [r7, #2]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003186:	e003      	b.n	8003190 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003188:	887b      	ldrh	r3, [r7, #2]
 800318a:	041a      	lsls	r2, r3, #16
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	611a      	str	r2, [r3, #16]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800319a:	b480      	push	{r7}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031ac:	887a      	ldrh	r2, [r7, #2]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4013      	ands	r3, r2
 80031b2:	041a      	lsls	r2, r3, #16
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	400b      	ands	r3, r1
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	611a      	str	r2, [r3, #16]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e11f      	b.n	800341e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fe f8e2 	bl	80013bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2224      	movs	r2, #36	; 0x24
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800321e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800322e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003230:	f000 fcda 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 8003234:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4a7b      	ldr	r2, [pc, #492]	; (8003428 <HAL_I2C_Init+0x25c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d807      	bhi.n	8003250 <HAL_I2C_Init+0x84>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4a7a      	ldr	r2, [pc, #488]	; (800342c <HAL_I2C_Init+0x260>)
 8003244:	4293      	cmp	r3, r2
 8003246:	bf94      	ite	ls
 8003248:	2301      	movls	r3, #1
 800324a:	2300      	movhi	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	e006      	b.n	800325e <HAL_I2C_Init+0x92>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4a77      	ldr	r2, [pc, #476]	; (8003430 <HAL_I2C_Init+0x264>)
 8003254:	4293      	cmp	r3, r2
 8003256:	bf94      	ite	ls
 8003258:	2301      	movls	r3, #1
 800325a:	2300      	movhi	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0db      	b.n	800341e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4a72      	ldr	r2, [pc, #456]	; (8003434 <HAL_I2C_Init+0x268>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0c9b      	lsrs	r3, r3, #18
 8003270:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4a64      	ldr	r2, [pc, #400]	; (8003428 <HAL_I2C_Init+0x25c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d802      	bhi.n	80032a0 <HAL_I2C_Init+0xd4>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3301      	adds	r3, #1
 800329e:	e009      	b.n	80032b4 <HAL_I2C_Init+0xe8>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	4a63      	ldr	r2, [pc, #396]	; (8003438 <HAL_I2C_Init+0x26c>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	099b      	lsrs	r3, r3, #6
 80032b2:	3301      	adds	r3, #1
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	430b      	orrs	r3, r1
 80032ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4956      	ldr	r1, [pc, #344]	; (8003428 <HAL_I2C_Init+0x25c>)
 80032d0:	428b      	cmp	r3, r1
 80032d2:	d80d      	bhi.n	80032f0 <HAL_I2C_Init+0x124>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1e59      	subs	r1, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	bf38      	it	cc
 80032ec:	2304      	movcc	r3, #4
 80032ee:	e04f      	b.n	8003390 <HAL_I2C_Init+0x1c4>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d111      	bne.n	800331c <HAL_I2C_Init+0x150>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e58      	subs	r0, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	440b      	add	r3, r1
 8003306:	fbb0 f3f3 	udiv	r3, r0, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e012      	b.n	8003342 <HAL_I2C_Init+0x176>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1e58      	subs	r0, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	0099      	lsls	r1, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003332:	3301      	adds	r3, #1
 8003334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Init+0x17e>
 8003346:	2301      	movs	r3, #1
 8003348:	e022      	b.n	8003390 <HAL_I2C_Init+0x1c4>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10e      	bne.n	8003370 <HAL_I2C_Init+0x1a4>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e58      	subs	r0, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	440b      	add	r3, r1
 8003360:	fbb0 f3f3 	udiv	r3, r0, r3
 8003364:	3301      	adds	r3, #1
 8003366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336e:	e00f      	b.n	8003390 <HAL_I2C_Init+0x1c4>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e58      	subs	r0, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	0099      	lsls	r1, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	6809      	ldr	r1, [r1, #0]
 8003394:	4313      	orrs	r3, r2
 8003396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6911      	ldr	r1, [r2, #16]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68d2      	ldr	r2, [r2, #12]
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	000186a0 	.word	0x000186a0
 800342c:	001e847f 	.word	0x001e847f
 8003430:	003d08ff 	.word	0x003d08ff
 8003434:	431bde83 	.word	0x431bde83
 8003438:	10624dd3 	.word	0x10624dd3

0800343c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e26c      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8087 	beq.w	800356a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800345c:	4b92      	ldr	r3, [pc, #584]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b04      	cmp	r3, #4
 8003466:	d00c      	beq.n	8003482 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003468:	4b8f      	ldr	r3, [pc, #572]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d112      	bne.n	800349a <HAL_RCC_OscConfig+0x5e>
 8003474:	4b8c      	ldr	r3, [pc, #560]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003480:	d10b      	bne.n	800349a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003482:	4b89      	ldr	r3, [pc, #548]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d06c      	beq.n	8003568 <HAL_RCC_OscConfig+0x12c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d168      	bne.n	8003568 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e246      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a2:	d106      	bne.n	80034b2 <HAL_RCC_OscConfig+0x76>
 80034a4:	4b80      	ldr	r3, [pc, #512]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a7f      	ldr	r2, [pc, #508]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	e02e      	b.n	8003510 <HAL_RCC_OscConfig+0xd4>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x98>
 80034ba:	4b7b      	ldr	r3, [pc, #492]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7a      	ldr	r2, [pc, #488]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b78      	ldr	r3, [pc, #480]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a77      	ldr	r2, [pc, #476]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e01d      	b.n	8003510 <HAL_RCC_OscConfig+0xd4>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0xbc>
 80034de:	4b72      	ldr	r3, [pc, #456]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a71      	ldr	r2, [pc, #452]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	4b6f      	ldr	r3, [pc, #444]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a6e      	ldr	r2, [pc, #440]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e00b      	b.n	8003510 <HAL_RCC_OscConfig+0xd4>
 80034f8:	4b6b      	ldr	r3, [pc, #428]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a6a      	ldr	r2, [pc, #424]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a67      	ldr	r2, [pc, #412]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800350a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800350e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d013      	beq.n	8003540 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe f8b6 	bl	8001688 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003520:	f7fe f8b2 	bl	8001688 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e1fa      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	4b5d      	ldr	r3, [pc, #372]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0xe4>
 800353e:	e014      	b.n	800356a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe f8a2 	bl	8001688 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003548:	f7fe f89e 	bl	8001688 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	; 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e1e6      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x10c>
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d063      	beq.n	800363e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003576:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003582:	4b49      	ldr	r3, [pc, #292]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b08      	cmp	r3, #8
 800358c:	d11c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x18c>
 800358e:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d116      	bne.n	80035c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359a:	4b43      	ldr	r3, [pc, #268]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <HAL_RCC_OscConfig+0x176>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d001      	beq.n	80035b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e1ba      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b2:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4939      	ldr	r1, [pc, #228]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	e03a      	b.n	800363e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d020      	beq.n	8003612 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d0:	4b36      	ldr	r3, [pc, #216]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d6:	f7fe f857 	bl	8001688 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035de:	f7fe f853 	bl	8001688 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e19b      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f0:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fc:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4927      	ldr	r1, [pc, #156]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]
 8003610:	e015      	b.n	800363e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003612:	4b26      	ldr	r3, [pc, #152]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fe f836 	bl	8001688 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003620:	f7fe f832 	bl	8001688 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e17a      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d03a      	beq.n	80036c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d019      	beq.n	8003686 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003652:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003658:	f7fe f816 	bl	8001688 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003660:	f7fe f812 	bl	8001688 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e15a      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800367e:	2001      	movs	r0, #1
 8003680:	f000 fac6 	bl	8003c10 <RCC_Delay>
 8003684:	e01c      	b.n	80036c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368c:	f7fd fffc 	bl	8001688 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003692:	e00f      	b.n	80036b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003694:	f7fd fff8 	bl	8001688 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d908      	bls.n	80036b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e140      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
 80036ac:	42420000 	.word	0x42420000
 80036b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b4:	4b9e      	ldr	r3, [pc, #632]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e9      	bne.n	8003694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80a6 	beq.w	800381a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d2:	4b97      	ldr	r3, [pc, #604]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	4b94      	ldr	r3, [pc, #592]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	4a93      	ldr	r2, [pc, #588]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e8:	61d3      	str	r3, [r2, #28]
 80036ea:	4b91      	ldr	r3, [pc, #580]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fa:	4b8e      	ldr	r3, [pc, #568]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d118      	bne.n	8003738 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003706:	4b8b      	ldr	r3, [pc, #556]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a8a      	ldr	r2, [pc, #552]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 800370c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003712:	f7fd ffb9 	bl	8001688 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371a:	f7fd ffb5 	bl	8001688 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b64      	cmp	r3, #100	; 0x64
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e0fd      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372c:	4b81      	ldr	r3, [pc, #516]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d106      	bne.n	800374e <HAL_RCC_OscConfig+0x312>
 8003740:	4b7b      	ldr	r3, [pc, #492]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4a7a      	ldr	r2, [pc, #488]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6213      	str	r3, [r2, #32]
 800374c:	e02d      	b.n	80037aa <HAL_RCC_OscConfig+0x36e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0x334>
 8003756:	4b76      	ldr	r3, [pc, #472]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	4a75      	ldr	r2, [pc, #468]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6213      	str	r3, [r2, #32]
 8003762:	4b73      	ldr	r3, [pc, #460]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4a72      	ldr	r2, [pc, #456]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003768:	f023 0304 	bic.w	r3, r3, #4
 800376c:	6213      	str	r3, [r2, #32]
 800376e:	e01c      	b.n	80037aa <HAL_RCC_OscConfig+0x36e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b05      	cmp	r3, #5
 8003776:	d10c      	bne.n	8003792 <HAL_RCC_OscConfig+0x356>
 8003778:	4b6d      	ldr	r3, [pc, #436]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4a6c      	ldr	r2, [pc, #432]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	6213      	str	r3, [r2, #32]
 8003784:	4b6a      	ldr	r3, [pc, #424]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4a69      	ldr	r2, [pc, #420]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6213      	str	r3, [r2, #32]
 8003790:	e00b      	b.n	80037aa <HAL_RCC_OscConfig+0x36e>
 8003792:	4b67      	ldr	r3, [pc, #412]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	4a66      	ldr	r2, [pc, #408]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	6213      	str	r3, [r2, #32]
 800379e:	4b64      	ldr	r3, [pc, #400]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4a63      	ldr	r2, [pc, #396]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80037a4:	f023 0304 	bic.w	r3, r3, #4
 80037a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d015      	beq.n	80037de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b2:	f7fd ff69 	bl	8001688 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ba:	f7fd ff65 	bl	8001688 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e0ab      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d0:	4b57      	ldr	r3, [pc, #348]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ee      	beq.n	80037ba <HAL_RCC_OscConfig+0x37e>
 80037dc:	e014      	b.n	8003808 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037de:	f7fd ff53 	bl	8001688 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fd ff4f 	bl	8001688 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e095      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fc:	4b4c      	ldr	r3, [pc, #304]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1ee      	bne.n	80037e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d105      	bne.n	800381a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380e:	4b48      	ldr	r3, [pc, #288]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	4a47      	ldr	r2, [pc, #284]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003818:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8081 	beq.w	8003926 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003824:	4b42      	ldr	r3, [pc, #264]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	2b08      	cmp	r3, #8
 800382e:	d061      	beq.n	80038f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d146      	bne.n	80038c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003838:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_RCC_OscConfig+0x4fc>)
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7fd ff23 	bl	8001688 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003846:	f7fd ff1f 	bl	8001688 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e067      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003858:	4b35      	ldr	r3, [pc, #212]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f0      	bne.n	8003846 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386c:	d108      	bne.n	8003880 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800386e:	4b30      	ldr	r3, [pc, #192]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	492d      	ldr	r1, [pc, #180]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003880:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a19      	ldr	r1, [r3, #32]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	430b      	orrs	r3, r1
 8003892:	4927      	ldr	r1, [pc, #156]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003898:	4b27      	ldr	r3, [pc, #156]	; (8003938 <HAL_RCC_OscConfig+0x4fc>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389e:	f7fd fef3 	bl	8001688 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a6:	f7fd feef 	bl	8001688 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e037      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x46a>
 80038c4:	e02f      	b.n	8003926 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c6:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <HAL_RCC_OscConfig+0x4fc>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7fd fedc 	bl	8001688 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fd fed8 	bl	8001688 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e020      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x498>
 80038f2:	e018      	b.n	8003926 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e013      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	429a      	cmp	r2, r3
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d001      	beq.n	8003926 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
 8003938:	42420060 	.word	0x42420060

0800393c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0d0      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003950:	4b6a      	ldr	r3, [pc, #424]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d910      	bls.n	8003980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b67      	ldr	r3, [pc, #412]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 0207 	bic.w	r2, r3, #7
 8003966:	4965      	ldr	r1, [pc, #404]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b63      	ldr	r3, [pc, #396]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0b8      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d020      	beq.n	80039ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003998:	4b59      	ldr	r3, [pc, #356]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a58      	ldr	r2, [pc, #352]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039b0:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4a52      	ldr	r2, [pc, #328]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039bc:	4b50      	ldr	r3, [pc, #320]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	494d      	ldr	r1, [pc, #308]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d040      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	4b47      	ldr	r3, [pc, #284]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d115      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e07f      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fa:	4b41      	ldr	r3, [pc, #260]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e073      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0a:	4b3d      	ldr	r3, [pc, #244]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e06b      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1a:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f023 0203 	bic.w	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4936      	ldr	r1, [pc, #216]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a2c:	f7fd fe2c 	bl	8001688 <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a34:	f7fd fe28 	bl	8001688 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e053      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 020c 	and.w	r2, r3, #12
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d1eb      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b27      	ldr	r3, [pc, #156]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d210      	bcs.n	8003a8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6a:	4b24      	ldr	r3, [pc, #144]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 0207 	bic.w	r2, r3, #7
 8003a72:	4922      	ldr	r1, [pc, #136]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b20      	ldr	r3, [pc, #128]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e032      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4916      	ldr	r1, [pc, #88]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ab6:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	490e      	ldr	r1, [pc, #56]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aca:	f000 f821 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8003ace:	4601      	mov	r1, r0
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	4a0a      	ldr	r2, [pc, #40]	; (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003adc:	5cd3      	ldrb	r3, [r2, r3]
 8003ade:	fa21 f303 	lsr.w	r3, r1, r3
 8003ae2:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <HAL_RCC_ClockConfig+0x1cc>)
 8003ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ae6:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_ClockConfig+0x1d0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd fd8a 	bl	8001604 <HAL_InitTick>

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40022000 	.word	0x40022000
 8003b00:	40021000 	.word	0x40021000
 8003b04:	08006a9c 	.word	0x08006a9c
 8003b08:	20000000 	.word	0x20000000
 8003b0c:	20000004 	.word	0x20000004

08003b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b10:	b490      	push	{r4, r7}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b16:	4b2a      	ldr	r3, [pc, #168]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b18:	1d3c      	adds	r4, r7, #4
 8003b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b20:	4b28      	ldr	r3, [pc, #160]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b3a:	4b23      	ldr	r3, [pc, #140]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d002      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x40>
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d003      	beq.n	8003b56 <HAL_RCC_GetSysClockFreq+0x46>
 8003b4e:	e02d      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b50:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b52:	623b      	str	r3, [r7, #32]
      break;
 8003b54:	e02d      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	0c9b      	lsrs	r3, r3, #18
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b62:	4413      	add	r3, r2
 8003b64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b68:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d013      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	0c5b      	lsrs	r3, r3, #17
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b82:	4413      	add	r3, r2
 8003b84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	4a0f      	ldr	r2, [pc, #60]	; (8003bcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b8e:	fb02 f203 	mul.w	r2, r2, r3
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9a:	e004      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4a0c      	ldr	r2, [pc, #48]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	623b      	str	r3, [r7, #32]
      break;
 8003baa:	e002      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bac:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bae:	623b      	str	r3, [r7, #32]
      break;
 8003bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3728      	adds	r7, #40	; 0x28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc90      	pop	{r4, r7}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	08006a80 	.word	0x08006a80
 8003bc4:	08006a90 	.word	0x08006a90
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	007a1200 	.word	0x007a1200
 8003bd0:	003d0900 	.word	0x003d0900

08003bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd8:	4b02      	ldr	r3, [pc, #8]	; (8003be4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr
 8003be4:	20000000 	.word	0x20000000

08003be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bec:	f7ff fff2 	bl	8003bd4 <HAL_RCC_GetHCLKFreq>
 8003bf0:	4601      	mov	r1, r0
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	0a1b      	lsrs	r3, r3, #8
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	4a03      	ldr	r2, [pc, #12]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfe:	5cd3      	ldrb	r3, [r2, r3]
 8003c00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	08006aac 	.word	0x08006aac

08003c10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <RCC_Delay+0x34>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <RCC_Delay+0x38>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	0a5b      	lsrs	r3, r3, #9
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c2c:	bf00      	nop
  }
  while (Delay --);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1e5a      	subs	r2, r3, #1
 8003c32:	60fa      	str	r2, [r7, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f9      	bne.n	8003c2c <RCC_Delay+0x1c>
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000000 	.word	0x20000000
 8003c48:	10624dd3 	.word	0x10624dd3

08003c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d07d      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c6c:	4b4f      	ldr	r3, [pc, #316]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10d      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c78:	4b4c      	ldr	r3, [pc, #304]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	4a4b      	ldr	r2, [pc, #300]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c82:	61d3      	str	r3, [r2, #28]
 8003c84:	4b49      	ldr	r3, [pc, #292]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c90:	2301      	movs	r3, #1
 8003c92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d118      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ca0:	4b43      	ldr	r3, [pc, #268]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a42      	ldr	r2, [pc, #264]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003caa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cac:	f7fd fcec 	bl	8001688 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb4:	f7fd fce8 	bl	8001688 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e06d      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b3a      	ldr	r3, [pc, #232]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cd2:	4b36      	ldr	r3, [pc, #216]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d02e      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d027      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cf0:	4b2e      	ldr	r3, [pc, #184]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cfa:	4b2e      	ldr	r3, [pc, #184]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d00:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d06:	4a29      	ldr	r2, [pc, #164]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d014      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d16:	f7fd fcb7 	bl	8001688 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f7fd fcb3 	bl	8001688 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e036      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d34:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ee      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d40:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	4917      	ldr	r1, [pc, #92]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d105      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d58:	4b14      	ldr	r3, [pc, #80]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	4a13      	ldr	r2, [pc, #76]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d70:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	490b      	ldr	r1, [pc, #44]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	4904      	ldr	r1, [pc, #16]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40007000 	.word	0x40007000
 8003db4:	42420440 	.word	0x42420440

08003db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e041      	b.n	8003e4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd fb2a 	bl	8001438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f000 fa1a 	bl	8004230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d122      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d11b      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f06f 0202 	mvn.w	r2, #2
 8003e82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f9ad 	bl	80041f8 <HAL_TIM_IC_CaptureCallback>
 8003e9e:	e005      	b.n	8003eac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f9a0 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9af 	bl	800420a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d122      	bne.n	8003f06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d11b      	bne.n	8003f06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f06f 0204 	mvn.w	r2, #4
 8003ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f983 	bl	80041f8 <HAL_TIM_IC_CaptureCallback>
 8003ef2:	e005      	b.n	8003f00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f976 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f985 	bl	800420a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d122      	bne.n	8003f5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d11b      	bne.n	8003f5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f06f 0208 	mvn.w	r2, #8
 8003f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2204      	movs	r2, #4
 8003f30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f959 	bl	80041f8 <HAL_TIM_IC_CaptureCallback>
 8003f46:	e005      	b.n	8003f54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f94c 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f95b 	bl	800420a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d122      	bne.n	8003fae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b10      	cmp	r3, #16
 8003f74:	d11b      	bne.n	8003fae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f06f 0210 	mvn.w	r2, #16
 8003f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2208      	movs	r2, #8
 8003f84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f92f 	bl	80041f8 <HAL_TIM_IC_CaptureCallback>
 8003f9a:	e005      	b.n	8003fa8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f922 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f931 	bl	800420a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10e      	bne.n	8003fda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d107      	bne.n	8003fda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f06f 0201 	mvn.w	r2, #1
 8003fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f8fd 	bl	80041d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe4:	2b80      	cmp	r3, #128	; 0x80
 8003fe6:	d10e      	bne.n	8004006 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b80      	cmp	r3, #128	; 0x80
 8003ff4:	d107      	bne.n	8004006 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fa74 	bl	80044ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d10e      	bne.n	8004032 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b40      	cmp	r3, #64	; 0x40
 8004020:	d107      	bne.n	8004032 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800402a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f8f5 	bl	800421c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b20      	cmp	r3, #32
 800403e:	d10e      	bne.n	800405e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b20      	cmp	r3, #32
 800404c:	d107      	bne.n	800405e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f06f 0220 	mvn.w	r2, #32
 8004056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fa3f 	bl	80044dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_TIM_ConfigClockSource+0x18>
 800407a:	2302      	movs	r3, #2
 800407c:	e0a6      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x166>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2202      	movs	r2, #2
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800409c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040a4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d067      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x120>
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d80b      	bhi.n	80040d2 <HAL_TIM_ConfigClockSource+0x6c>
 80040ba:	2b10      	cmp	r3, #16
 80040bc:	d073      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x140>
 80040be:	2b10      	cmp	r3, #16
 80040c0:	d802      	bhi.n	80040c8 <HAL_TIM_ConfigClockSource+0x62>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d06f      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80040c6:	e078      	b.n	80041ba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	d06c      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x140>
 80040cc:	2b30      	cmp	r3, #48	; 0x30
 80040ce:	d06a      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80040d0:	e073      	b.n	80041ba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040d2:	2b70      	cmp	r3, #112	; 0x70
 80040d4:	d00d      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0x8c>
 80040d6:	2b70      	cmp	r3, #112	; 0x70
 80040d8:	d804      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x7e>
 80040da:	2b50      	cmp	r3, #80	; 0x50
 80040dc:	d033      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0xe0>
 80040de:	2b60      	cmp	r3, #96	; 0x60
 80040e0:	d041      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80040e2:	e06a      	b.n	80041ba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e8:	d066      	beq.n	80041b8 <HAL_TIM_ConfigClockSource+0x152>
 80040ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ee:	d017      	beq.n	8004120 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80040f0:	e063      	b.n	80041ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6899      	ldr	r1, [r3, #8]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f000 f96e 	bl	80043e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004114:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	609a      	str	r2, [r3, #8]
      break;
 800411e:	e04c      	b.n	80041ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6899      	ldr	r1, [r3, #8]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f000 f957 	bl	80043e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004142:	609a      	str	r2, [r3, #8]
      break;
 8004144:	e039      	b.n	80041ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6859      	ldr	r1, [r3, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	461a      	mov	r2, r3
 8004154:	f000 f8ce 	bl	80042f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2150      	movs	r1, #80	; 0x50
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f925 	bl	80043ae <TIM_ITRx_SetConfig>
      break;
 8004164:	e029      	b.n	80041ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6859      	ldr	r1, [r3, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	461a      	mov	r2, r3
 8004174:	f000 f8ec 	bl	8004350 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2160      	movs	r1, #96	; 0x60
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f915 	bl	80043ae <TIM_ITRx_SetConfig>
      break;
 8004184:	e019      	b.n	80041ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6859      	ldr	r1, [r3, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	461a      	mov	r2, r3
 8004194:	f000 f8ae 	bl	80042f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2140      	movs	r1, #64	; 0x40
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f905 	bl	80043ae <TIM_ITRx_SetConfig>
      break;
 80041a4:	e009      	b.n	80041ba <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4619      	mov	r1, r3
 80041b0:	4610      	mov	r0, r2
 80041b2:	f000 f8fc 	bl	80043ae <TIM_ITRx_SetConfig>
        break;
 80041b6:	e000      	b.n	80041ba <HAL_TIM_ConfigClockSource+0x154>
      break;
 80041b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr

0800420a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
	...

08004230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a29      	ldr	r2, [pc, #164]	; (80042e8 <TIM_Base_SetConfig+0xb8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00b      	beq.n	8004260 <TIM_Base_SetConfig+0x30>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d007      	beq.n	8004260 <TIM_Base_SetConfig+0x30>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a26      	ldr	r2, [pc, #152]	; (80042ec <TIM_Base_SetConfig+0xbc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0x30>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a25      	ldr	r2, [pc, #148]	; (80042f0 <TIM_Base_SetConfig+0xc0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d108      	bne.n	8004272 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1c      	ldr	r2, [pc, #112]	; (80042e8 <TIM_Base_SetConfig+0xb8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d007      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a19      	ldr	r2, [pc, #100]	; (80042ec <TIM_Base_SetConfig+0xbc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <TIM_Base_SetConfig+0xc0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a07      	ldr	r2, [pc, #28]	; (80042e8 <TIM_Base_SetConfig+0xb8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d103      	bne.n	80042d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	615a      	str	r2, [r3, #20]
}
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40000800 	.word	0x40000800

080042f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f023 0201 	bic.w	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800431e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f023 030a 	bic.w	r3, r3, #10
 8004330:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f023 0210 	bic.w	r2, r3, #16
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800437a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	031b      	lsls	r3, r3, #12
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800438c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	621a      	str	r2, [r3, #32]
}
 80043a4:	bf00      	nop
 80043a6:	371c      	adds	r7, #28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f043 0307 	orr.w	r3, r3, #7
 80043d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	609a      	str	r2, [r3, #8]
}
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b087      	sub	sp, #28
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	021a      	lsls	r2, r3, #8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	431a      	orrs	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4313      	orrs	r3, r2
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	609a      	str	r2, [r3, #8]
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004434:	2302      	movs	r3, #2
 8004436:	e046      	b.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d009      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a10      	ldr	r2, [pc, #64]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d10c      	bne.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800

080044dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr

080044ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800450e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004512:	2b84      	cmp	r3, #132	; 0x84
 8004514:	d005      	beq.n	8004522 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004516:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	3303      	adds	r3, #3
 8004520:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004522:	68fb      	ldr	r3, [r7, #12]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr

0800452e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004534:	f3ef 8305 	mrs	r3, IPSR
 8004538:	607b      	str	r3, [r7, #4]
  return(result);
 800453a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800453c:	2b00      	cmp	r3, #0
 800453e:	bf14      	ite	ne
 8004540:	2301      	movne	r3, #1
 8004542:	2300      	moveq	r3, #0
 8004544:	b2db      	uxtb	r3, r3
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004554:	f001 f8d8 	bl	8005708 <vTaskStartScheduler>
  
  return osOK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	bd80      	pop	{r7, pc}

0800455e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800455e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004560:	b089      	sub	sp, #36	; 0x24
 8004562:	af04      	add	r7, sp, #16
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d020      	beq.n	80045b2 <osThreadCreate+0x54>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01c      	beq.n	80045b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685c      	ldr	r4, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681d      	ldr	r5, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691e      	ldr	r6, [r3, #16]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff ffb8 	bl	8004500 <makeFreeRtosPriority>
 8004590:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800459a:	9202      	str	r2, [sp, #8]
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	9100      	str	r1, [sp, #0]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	4632      	mov	r2, r6
 80045a4:	4629      	mov	r1, r5
 80045a6:	4620      	mov	r0, r4
 80045a8:	f000 fef3 	bl	8005392 <xTaskCreateStatic>
 80045ac:	4603      	mov	r3, r0
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e01c      	b.n	80045ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685c      	ldr	r4, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045be:	b29e      	uxth	r6, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff ff9a 	bl	8004500 <makeFreeRtosPriority>
 80045cc:	4602      	mov	r2, r0
 80045ce:	f107 030c 	add.w	r3, r7, #12
 80045d2:	9301      	str	r3, [sp, #4]
 80045d4:	9200      	str	r2, [sp, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	4632      	mov	r2, r6
 80045da:	4629      	mov	r1, r5
 80045dc:	4620      	mov	r0, r4
 80045de:	f000 ff31 	bl	8005444 <xTaskCreate>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d001      	beq.n	80045ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045ec:	68fb      	ldr	r3, [r7, #12]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <osDelay+0x16>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	e000      	b.n	800460e <osDelay+0x18>
 800460c:	2301      	movs	r3, #1
 800460e:	4618      	mov	r0, r3
 8004610:	f001 f846 	bl	80056a0 <vTaskDelay>
  
  return osOK;
 8004614:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800461e:	b590      	push	{r4, r7, lr}
 8004620:	b085      	sub	sp, #20
 8004622:	af02      	add	r7, sp, #8
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d012      	beq.n	8004656 <osMessageCreate+0x38>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00e      	beq.n	8004656 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6859      	ldr	r1, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68dc      	ldr	r4, [r3, #12]
 8004648:	2300      	movs	r3, #0
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	4623      	mov	r3, r4
 800464e:	f000 f9db 	bl	8004a08 <xQueueGenericCreateStatic>
 8004652:	4603      	mov	r3, r0
 8004654:	e008      	b.n	8004668 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	4619      	mov	r1, r3
 8004662:	f000 fa43 	bl	8004aec <xQueueGenericCreate>
 8004666:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bd90      	pop	{r4, r7, pc}

08004670 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <osMessagePut+0x1e>
    ticks = 1;
 800468a:	2301      	movs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800468e:	f7ff ff4e 	bl	800452e <inHandlerMode>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d018      	beq.n	80046ca <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004698:	f107 0210 	add.w	r2, r7, #16
 800469c:	f107 0108 	add.w	r1, r7, #8
 80046a0:	2300      	movs	r3, #0
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 fb78 	bl	8004d98 <xQueueGenericSendFromISR>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d001      	beq.n	80046b2 <osMessagePut+0x42>
      return osErrorOS;
 80046ae:	23ff      	movs	r3, #255	; 0xff
 80046b0:	e018      	b.n	80046e4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d014      	beq.n	80046e2 <osMessagePut+0x72>
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <osMessagePut+0x7c>)
 80046ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	e00b      	b.n	80046e2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80046ca:	f107 0108 	add.w	r1, r7, #8
 80046ce:	2300      	movs	r3, #0
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fa66 	bl	8004ba4 <xQueueGenericSend>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d001      	beq.n	80046e2 <osMessagePut+0x72>
      return osErrorOS;
 80046de:	23ff      	movs	r3, #255	; 0xff
 80046e0:	e000      	b.n	80046e4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	e000ed04 	.word	0xe000ed04

080046f0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80046f0:	b590      	push	{r4, r7, lr}
 80046f2:	b08b      	sub	sp, #44	; 0x2c
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	617b      	str	r3, [r7, #20]
    return event;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	461c      	mov	r4, r3
 8004712:	f107 0314 	add.w	r3, r7, #20
 8004716:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800471a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800471e:	e054      	b.n	80047ca <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004720:	2300      	movs	r3, #0
 8004722:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	d103      	bne.n	8004738 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004730:	f04f 33ff 	mov.w	r3, #4294967295
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
 8004736:	e009      	b.n	800474c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d006      	beq.n	800474c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <osMessageGet+0x5c>
      ticks = 1;
 8004748:	2301      	movs	r3, #1
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800474c:	f7ff feef 	bl	800452e <inHandlerMode>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01c      	beq.n	8004790 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004756:	f107 0220 	add.w	r2, r7, #32
 800475a:	f107 0314 	add.w	r3, r7, #20
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	68b8      	ldr	r0, [r7, #8]
 8004764:	f000 fc88 	bl	8005078 <xQueueReceiveFromISR>
 8004768:	4603      	mov	r3, r0
 800476a:	2b01      	cmp	r3, #1
 800476c:	d102      	bne.n	8004774 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800476e:	2310      	movs	r3, #16
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	e001      	b.n	8004778 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01d      	beq.n	80047ba <osMessageGet+0xca>
 800477e:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <osMessageGet+0xe4>)
 8004780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	e014      	b.n	80047ba <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004790:	f107 0314 	add.w	r3, r7, #20
 8004794:	3304      	adds	r3, #4
 8004796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004798:	4619      	mov	r1, r3
 800479a:	68b8      	ldr	r0, [r7, #8]
 800479c:	f000 fb90 	bl	8004ec0 <xQueueReceive>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d102      	bne.n	80047ac <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80047a6:	2310      	movs	r3, #16
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e006      	b.n	80047ba <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <osMessageGet+0xc6>
 80047b2:	2300      	movs	r3, #0
 80047b4:	e000      	b.n	80047b8 <osMessageGet+0xc8>
 80047b6:	2340      	movs	r3, #64	; 0x40
 80047b8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	461c      	mov	r4, r3
 80047be:	f107 0314 	add.w	r3, r7, #20
 80047c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	372c      	adds	r7, #44	; 0x2c
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd90      	pop	{r4, r7, pc}
 80047d2:	bf00      	nop
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f103 0208 	add.w	r2, r3, #8
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f04f 32ff 	mov.w	r2, #4294967295
 80047f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f103 0208 	add.w	r2, r3, #8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f103 0208 	add.w	r2, r3, #8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr

0800482e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	601a      	str	r2, [r3, #0]
}
 800486a:	bf00      	nop
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr

08004874 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d103      	bne.n	8004894 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	e00c      	b.n	80048ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3308      	adds	r3, #8
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	e002      	b.n	80048a2 <vListInsert+0x2e>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d2f6      	bcs.n	800489c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	601a      	str	r2, [r3, #0]
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6892      	ldr	r2, [r2, #8]
 80048fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6852      	ldr	r2, [r2, #4]
 8004904:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	d103      	bne.n	8004918 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	1e5a      	subs	r2, r3, #1
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr
	...

08004938 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d109      	bne.n	8004960 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	e7fe      	b.n	800495e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004960:	f001 fcc2 	bl	80062e8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496c:	68f9      	ldr	r1, [r7, #12]
 800496e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	441a      	add	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	3b01      	subs	r3, #1
 8004992:	68f9      	ldr	r1, [r7, #12]
 8004994:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004996:	fb01 f303 	mul.w	r3, r1, r3
 800499a:	441a      	add	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	22ff      	movs	r2, #255	; 0xff
 80049a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	22ff      	movs	r2, #255	; 0xff
 80049ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d114      	bne.n	80049e0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01a      	beq.n	80049f4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3310      	adds	r3, #16
 80049c2:	4618      	mov	r0, r3
 80049c4:	f001 f8e2 	bl	8005b8c <xTaskRemoveFromEventList>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d012      	beq.n	80049f4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <xQueueGenericReset+0xcc>)
 80049d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	e009      	b.n	80049f4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3310      	adds	r3, #16
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fef7 	bl	80047d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3324      	adds	r3, #36	; 0x24
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fef2 	bl	80047d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049f4:	f001 fca6 	bl	8006344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049f8:	2301      	movs	r3, #1
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	e000ed04 	.word	0xe000ed04

08004a08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08e      	sub	sp, #56	; 0x38
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <xQueueGenericCreateStatic+0x28>
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2e:	e7fe      	b.n	8004a2e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <xQueueGenericCreateStatic+0x42>
 8004a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
 8004a48:	e7fe      	b.n	8004a48 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <xQueueGenericCreateStatic+0x4e>
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <xQueueGenericCreateStatic+0x52>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <xQueueGenericCreateStatic+0x54>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d109      	bne.n	8004a74 <xQueueGenericCreateStatic+0x6c>
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	623b      	str	r3, [r7, #32]
 8004a72:	e7fe      	b.n	8004a72 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d102      	bne.n	8004a80 <xQueueGenericCreateStatic+0x78>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <xQueueGenericCreateStatic+0x7c>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <xQueueGenericCreateStatic+0x7e>
 8004a84:	2300      	movs	r3, #0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <xQueueGenericCreateStatic+0x96>
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	61fb      	str	r3, [r7, #28]
 8004a9c:	e7fe      	b.n	8004a9c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a9e:	2348      	movs	r3, #72	; 0x48
 8004aa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b48      	cmp	r3, #72	; 0x48
 8004aa6:	d009      	beq.n	8004abc <xQueueGenericCreateStatic+0xb4>
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	e7fe      	b.n	8004aba <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ace:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f842 	bl	8004b66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3730      	adds	r7, #48	; 0x30
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d109      	bne.n	8004b14 <xQueueGenericCreate+0x28>
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	e7fe      	b.n	8004b12 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d102      	bne.n	8004b20 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	e004      	b.n	8004b2a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	fb02 f303 	mul.w	r3, r2, r3
 8004b28:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	3348      	adds	r3, #72	; 0x48
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f001 fcd0 	bl	80064d4 <pvPortMalloc>
 8004b34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00f      	beq.n	8004b5c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	3348      	adds	r3, #72	; 0x48
 8004b40:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b4a:	79fa      	ldrb	r2, [r7, #7]
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f805 	bl	8004b66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
	}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3720      	adds	r7, #32
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d103      	bne.n	8004b82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	e002      	b.n	8004b88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b94:	2101      	movs	r1, #1
 8004b96:	69b8      	ldr	r0, [r7, #24]
 8004b98:	f7ff fece 	bl	8004938 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08e      	sub	sp, #56	; 0x38
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d109      	bne.n	8004bd4 <xQueueGenericSend+0x30>
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd2:	e7fe      	b.n	8004bd2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <xQueueGenericSend+0x3e>
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <xQueueGenericSend+0x42>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <xQueueGenericSend+0x44>
 8004be6:	2300      	movs	r3, #0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d109      	bne.n	8004c00 <xQueueGenericSend+0x5c>
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfe:	e7fe      	b.n	8004bfe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d103      	bne.n	8004c0e <xQueueGenericSend+0x6a>
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <xQueueGenericSend+0x6e>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <xQueueGenericSend+0x70>
 8004c12:	2300      	movs	r3, #0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d109      	bne.n	8004c2c <xQueueGenericSend+0x88>
 8004c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	623b      	str	r3, [r7, #32]
 8004c2a:	e7fe      	b.n	8004c2a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c2c:	f001 f968 	bl	8005f00 <xTaskGetSchedulerState>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d102      	bne.n	8004c3c <xQueueGenericSend+0x98>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <xQueueGenericSend+0x9c>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <xQueueGenericSend+0x9e>
 8004c40:	2300      	movs	r3, #0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <xQueueGenericSend+0xb6>
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	e7fe      	b.n	8004c58 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c5a:	f001 fb45 	bl	80062e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d302      	bcc.n	8004c70 <xQueueGenericSend+0xcc>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d129      	bne.n	8004cc4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c76:	f000 fa7c 	bl	8005172 <prvCopyDataToQueue>
 8004c7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d010      	beq.n	8004ca6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	3324      	adds	r3, #36	; 0x24
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 ff7f 	bl	8005b8c <xTaskRemoveFromEventList>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d013      	beq.n	8004cbc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c94:	4b3f      	ldr	r3, [pc, #252]	; (8004d94 <xQueueGenericSend+0x1f0>)
 8004c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	e00a      	b.n	8004cbc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004cac:	4b39      	ldr	r3, [pc, #228]	; (8004d94 <xQueueGenericSend+0x1f0>)
 8004cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cbc:	f001 fb42 	bl	8006344 <vPortExitCritical>
				return pdPASS;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e063      	b.n	8004d8c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cca:	f001 fb3b 	bl	8006344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e05c      	b.n	8004d8c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 ffb7 	bl	8005c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ce6:	f001 fb2d 	bl	8006344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cea:	f000 fd6b 	bl	80057c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cee:	f001 fafb 	bl	80062e8 <vPortEnterCritical>
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cf8:	b25b      	sxtb	r3, r3
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d103      	bne.n	8004d08 <xQueueGenericSend+0x164>
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d0e:	b25b      	sxtb	r3, r3
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d103      	bne.n	8004d1e <xQueueGenericSend+0x17a>
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d1e:	f001 fb11 	bl	8006344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d22:	1d3a      	adds	r2, r7, #4
 8004d24:	f107 0314 	add.w	r3, r7, #20
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 ffa6 	bl	8005c7c <xTaskCheckForTimeOut>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d124      	bne.n	8004d80 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d38:	f000 fb13 	bl	8005362 <prvIsQueueFull>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d018      	beq.n	8004d74 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	3310      	adds	r3, #16
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	4611      	mov	r1, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fefa 	bl	8005b44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d52:	f000 fa9e 	bl	8005292 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d56:	f000 fd43 	bl	80057e0 <xTaskResumeAll>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f47f af7c 	bne.w	8004c5a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004d62:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <xQueueGenericSend+0x1f0>)
 8004d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	e772      	b.n	8004c5a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d76:	f000 fa8c 	bl	8005292 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d7a:	f000 fd31 	bl	80057e0 <xTaskResumeAll>
 8004d7e:	e76c      	b.n	8004c5a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d82:	f000 fa86 	bl	8005292 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d86:	f000 fd2b 	bl	80057e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d8a:	2300      	movs	r3, #0
		}
	}
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3738      	adds	r7, #56	; 0x38
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	e000ed04 	.word	0xe000ed04

08004d98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08e      	sub	sp, #56	; 0x38
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <xQueueGenericSendFromISR+0x2c>
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc2:	e7fe      	b.n	8004dc2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <xQueueGenericSendFromISR+0x3a>
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <xQueueGenericSendFromISR+0x3e>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <xQueueGenericSendFromISR+0x40>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d109      	bne.n	8004df0 <xQueueGenericSendFromISR+0x58>
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	623b      	str	r3, [r7, #32]
 8004dee:	e7fe      	b.n	8004dee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d103      	bne.n	8004dfe <xQueueGenericSendFromISR+0x66>
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <xQueueGenericSendFromISR+0x6a>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <xQueueGenericSendFromISR+0x6c>
 8004e02:	2300      	movs	r3, #0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <xQueueGenericSendFromISR+0x84>
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	e7fe      	b.n	8004e1a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e1c:	f001 fb1e 	bl	800645c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e20:	f3ef 8211 	mrs	r2, BASEPRI
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	61ba      	str	r2, [r7, #24]
 8004e36:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e38:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d302      	bcc.n	8004e4e <xQueueGenericSendFromISR+0xb6>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d12c      	bne.n	8004ea8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e5e:	f000 f988 	bl	8005172 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e62:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d112      	bne.n	8004e92 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d016      	beq.n	8004ea2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	3324      	adds	r3, #36	; 0x24
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fe87 	bl	8005b8c <xTaskRemoveFromEventList>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00e      	beq.n	8004ea2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e007      	b.n	8004ea2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e96:	3301      	adds	r3, #1
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	b25a      	sxtb	r2, r3
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004ea6:	e001      	b.n	8004eac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3738      	adds	r7, #56	; 0x38
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08c      	sub	sp, #48	; 0x30
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <xQueueReceive+0x2e>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	623b      	str	r3, [r7, #32]
 8004eec:	e7fe      	b.n	8004eec <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d103      	bne.n	8004efc <xQueueReceive+0x3c>
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <xQueueReceive+0x40>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <xQueueReceive+0x42>
 8004f00:	2300      	movs	r3, #0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <xQueueReceive+0x5a>
 8004f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	e7fe      	b.n	8004f18 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f1a:	f000 fff1 	bl	8005f00 <xTaskGetSchedulerState>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <xQueueReceive+0x6a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <xQueueReceive+0x6e>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <xQueueReceive+0x70>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <xQueueReceive+0x88>
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	e7fe      	b.n	8004f46 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f48:	f001 f9ce 	bl	80062e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01f      	beq.n	8004f98 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f5c:	f000 f973 	bl	8005246 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	1e5a      	subs	r2, r3, #1
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00f      	beq.n	8004f90 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	3310      	adds	r3, #16
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fe09 	bl	8005b8c <xTaskRemoveFromEventList>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f80:	4b3c      	ldr	r3, [pc, #240]	; (8005074 <xQueueReceive+0x1b4>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f90:	f001 f9d8 	bl	8006344 <vPortExitCritical>
				return pdPASS;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e069      	b.n	800506c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f9e:	f001 f9d1 	bl	8006344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e062      	b.n	800506c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fac:	f107 0310 	add.w	r3, r7, #16
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fe4d 	bl	8005c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fba:	f001 f9c3 	bl	8006344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fbe:	f000 fc01 	bl	80057c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fc2:	f001 f991 	bl	80062e8 <vPortEnterCritical>
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fcc:	b25b      	sxtb	r3, r3
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d103      	bne.n	8004fdc <xQueueReceive+0x11c>
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe2:	b25b      	sxtb	r3, r3
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d103      	bne.n	8004ff2 <xQueueReceive+0x132>
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ff2:	f001 f9a7 	bl	8006344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ff6:	1d3a      	adds	r2, r7, #4
 8004ff8:	f107 0310 	add.w	r3, r7, #16
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fe3c 	bl	8005c7c <xTaskCheckForTimeOut>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d123      	bne.n	8005052 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800500a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800500c:	f000 f993 	bl	8005336 <prvIsQueueEmpty>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d017      	beq.n	8005046 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	3324      	adds	r3, #36	; 0x24
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4611      	mov	r1, r2
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fd90 	bl	8005b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005026:	f000 f934 	bl	8005292 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800502a:	f000 fbd9 	bl	80057e0 <xTaskResumeAll>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d189      	bne.n	8004f48 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005034:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <xQueueReceive+0x1b4>)
 8005036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	e780      	b.n	8004f48 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005048:	f000 f923 	bl	8005292 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800504c:	f000 fbc8 	bl	80057e0 <xTaskResumeAll>
 8005050:	e77a      	b.n	8004f48 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005054:	f000 f91d 	bl	8005292 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005058:	f000 fbc2 	bl	80057e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800505c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800505e:	f000 f96a 	bl	8005336 <prvIsQueueEmpty>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	f43f af6f 	beq.w	8004f48 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800506a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800506c:	4618      	mov	r0, r3
 800506e:	3730      	adds	r7, #48	; 0x30
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	e000ed04 	.word	0xe000ed04

08005078 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08e      	sub	sp, #56	; 0x38
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <xQueueReceiveFromISR+0x2a>
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	623b      	str	r3, [r7, #32]
 80050a0:	e7fe      	b.n	80050a0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d103      	bne.n	80050b0 <xQueueReceiveFromISR+0x38>
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <xQueueReceiveFromISR+0x3c>
 80050b0:	2301      	movs	r3, #1
 80050b2:	e000      	b.n	80050b6 <xQueueReceiveFromISR+0x3e>
 80050b4:	2300      	movs	r3, #0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <xQueueReceiveFromISR+0x56>
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	e7fe      	b.n	80050cc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050ce:	f001 f9c5 	bl	800645c <vPortValidateInterruptPriority>
	__asm volatile
 80050d2:	f3ef 8211 	mrs	r2, BASEPRI
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	61ba      	str	r2, [r7, #24]
 80050e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80050ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d02f      	beq.n	800515a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005108:	f000 f89d 	bl	8005246 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	1e5a      	subs	r2, r3, #1
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005114:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511c:	d112      	bne.n	8005144 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	3310      	adds	r3, #16
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fd2e 	bl	8005b8c <xTaskRemoveFromEventList>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00e      	beq.n	8005154 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00b      	beq.n	8005154 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	e007      	b.n	8005154 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005148:	3301      	adds	r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	b25a      	sxtb	r2, r3
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005154:	2301      	movs	r3, #1
 8005156:	637b      	str	r3, [r7, #52]	; 0x34
 8005158:	e001      	b.n	800515e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800515a:	2300      	movs	r3, #0
 800515c:	637b      	str	r3, [r7, #52]	; 0x34
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800516a:	4618      	mov	r0, r3
 800516c:	3738      	adds	r7, #56	; 0x38
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b086      	sub	sp, #24
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10d      	bne.n	80051ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d14d      	bne.n	8005234 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fecd 	bl	8005f3c <xTaskPriorityDisinherit>
 80051a2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	e043      	b.n	8005234 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d119      	bne.n	80051e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6898      	ldr	r0, [r3, #8]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	461a      	mov	r2, r3
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	f001 fb8f 	bl	80068e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	441a      	add	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d32b      	bcc.n	8005234 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	609a      	str	r2, [r3, #8]
 80051e4:	e026      	b.n	8005234 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	68d8      	ldr	r0, [r3, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	461a      	mov	r2, r3
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	f001 fb75 	bl	80068e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	425b      	negs	r3, r3
 8005200:	441a      	add	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d207      	bcs.n	8005222 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	425b      	negs	r3, r3
 800521c:	441a      	add	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b02      	cmp	r3, #2
 8005226:	d105      	bne.n	8005234 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	3b01      	subs	r3, #1
 8005232:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800523c:	697b      	ldr	r3, [r7, #20]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d018      	beq.n	800528a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	441a      	add	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	429a      	cmp	r2, r3
 8005270:	d303      	bcc.n	800527a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68d9      	ldr	r1, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	461a      	mov	r2, r3
 8005284:	6838      	ldr	r0, [r7, #0]
 8005286:	f001 fb2b 	bl	80068e0 <memcpy>
	}
}
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800529a:	f001 f825 	bl	80062e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052a6:	e011      	b.n	80052cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d012      	beq.n	80052d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3324      	adds	r3, #36	; 0x24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fc69 	bl	8005b8c <xTaskRemoveFromEventList>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052c0:	f000 fd3c 	bl	8005d3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	dce9      	bgt.n	80052a8 <prvUnlockQueue+0x16>
 80052d4:	e000      	b.n	80052d8 <prvUnlockQueue+0x46>
					break;
 80052d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	22ff      	movs	r2, #255	; 0xff
 80052dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052e0:	f001 f830 	bl	8006344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052e4:	f001 f800 	bl	80062e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052f0:	e011      	b.n	8005316 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d012      	beq.n	8005320 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3310      	adds	r3, #16
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fc44 	bl	8005b8c <xTaskRemoveFromEventList>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800530a:	f000 fd17 	bl	8005d3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800530e:	7bbb      	ldrb	r3, [r7, #14]
 8005310:	3b01      	subs	r3, #1
 8005312:	b2db      	uxtb	r3, r3
 8005314:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005316:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800531a:	2b00      	cmp	r3, #0
 800531c:	dce9      	bgt.n	80052f2 <prvUnlockQueue+0x60>
 800531e:	e000      	b.n	8005322 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005320:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	22ff      	movs	r2, #255	; 0xff
 8005326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800532a:	f001 f80b 	bl	8006344 <vPortExitCritical>
}
 800532e:	bf00      	nop
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800533e:	f000 ffd3 	bl	80062e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800534a:	2301      	movs	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e001      	b.n	8005354 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005354:	f000 fff6 	bl	8006344 <vPortExitCritical>

	return xReturn;
 8005358:	68fb      	ldr	r3, [r7, #12]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800536a:	f000 ffbd 	bl	80062e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	429a      	cmp	r2, r3
 8005378:	d102      	bne.n	8005380 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800537a:	2301      	movs	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e001      	b.n	8005384 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005384:	f000 ffde 	bl	8006344 <vPortExitCritical>

	return xReturn;
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005392:	b580      	push	{r7, lr}
 8005394:	b08e      	sub	sp, #56	; 0x38
 8005396:	af04      	add	r7, sp, #16
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
 800539e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <xTaskCreateStatic+0x28>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	623b      	str	r3, [r7, #32]
 80053b8:	e7fe      	b.n	80053b8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d109      	bne.n	80053d4 <xTaskCreateStatic+0x42>
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	e7fe      	b.n	80053d2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053d4:	2354      	movs	r3, #84	; 0x54
 80053d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2b54      	cmp	r3, #84	; 0x54
 80053dc:	d009      	beq.n	80053f2 <xTaskCreateStatic+0x60>
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	61bb      	str	r3, [r7, #24]
 80053f0:	e7fe      	b.n	80053f0 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01e      	beq.n	8005436 <xTaskCreateStatic+0xa4>
 80053f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01b      	beq.n	8005436 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005406:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005410:	2300      	movs	r3, #0
 8005412:	9303      	str	r3, [sp, #12]
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	9302      	str	r3, [sp, #8]
 8005418:	f107 0314 	add.w	r3, r7, #20
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f850 	bl	80054ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800542e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005430:	f000 f8cc 	bl	80055cc <prvAddNewTaskToReadyList>
 8005434:	e001      	b.n	800543a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800543a:	697b      	ldr	r3, [r7, #20]
	}
 800543c:	4618      	mov	r0, r3
 800543e:	3728      	adds	r7, #40	; 0x28
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08c      	sub	sp, #48	; 0x30
 8005448:	af04      	add	r7, sp, #16
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	4613      	mov	r3, r2
 8005452:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4618      	mov	r0, r3
 800545a:	f001 f83b 	bl	80064d4 <pvPortMalloc>
 800545e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00e      	beq.n	8005484 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005466:	2054      	movs	r0, #84	; 0x54
 8005468:	f001 f834 	bl	80064d4 <pvPortMalloc>
 800546c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	631a      	str	r2, [r3, #48]	; 0x30
 800547a:	e005      	b.n	8005488 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800547c:	6978      	ldr	r0, [r7, #20]
 800547e:	f001 f8eb 	bl	8006658 <vPortFree>
 8005482:	e001      	b.n	8005488 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005484:	2300      	movs	r3, #0
 8005486:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d017      	beq.n	80054be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005496:	88fa      	ldrh	r2, [r7, #6]
 8005498:	2300      	movs	r3, #0
 800549a:	9303      	str	r3, [sp, #12]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	9302      	str	r3, [sp, #8]
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f80e 	bl	80054ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054b2:	69f8      	ldr	r0, [r7, #28]
 80054b4:	f000 f88a 	bl	80055cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054b8:	2301      	movs	r3, #1
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	e002      	b.n	80054c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054be:	f04f 33ff 	mov.w	r3, #4294967295
 80054c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054c4:	69bb      	ldr	r3, [r7, #24]
	}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3720      	adds	r7, #32
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b088      	sub	sp, #32
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	607a      	str	r2, [r7, #4]
 80054da:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054e6:	3b01      	subs	r3, #1
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	f023 0307 	bic.w	r3, r3, #7
 80054f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <prvInitialiseNewTask+0x46>
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e7fe      	b.n	8005512 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e012      	b.n	8005540 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	7819      	ldrb	r1, [r3, #0]
 8005522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	3334      	adds	r3, #52	; 0x34
 800552a:	460a      	mov	r2, r1
 800552c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	4413      	add	r3, r2
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d006      	beq.n	8005548 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	3301      	adds	r3, #1
 800553e:	61fb      	str	r3, [r7, #28]
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2b0f      	cmp	r3, #15
 8005544:	d9e9      	bls.n	800551a <prvInitialiseNewTask+0x4c>
 8005546:	e000      	b.n	800554a <prvInitialiseNewTask+0x7c>
		{
			break;
 8005548:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	2b06      	cmp	r3, #6
 8005556:	d901      	bls.n	800555c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005558:	2306      	movs	r3, #6
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005560:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005566:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	2200      	movs	r2, #0
 800556c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	3304      	adds	r3, #4
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff f94f 	bl	8004816 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	3318      	adds	r3, #24
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff f94a 	bl	8004816 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005586:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	f1c3 0207 	rsb	r2, r3, #7
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005596:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	2200      	movs	r2, #0
 800559c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	68f9      	ldr	r1, [r7, #12]
 80055aa:	69b8      	ldr	r0, [r7, #24]
 80055ac:	f000 fdb0 	bl	8006110 <pxPortInitialiseStack>
 80055b0:	4602      	mov	r2, r0
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055c2:	bf00      	nop
 80055c4:	3720      	adds	r7, #32
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055d4:	f000 fe88 	bl	80062e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055d8:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <prvAddNewTaskToReadyList+0xb8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3301      	adds	r3, #1
 80055de:	4a29      	ldr	r2, [pc, #164]	; (8005684 <prvAddNewTaskToReadyList+0xb8>)
 80055e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055e2:	4b29      	ldr	r3, [pc, #164]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055ea:	4a27      	ldr	r2, [pc, #156]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055f0:	4b24      	ldr	r3, [pc, #144]	; (8005684 <prvAddNewTaskToReadyList+0xb8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d110      	bne.n	800561a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055f8:	f000 fbc4 	bl	8005d84 <prvInitialiseTaskLists>
 80055fc:	e00d      	b.n	800561a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055fe:	4b23      	ldr	r3, [pc, #140]	; (800568c <prvAddNewTaskToReadyList+0xc0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005606:	4b20      	ldr	r3, [pc, #128]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	429a      	cmp	r2, r3
 8005612:	d802      	bhi.n	800561a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005614:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800561a:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <prvAddNewTaskToReadyList+0xc4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3301      	adds	r3, #1
 8005620:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <prvAddNewTaskToReadyList+0xc4>)
 8005622:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	2201      	movs	r2, #1
 800562a:	409a      	lsls	r2, r3
 800562c:	4b19      	ldr	r3, [pc, #100]	; (8005694 <prvAddNewTaskToReadyList+0xc8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4313      	orrs	r3, r2
 8005632:	4a18      	ldr	r2, [pc, #96]	; (8005694 <prvAddNewTaskToReadyList+0xc8>)
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <prvAddNewTaskToReadyList+0xcc>)
 8005644:	441a      	add	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3304      	adds	r3, #4
 800564a:	4619      	mov	r1, r3
 800564c:	4610      	mov	r0, r2
 800564e:	f7ff f8ee 	bl	800482e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005652:	f000 fe77 	bl	8006344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005656:	4b0d      	ldr	r3, [pc, #52]	; (800568c <prvAddNewTaskToReadyList+0xc0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00e      	beq.n	800567c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800565e:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <prvAddNewTaskToReadyList+0xbc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	429a      	cmp	r2, r3
 800566a:	d207      	bcs.n	800567c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <prvAddNewTaskToReadyList+0xd0>)
 800566e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	200003f4 	.word	0x200003f4
 8005688:	200002f4 	.word	0x200002f4
 800568c:	20000400 	.word	0x20000400
 8005690:	20000410 	.word	0x20000410
 8005694:	200003fc 	.word	0x200003fc
 8005698:	200002f8 	.word	0x200002f8
 800569c:	e000ed04 	.word	0xe000ed04

080056a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d016      	beq.n	80056e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056b2:	4b13      	ldr	r3, [pc, #76]	; (8005700 <vTaskDelay+0x60>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <vTaskDelay+0x2e>
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	e7fe      	b.n	80056cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80056ce:	f000 f879 	bl	80057c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056d2:	2100      	movs	r1, #0
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fcb5 	bl	8006044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056da:	f000 f881 	bl	80057e0 <xTaskResumeAll>
 80056de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d107      	bne.n	80056f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80056e6:	4b07      	ldr	r3, [pc, #28]	; (8005704 <vTaskDelay+0x64>)
 80056e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056f6:	bf00      	nop
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	2000041c 	.word	0x2000041c
 8005704:	e000ed04 	.word	0xe000ed04

08005708 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	; 0x28
 800570c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005716:	463a      	mov	r2, r7
 8005718:	1d39      	adds	r1, r7, #4
 800571a:	f107 0308 	add.w	r3, r7, #8
 800571e:	4618      	mov	r0, r3
 8005720:	f7fa ff94 	bl	800064c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	9202      	str	r2, [sp, #8]
 800572c:	9301      	str	r3, [sp, #4]
 800572e:	2300      	movs	r3, #0
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	2300      	movs	r3, #0
 8005734:	460a      	mov	r2, r1
 8005736:	491d      	ldr	r1, [pc, #116]	; (80057ac <vTaskStartScheduler+0xa4>)
 8005738:	481d      	ldr	r0, [pc, #116]	; (80057b0 <vTaskStartScheduler+0xa8>)
 800573a:	f7ff fe2a 	bl	8005392 <xTaskCreateStatic>
 800573e:	4602      	mov	r2, r0
 8005740:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <vTaskStartScheduler+0xac>)
 8005742:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005744:	4b1b      	ldr	r3, [pc, #108]	; (80057b4 <vTaskStartScheduler+0xac>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800574c:	2301      	movs	r3, #1
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	e001      	b.n	8005756 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d115      	bne.n	8005788 <vTaskStartScheduler+0x80>
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800576e:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <vTaskStartScheduler+0xb0>)
 8005770:	f04f 32ff 	mov.w	r2, #4294967295
 8005774:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005776:	4b11      	ldr	r3, [pc, #68]	; (80057bc <vTaskStartScheduler+0xb4>)
 8005778:	2201      	movs	r2, #1
 800577a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800577c:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <vTaskStartScheduler+0xb8>)
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005782:	f000 fd41 	bl	8006208 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005786:	e00d      	b.n	80057a4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d109      	bne.n	80057a4 <vTaskStartScheduler+0x9c>
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	e7fe      	b.n	80057a2 <vTaskStartScheduler+0x9a>
}
 80057a4:	bf00      	nop
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	08006a94 	.word	0x08006a94
 80057b0:	08005d55 	.word	0x08005d55
 80057b4:	20000418 	.word	0x20000418
 80057b8:	20000414 	.word	0x20000414
 80057bc:	20000400 	.word	0x20000400
 80057c0:	200003f8 	.word	0x200003f8

080057c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057c8:	4b04      	ldr	r3, [pc, #16]	; (80057dc <vTaskSuspendAll+0x18>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	4a03      	ldr	r2, [pc, #12]	; (80057dc <vTaskSuspendAll+0x18>)
 80057d0:	6013      	str	r3, [r2, #0]
}
 80057d2:	bf00      	nop
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	2000041c 	.word	0x2000041c

080057e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057ee:	4b41      	ldr	r3, [pc, #260]	; (80058f4 <xTaskResumeAll+0x114>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d109      	bne.n	800580a <xTaskResumeAll+0x2a>
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	e7fe      	b.n	8005808 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800580a:	f000 fd6d 	bl	80062e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800580e:	4b39      	ldr	r3, [pc, #228]	; (80058f4 <xTaskResumeAll+0x114>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3b01      	subs	r3, #1
 8005814:	4a37      	ldr	r2, [pc, #220]	; (80058f4 <xTaskResumeAll+0x114>)
 8005816:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005818:	4b36      	ldr	r3, [pc, #216]	; (80058f4 <xTaskResumeAll+0x114>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d161      	bne.n	80058e4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005820:	4b35      	ldr	r3, [pc, #212]	; (80058f8 <xTaskResumeAll+0x118>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d05d      	beq.n	80058e4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005828:	e02e      	b.n	8005888 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800582a:	4b34      	ldr	r3, [pc, #208]	; (80058fc <xTaskResumeAll+0x11c>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3318      	adds	r3, #24
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff f854 	bl	80048e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3304      	adds	r3, #4
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff f84f 	bl	80048e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	2201      	movs	r2, #1
 800584c:	409a      	lsls	r2, r3
 800584e:	4b2c      	ldr	r3, [pc, #176]	; (8005900 <xTaskResumeAll+0x120>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4313      	orrs	r3, r2
 8005854:	4a2a      	ldr	r2, [pc, #168]	; (8005900 <xTaskResumeAll+0x120>)
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4a27      	ldr	r2, [pc, #156]	; (8005904 <xTaskResumeAll+0x124>)
 8005866:	441a      	add	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3304      	adds	r3, #4
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f7fe ffdd 	bl	800482e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005878:	4b23      	ldr	r3, [pc, #140]	; (8005908 <xTaskResumeAll+0x128>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	429a      	cmp	r2, r3
 8005880:	d302      	bcc.n	8005888 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005882:	4b22      	ldr	r3, [pc, #136]	; (800590c <xTaskResumeAll+0x12c>)
 8005884:	2201      	movs	r2, #1
 8005886:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005888:	4b1c      	ldr	r3, [pc, #112]	; (80058fc <xTaskResumeAll+0x11c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1cc      	bne.n	800582a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005896:	f000 fb0f 	bl	8005eb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800589a:	4b1d      	ldr	r3, [pc, #116]	; (8005910 <xTaskResumeAll+0x130>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d010      	beq.n	80058c8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058a6:	f000 f837 	bl	8005918 <xTaskIncrementTick>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80058b0:	4b16      	ldr	r3, [pc, #88]	; (800590c <xTaskResumeAll+0x12c>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f1      	bne.n	80058a6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80058c2:	4b13      	ldr	r3, [pc, #76]	; (8005910 <xTaskResumeAll+0x130>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058c8:	4b10      	ldr	r3, [pc, #64]	; (800590c <xTaskResumeAll+0x12c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d009      	beq.n	80058e4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058d0:	2301      	movs	r3, #1
 80058d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058d4:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <xTaskResumeAll+0x134>)
 80058d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058e4:	f000 fd2e 	bl	8006344 <vPortExitCritical>

	return xAlreadyYielded;
 80058e8:	68bb      	ldr	r3, [r7, #8]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	2000041c 	.word	0x2000041c
 80058f8:	200003f4 	.word	0x200003f4
 80058fc:	200003b4 	.word	0x200003b4
 8005900:	200003fc 	.word	0x200003fc
 8005904:	200002f8 	.word	0x200002f8
 8005908:	200002f4 	.word	0x200002f4
 800590c:	20000408 	.word	0x20000408
 8005910:	20000404 	.word	0x20000404
 8005914:	e000ed04 	.word	0xe000ed04

08005918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005922:	4b50      	ldr	r3, [pc, #320]	; (8005a64 <xTaskIncrementTick+0x14c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 808c 	bne.w	8005a44 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800592c:	4b4e      	ldr	r3, [pc, #312]	; (8005a68 <xTaskIncrementTick+0x150>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005934:	4a4c      	ldr	r2, [pc, #304]	; (8005a68 <xTaskIncrementTick+0x150>)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d11f      	bne.n	8005980 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005940:	4b4a      	ldr	r3, [pc, #296]	; (8005a6c <xTaskIncrementTick+0x154>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <xTaskIncrementTick+0x46>
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	e7fe      	b.n	800595c <xTaskIncrementTick+0x44>
 800595e:	4b43      	ldr	r3, [pc, #268]	; (8005a6c <xTaskIncrementTick+0x154>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	4b42      	ldr	r3, [pc, #264]	; (8005a70 <xTaskIncrementTick+0x158>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a40      	ldr	r2, [pc, #256]	; (8005a6c <xTaskIncrementTick+0x154>)
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	4a40      	ldr	r2, [pc, #256]	; (8005a70 <xTaskIncrementTick+0x158>)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4b40      	ldr	r3, [pc, #256]	; (8005a74 <xTaskIncrementTick+0x15c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3301      	adds	r3, #1
 8005978:	4a3e      	ldr	r2, [pc, #248]	; (8005a74 <xTaskIncrementTick+0x15c>)
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	f000 fa9c 	bl	8005eb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005980:	4b3d      	ldr	r3, [pc, #244]	; (8005a78 <xTaskIncrementTick+0x160>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	429a      	cmp	r2, r3
 8005988:	d34d      	bcc.n	8005a26 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800598a:	4b38      	ldr	r3, [pc, #224]	; (8005a6c <xTaskIncrementTick+0x154>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <xTaskIncrementTick+0x80>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <xTaskIncrementTick+0x82>
 8005998:	2300      	movs	r3, #0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d004      	beq.n	80059a8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800599e:	4b36      	ldr	r3, [pc, #216]	; (8005a78 <xTaskIncrementTick+0x160>)
 80059a0:	f04f 32ff 	mov.w	r2, #4294967295
 80059a4:	601a      	str	r2, [r3, #0]
					break;
 80059a6:	e03e      	b.n	8005a26 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059a8:	4b30      	ldr	r3, [pc, #192]	; (8005a6c <xTaskIncrementTick+0x154>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d203      	bcs.n	80059c8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059c0:	4a2d      	ldr	r2, [pc, #180]	; (8005a78 <xTaskIncrementTick+0x160>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6013      	str	r3, [r2, #0]
						break;
 80059c6:	e02e      	b.n	8005a26 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe ff89 	bl	80048e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d004      	beq.n	80059e4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	3318      	adds	r3, #24
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe ff80 	bl	80048e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	2201      	movs	r2, #1
 80059ea:	409a      	lsls	r2, r3
 80059ec:	4b23      	ldr	r3, [pc, #140]	; (8005a7c <xTaskIncrementTick+0x164>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	4a22      	ldr	r2, [pc, #136]	; (8005a7c <xTaskIncrementTick+0x164>)
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4a1f      	ldr	r2, [pc, #124]	; (8005a80 <xTaskIncrementTick+0x168>)
 8005a04:	441a      	add	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f7fe ff0e 	bl	800482e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a16:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <xTaskIncrementTick+0x16c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d3b4      	bcc.n	800598a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005a20:	2301      	movs	r3, #1
 8005a22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a24:	e7b1      	b.n	800598a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a26:	4b17      	ldr	r3, [pc, #92]	; (8005a84 <xTaskIncrementTick+0x16c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2c:	4914      	ldr	r1, [pc, #80]	; (8005a80 <xTaskIncrementTick+0x168>)
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d907      	bls.n	8005a4e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	e004      	b.n	8005a4e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a44:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <xTaskIncrementTick+0x170>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	4a0f      	ldr	r2, [pc, #60]	; (8005a88 <xTaskIncrementTick+0x170>)
 8005a4c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <xTaskIncrementTick+0x174>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a5a:	697b      	ldr	r3, [r7, #20]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	2000041c 	.word	0x2000041c
 8005a68:	200003f8 	.word	0x200003f8
 8005a6c:	200003ac 	.word	0x200003ac
 8005a70:	200003b0 	.word	0x200003b0
 8005a74:	2000040c 	.word	0x2000040c
 8005a78:	20000414 	.word	0x20000414
 8005a7c:	200003fc 	.word	0x200003fc
 8005a80:	200002f8 	.word	0x200002f8
 8005a84:	200002f4 	.word	0x200002f4
 8005a88:	20000404 	.word	0x20000404
 8005a8c:	20000408 	.word	0x20000408

08005a90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a96:	4b26      	ldr	r3, [pc, #152]	; (8005b30 <vTaskSwitchContext+0xa0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a9e:	4b25      	ldr	r3, [pc, #148]	; (8005b34 <vTaskSwitchContext+0xa4>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005aa4:	e03e      	b.n	8005b24 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005aa6:	4b23      	ldr	r3, [pc, #140]	; (8005b34 <vTaskSwitchContext+0xa4>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005aac:	4b22      	ldr	r3, [pc, #136]	; (8005b38 <vTaskSwitchContext+0xa8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	fab3 f383 	clz	r3, r3
 8005ab8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005aba:	7afb      	ldrb	r3, [r7, #11]
 8005abc:	f1c3 031f 	rsb	r3, r3, #31
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	491e      	ldr	r1, [pc, #120]	; (8005b3c <vTaskSwitchContext+0xac>)
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d109      	bne.n	8005aea <vTaskSwitchContext+0x5a>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	607b      	str	r3, [r7, #4]
 8005ae8:	e7fe      	b.n	8005ae8 <vTaskSwitchContext+0x58>
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4a11      	ldr	r2, [pc, #68]	; (8005b3c <vTaskSwitchContext+0xac>)
 8005af6:	4413      	add	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d104      	bne.n	8005b1a <vTaskSwitchContext+0x8a>
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4a07      	ldr	r2, [pc, #28]	; (8005b40 <vTaskSwitchContext+0xb0>)
 8005b22:	6013      	str	r3, [r2, #0]
}
 8005b24:	bf00      	nop
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	2000041c 	.word	0x2000041c
 8005b34:	20000408 	.word	0x20000408
 8005b38:	200003fc 	.word	0x200003fc
 8005b3c:	200002f8 	.word	0x200002f8
 8005b40:	200002f4 	.word	0x200002f4

08005b44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d109      	bne.n	8005b68 <vTaskPlaceOnEventList+0x24>
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e7fe      	b.n	8005b66 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b68:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <vTaskPlaceOnEventList+0x44>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3318      	adds	r3, #24
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7fe fe7f 	bl	8004874 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b76:	2101      	movs	r1, #1
 8005b78:	6838      	ldr	r0, [r7, #0]
 8005b7a:	f000 fa63 	bl	8006044 <prvAddCurrentTaskToDelayedList>
}
 8005b7e:	bf00      	nop
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	200002f4 	.word	0x200002f4

08005b8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <xTaskRemoveFromEventList+0x2a>
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e7fe      	b.n	8005bb4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	3318      	adds	r3, #24
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fe92 	bl	80048e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bc0:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <xTaskRemoveFromEventList+0xac>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d11c      	bne.n	8005c02 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe fe89 	bl	80048e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	4b18      	ldr	r3, [pc, #96]	; (8005c3c <xTaskRemoveFromEventList+0xb0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	4a16      	ldr	r2, [pc, #88]	; (8005c3c <xTaskRemoveFromEventList+0xb0>)
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4a13      	ldr	r2, [pc, #76]	; (8005c40 <xTaskRemoveFromEventList+0xb4>)
 8005bf2:	441a      	add	r2, r3
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f7fe fe17 	bl	800482e <vListInsertEnd>
 8005c00:	e005      	b.n	8005c0e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	3318      	adds	r3, #24
 8005c06:	4619      	mov	r1, r3
 8005c08:	480e      	ldr	r0, [pc, #56]	; (8005c44 <xTaskRemoveFromEventList+0xb8>)
 8005c0a:	f7fe fe10 	bl	800482e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c12:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <xTaskRemoveFromEventList+0xbc>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d905      	bls.n	8005c28 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c20:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <xTaskRemoveFromEventList+0xc0>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	e001      	b.n	8005c2c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005c2c:	697b      	ldr	r3, [r7, #20]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	2000041c 	.word	0x2000041c
 8005c3c:	200003fc 	.word	0x200003fc
 8005c40:	200002f8 	.word	0x200002f8
 8005c44:	200003b4 	.word	0x200003b4
 8005c48:	200002f4 	.word	0x200002f4
 8005c4c:	20000408 	.word	0x20000408

08005c50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c58:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <vTaskInternalSetTimeOutState+0x24>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <vTaskInternalSetTimeOutState+0x28>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	605a      	str	r2, [r3, #4]
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	2000040c 	.word	0x2000040c
 8005c78:	200003f8 	.word	0x200003f8

08005c7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d109      	bne.n	8005ca0 <xTaskCheckForTimeOut+0x24>
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	e7fe      	b.n	8005c9e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <xTaskCheckForTimeOut+0x3e>
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	e7fe      	b.n	8005cb8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005cba:	f000 fb15 	bl	80062e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <xTaskCheckForTimeOut+0xb8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd6:	d102      	bne.n	8005cde <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	e023      	b.n	8005d26 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b15      	ldr	r3, [pc, #84]	; (8005d38 <xTaskCheckForTimeOut+0xbc>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d007      	beq.n	8005cfa <xTaskCheckForTimeOut+0x7e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d302      	bcc.n	8005cfa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	e015      	b.n	8005d26 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d20b      	bcs.n	8005d1c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	1ad2      	subs	r2, r2, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7ff ff9d 	bl	8005c50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61fb      	str	r3, [r7, #28]
 8005d1a:	e004      	b.n	8005d26 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d22:	2301      	movs	r3, #1
 8005d24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d26:	f000 fb0d 	bl	8006344 <vPortExitCritical>

	return xReturn;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3720      	adds	r7, #32
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	200003f8 	.word	0x200003f8
 8005d38:	2000040c 	.word	0x2000040c

08005d3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d40:	4b03      	ldr	r3, [pc, #12]	; (8005d50 <vTaskMissedYield+0x14>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	601a      	str	r2, [r3, #0]
}
 8005d46:	bf00      	nop
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20000408 	.word	0x20000408

08005d54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d5c:	f000 f852 	bl	8005e04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d60:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <prvIdleTask+0x28>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d9f9      	bls.n	8005d5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d68:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <prvIdleTask+0x2c>)
 8005d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d78:	e7f0      	b.n	8005d5c <prvIdleTask+0x8>
 8005d7a:	bf00      	nop
 8005d7c:	200002f8 	.word	0x200002f8
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	607b      	str	r3, [r7, #4]
 8005d8e:	e00c      	b.n	8005daa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4a12      	ldr	r2, [pc, #72]	; (8005de4 <prvInitialiseTaskLists+0x60>)
 8005d9c:	4413      	add	r3, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fd1a 	bl	80047d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3301      	adds	r3, #1
 8005da8:	607b      	str	r3, [r7, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b06      	cmp	r3, #6
 8005dae:	d9ef      	bls.n	8005d90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005db0:	480d      	ldr	r0, [pc, #52]	; (8005de8 <prvInitialiseTaskLists+0x64>)
 8005db2:	f7fe fd11 	bl	80047d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005db6:	480d      	ldr	r0, [pc, #52]	; (8005dec <prvInitialiseTaskLists+0x68>)
 8005db8:	f7fe fd0e 	bl	80047d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dbc:	480c      	ldr	r0, [pc, #48]	; (8005df0 <prvInitialiseTaskLists+0x6c>)
 8005dbe:	f7fe fd0b 	bl	80047d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dc2:	480c      	ldr	r0, [pc, #48]	; (8005df4 <prvInitialiseTaskLists+0x70>)
 8005dc4:	f7fe fd08 	bl	80047d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005dc8:	480b      	ldr	r0, [pc, #44]	; (8005df8 <prvInitialiseTaskLists+0x74>)
 8005dca:	f7fe fd05 	bl	80047d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dce:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <prvInitialiseTaskLists+0x78>)
 8005dd0:	4a05      	ldr	r2, [pc, #20]	; (8005de8 <prvInitialiseTaskLists+0x64>)
 8005dd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <prvInitialiseTaskLists+0x7c>)
 8005dd6:	4a05      	ldr	r2, [pc, #20]	; (8005dec <prvInitialiseTaskLists+0x68>)
 8005dd8:	601a      	str	r2, [r3, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	200002f8 	.word	0x200002f8
 8005de8:	20000384 	.word	0x20000384
 8005dec:	20000398 	.word	0x20000398
 8005df0:	200003b4 	.word	0x200003b4
 8005df4:	200003c8 	.word	0x200003c8
 8005df8:	200003e0 	.word	0x200003e0
 8005dfc:	200003ac 	.word	0x200003ac
 8005e00:	200003b0 	.word	0x200003b0

08005e04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e0a:	e019      	b.n	8005e40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e0c:	f000 fa6c 	bl	80062e8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005e10:	4b0f      	ldr	r3, [pc, #60]	; (8005e50 <prvCheckTasksWaitingTermination+0x4c>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fe fd61 	bl	80048e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e22:	4b0c      	ldr	r3, [pc, #48]	; (8005e54 <prvCheckTasksWaitingTermination+0x50>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <prvCheckTasksWaitingTermination+0x50>)
 8005e2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <prvCheckTasksWaitingTermination+0x54>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	4a09      	ldr	r2, [pc, #36]	; (8005e58 <prvCheckTasksWaitingTermination+0x54>)
 8005e34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e36:	f000 fa85 	bl	8006344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f80e 	bl	8005e5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e40:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <prvCheckTasksWaitingTermination+0x54>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e1      	bne.n	8005e0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e48:	bf00      	nop
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	200003c8 	.word	0x200003c8
 8005e54:	200003f4 	.word	0x200003f4
 8005e58:	200003dc 	.word	0x200003dc

08005e5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d108      	bne.n	8005e80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fbf0 	bl	8006658 <vPortFree>
				vPortFree( pxTCB );
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fbed 	bl	8006658 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e7e:	e017      	b.n	8005eb0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d103      	bne.n	8005e92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fbe4 	bl	8006658 <vPortFree>
	}
 8005e90:	e00e      	b.n	8005eb0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d009      	beq.n	8005eb0 <prvDeleteTCB+0x54>
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	e7fe      	b.n	8005eae <prvDeleteTCB+0x52>
	}
 8005eb0:	bf00      	nop
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ebe:	4b0e      	ldr	r3, [pc, #56]	; (8005ef8 <prvResetNextTaskUnblockTime+0x40>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <prvResetNextTaskUnblockTime+0x14>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <prvResetNextTaskUnblockTime+0x16>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d004      	beq.n	8005edc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <prvResetNextTaskUnblockTime+0x44>)
 8005ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005eda:	e008      	b.n	8005eee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005edc:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <prvResetNextTaskUnblockTime+0x40>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4a04      	ldr	r2, [pc, #16]	; (8005efc <prvResetNextTaskUnblockTime+0x44>)
 8005eec:	6013      	str	r3, [r2, #0]
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr
 8005ef8:	200003ac 	.word	0x200003ac
 8005efc:	20000414 	.word	0x20000414

08005f00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f06:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <xTaskGetSchedulerState+0x34>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d102      	bne.n	8005f14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	e008      	b.n	8005f26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f14:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <xTaskGetSchedulerState+0x38>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	607b      	str	r3, [r7, #4]
 8005f20:	e001      	b.n	8005f26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f22:	2300      	movs	r3, #0
 8005f24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f26:	687b      	ldr	r3, [r7, #4]
	}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bc80      	pop	{r7}
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000400 	.word	0x20000400
 8005f38:	2000041c 	.word	0x2000041c

08005f3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d06c      	beq.n	800602c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f52:	4b39      	ldr	r3, [pc, #228]	; (8006038 <xTaskPriorityDisinherit+0xfc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d009      	beq.n	8005f70 <xTaskPriorityDisinherit+0x34>
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	e7fe      	b.n	8005f6e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <xTaskPriorityDisinherit+0x50>
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	e7fe      	b.n	8005f8a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f90:	1e5a      	subs	r2, r3, #1
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d044      	beq.n	800602c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d140      	bne.n	800602c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	3304      	adds	r3, #4
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe fc98 	bl	80048e4 <uxListRemove>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d115      	bne.n	8005fe6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbe:	491f      	ldr	r1, [pc, #124]	; (800603c <xTaskPriorityDisinherit+0x100>)
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xTaskPriorityDisinherit+0xaa>
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	43da      	mvns	r2, r3
 8005fdc:	4b18      	ldr	r3, [pc, #96]	; (8006040 <xTaskPriorityDisinherit+0x104>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	4a17      	ldr	r2, [pc, #92]	; (8006040 <xTaskPriorityDisinherit+0x104>)
 8005fe4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	f1c3 0207 	rsb	r2, r3, #7
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	2201      	movs	r2, #1
 8006000:	409a      	lsls	r2, r3
 8006002:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <xTaskPriorityDisinherit+0x104>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4313      	orrs	r3, r2
 8006008:	4a0d      	ldr	r2, [pc, #52]	; (8006040 <xTaskPriorityDisinherit+0x104>)
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4a08      	ldr	r2, [pc, #32]	; (800603c <xTaskPriorityDisinherit+0x100>)
 800601a:	441a      	add	r2, r3
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	3304      	adds	r3, #4
 8006020:	4619      	mov	r1, r3
 8006022:	4610      	mov	r0, r2
 8006024:	f7fe fc03 	bl	800482e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006028:	2301      	movs	r3, #1
 800602a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800602c:	697b      	ldr	r3, [r7, #20]
	}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	200002f4 	.word	0x200002f4
 800603c:	200002f8 	.word	0x200002f8
 8006040:	200003fc 	.word	0x200003fc

08006044 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800604e:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006054:	4b28      	ldr	r3, [pc, #160]	; (80060f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3304      	adds	r3, #4
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fc42 	bl	80048e4 <uxListRemove>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10b      	bne.n	800607e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006066:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	2201      	movs	r2, #1
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	43da      	mvns	r2, r3
 8006074:	4b21      	ldr	r3, [pc, #132]	; (80060fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4013      	ands	r3, r2
 800607a:	4a20      	ldr	r2, [pc, #128]	; (80060fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800607c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d10a      	bne.n	800609c <prvAddCurrentTaskToDelayedList+0x58>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800608c:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3304      	adds	r3, #4
 8006092:	4619      	mov	r1, r3
 8006094:	481a      	ldr	r0, [pc, #104]	; (8006100 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006096:	f7fe fbca 	bl	800482e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800609a:	e026      	b.n	80060ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4413      	add	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060a4:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d209      	bcs.n	80060c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060b4:	4b13      	ldr	r3, [pc, #76]	; (8006104 <prvAddCurrentTaskToDelayedList+0xc0>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4b0f      	ldr	r3, [pc, #60]	; (80060f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3304      	adds	r3, #4
 80060be:	4619      	mov	r1, r3
 80060c0:	4610      	mov	r0, r2
 80060c2:	f7fe fbd7 	bl	8004874 <vListInsert>
}
 80060c6:	e010      	b.n	80060ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060c8:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <prvAddCurrentTaskToDelayedList+0xc4>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f7fe fbcd 	bl	8004874 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060da:	4b0c      	ldr	r3, [pc, #48]	; (800610c <prvAddCurrentTaskToDelayedList+0xc8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d202      	bcs.n	80060ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80060e4:	4a09      	ldr	r2, [pc, #36]	; (800610c <prvAddCurrentTaskToDelayedList+0xc8>)
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6013      	str	r3, [r2, #0]
}
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	200003f8 	.word	0x200003f8
 80060f8:	200002f4 	.word	0x200002f4
 80060fc:	200003fc 	.word	0x200003fc
 8006100:	200003e0 	.word	0x200003e0
 8006104:	200003b0 	.word	0x200003b0
 8006108:	200003ac 	.word	0x200003ac
 800610c:	20000414 	.word	0x20000414

08006110 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	3b04      	subs	r3, #4
 8006120:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3b04      	subs	r3, #4
 800612e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0201 	bic.w	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3b04      	subs	r3, #4
 800613e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006140:	4a08      	ldr	r2, [pc, #32]	; (8006164 <pxPortInitialiseStack+0x54>)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3b14      	subs	r3, #20
 800614a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3b20      	subs	r3, #32
 8006156:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006158:	68fb      	ldr	r3, [r7, #12]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr
 8006164:	08006169 	.word	0x08006169

08006168 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800616e:	2300      	movs	r3, #0
 8006170:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006172:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <prvTaskExitError+0x4c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d009      	beq.n	8006190 <prvTaskExitError+0x28>
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	e7fe      	b.n	800618e <prvTaskExitError+0x26>
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061a2:	bf00      	nop
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0fc      	beq.n	80061a4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061aa:	bf00      	nop
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr
 80061b4:	2000000c 	.word	0x2000000c
	...

080061c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <pxCurrentTCBConst2>)
 80061c2:	6819      	ldr	r1, [r3, #0]
 80061c4:	6808      	ldr	r0, [r1, #0]
 80061c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061ca:	f380 8809 	msr	PSP, r0
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f04f 0000 	mov.w	r0, #0
 80061d6:	f380 8811 	msr	BASEPRI, r0
 80061da:	f04e 0e0d 	orr.w	lr, lr, #13
 80061de:	4770      	bx	lr

080061e0 <pxCurrentTCBConst2>:
 80061e0:	200002f4 	.word	0x200002f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop

080061e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80061e8:	4806      	ldr	r0, [pc, #24]	; (8006204 <prvPortStartFirstTask+0x1c>)
 80061ea:	6800      	ldr	r0, [r0, #0]
 80061ec:	6800      	ldr	r0, [r0, #0]
 80061ee:	f380 8808 	msr	MSP, r0
 80061f2:	b662      	cpsie	i
 80061f4:	b661      	cpsie	f
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	df00      	svc	0
 8006200:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006202:	bf00      	nop
 8006204:	e000ed08 	.word	0xe000ed08

08006208 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800620e:	4b31      	ldr	r3, [pc, #196]	; (80062d4 <xPortStartScheduler+0xcc>)
 8006210:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	22ff      	movs	r2, #255	; 0xff
 800621e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006230:	b2da      	uxtb	r2, r3
 8006232:	4b29      	ldr	r3, [pc, #164]	; (80062d8 <xPortStartScheduler+0xd0>)
 8006234:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006236:	4b29      	ldr	r3, [pc, #164]	; (80062dc <xPortStartScheduler+0xd4>)
 8006238:	2207      	movs	r2, #7
 800623a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800623c:	e009      	b.n	8006252 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800623e:	4b27      	ldr	r3, [pc, #156]	; (80062dc <xPortStartScheduler+0xd4>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3b01      	subs	r3, #1
 8006244:	4a25      	ldr	r2, [pc, #148]	; (80062dc <xPortStartScheduler+0xd4>)
 8006246:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	b2db      	uxtb	r3, r3
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	b2db      	uxtb	r3, r3
 8006250:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006252:	78fb      	ldrb	r3, [r7, #3]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625a:	2b80      	cmp	r3, #128	; 0x80
 800625c:	d0ef      	beq.n	800623e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800625e:	4b1f      	ldr	r3, [pc, #124]	; (80062dc <xPortStartScheduler+0xd4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f1c3 0307 	rsb	r3, r3, #7
 8006266:	2b04      	cmp	r3, #4
 8006268:	d009      	beq.n	800627e <xPortStartScheduler+0x76>
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	60bb      	str	r3, [r7, #8]
 800627c:	e7fe      	b.n	800627c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800627e:	4b17      	ldr	r3, [pc, #92]	; (80062dc <xPortStartScheduler+0xd4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	4a15      	ldr	r2, [pc, #84]	; (80062dc <xPortStartScheduler+0xd4>)
 8006286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006288:	4b14      	ldr	r3, [pc, #80]	; (80062dc <xPortStartScheduler+0xd4>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006290:	4a12      	ldr	r2, [pc, #72]	; (80062dc <xPortStartScheduler+0xd4>)
 8006292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	b2da      	uxtb	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800629c:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <xPortStartScheduler+0xd8>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0f      	ldr	r2, [pc, #60]	; (80062e0 <xPortStartScheduler+0xd8>)
 80062a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062a8:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <xPortStartScheduler+0xd8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a0c      	ldr	r2, [pc, #48]	; (80062e0 <xPortStartScheduler+0xd8>)
 80062ae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062b4:	f000 f8b0 	bl	8006418 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062b8:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <xPortStartScheduler+0xdc>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062be:	f7ff ff93 	bl	80061e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062c2:	f7ff fbe5 	bl	8005a90 <vTaskSwitchContext>
	prvTaskExitError();
 80062c6:	f7ff ff4f 	bl	8006168 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	e000e400 	.word	0xe000e400
 80062d8:	20000420 	.word	0x20000420
 80062dc:	20000424 	.word	0x20000424
 80062e0:	e000ed20 	.word	0xe000ed20
 80062e4:	2000000c 	.word	0x2000000c

080062e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006300:	4b0e      	ldr	r3, [pc, #56]	; (800633c <vPortEnterCritical+0x54>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3301      	adds	r3, #1
 8006306:	4a0d      	ldr	r2, [pc, #52]	; (800633c <vPortEnterCritical+0x54>)
 8006308:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800630a:	4b0c      	ldr	r3, [pc, #48]	; (800633c <vPortEnterCritical+0x54>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d10e      	bne.n	8006330 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006312:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <vPortEnterCritical+0x58>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d009      	beq.n	8006330 <vPortEnterCritical+0x48>
 800631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	603b      	str	r3, [r7, #0]
 800632e:	e7fe      	b.n	800632e <vPortEnterCritical+0x46>
	}
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	bc80      	pop	{r7}
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	2000000c 	.word	0x2000000c
 8006340:	e000ed04 	.word	0xe000ed04

08006344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800634a:	4b10      	ldr	r3, [pc, #64]	; (800638c <vPortExitCritical+0x48>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d109      	bne.n	8006366 <vPortExitCritical+0x22>
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	607b      	str	r3, [r7, #4]
 8006364:	e7fe      	b.n	8006364 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006366:	4b09      	ldr	r3, [pc, #36]	; (800638c <vPortExitCritical+0x48>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3b01      	subs	r3, #1
 800636c:	4a07      	ldr	r2, [pc, #28]	; (800638c <vPortExitCritical+0x48>)
 800636e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006370:	4b06      	ldr	r3, [pc, #24]	; (800638c <vPortExitCritical+0x48>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <vPortExitCritical+0x3e>
 8006378:	2300      	movs	r3, #0
 800637a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr
 800638c:	2000000c 	.word	0x2000000c

08006390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006390:	f3ef 8009 	mrs	r0, PSP
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	4b0d      	ldr	r3, [pc, #52]	; (80063d0 <pxCurrentTCBConst>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063a0:	6010      	str	r0, [r2, #0]
 80063a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80063a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063aa:	f380 8811 	msr	BASEPRI, r0
 80063ae:	f7ff fb6f 	bl	8005a90 <vTaskSwitchContext>
 80063b2:	f04f 0000 	mov.w	r0, #0
 80063b6:	f380 8811 	msr	BASEPRI, r0
 80063ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80063be:	6819      	ldr	r1, [r3, #0]
 80063c0:	6808      	ldr	r0, [r1, #0]
 80063c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063c6:	f380 8809 	msr	PSP, r0
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	4770      	bx	lr

080063d0 <pxCurrentTCBConst>:
 80063d0:	200002f4 	.word	0x200002f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop

080063d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063f0:	f7ff fa92 	bl	8005918 <xTaskIncrementTick>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063fa:	4b06      	ldr	r3, [pc, #24]	; (8006414 <xPortSysTickHandler+0x3c>)
 80063fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	2300      	movs	r3, #0
 8006404:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800640c:	bf00      	nop
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	e000ed04 	.word	0xe000ed04

08006418 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800641c:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <vPortSetupTimerInterrupt+0x30>)
 800641e:	2200      	movs	r2, #0
 8006420:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006422:	4b0a      	ldr	r3, [pc, #40]	; (800644c <vPortSetupTimerInterrupt+0x34>)
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006428:	4b09      	ldr	r3, [pc, #36]	; (8006450 <vPortSetupTimerInterrupt+0x38>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a09      	ldr	r2, [pc, #36]	; (8006454 <vPortSetupTimerInterrupt+0x3c>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	099b      	lsrs	r3, r3, #6
 8006434:	4a08      	ldr	r2, [pc, #32]	; (8006458 <vPortSetupTimerInterrupt+0x40>)
 8006436:	3b01      	subs	r3, #1
 8006438:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800643a:	4b03      	ldr	r3, [pc, #12]	; (8006448 <vPortSetupTimerInterrupt+0x30>)
 800643c:	2207      	movs	r2, #7
 800643e:	601a      	str	r2, [r3, #0]
}
 8006440:	bf00      	nop
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr
 8006448:	e000e010 	.word	0xe000e010
 800644c:	e000e018 	.word	0xe000e018
 8006450:	20000000 	.word	0x20000000
 8006454:	10624dd3 	.word	0x10624dd3
 8006458:	e000e014 	.word	0xe000e014

0800645c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006462:	f3ef 8305 	mrs	r3, IPSR
 8006466:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b0f      	cmp	r3, #15
 800646c:	d913      	bls.n	8006496 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800646e:	4a15      	ldr	r2, [pc, #84]	; (80064c4 <vPortValidateInterruptPriority+0x68>)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4413      	add	r3, r2
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006478:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <vPortValidateInterruptPriority+0x6c>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	7afa      	ldrb	r2, [r7, #11]
 800647e:	429a      	cmp	r2, r3
 8006480:	d209      	bcs.n	8006496 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	607b      	str	r3, [r7, #4]
 8006494:	e7fe      	b.n	8006494 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006496:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <vPortValidateInterruptPriority+0x70>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800649e:	4b0c      	ldr	r3, [pc, #48]	; (80064d0 <vPortValidateInterruptPriority+0x74>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d909      	bls.n	80064ba <vPortValidateInterruptPriority+0x5e>
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	e7fe      	b.n	80064b8 <vPortValidateInterruptPriority+0x5c>
	}
 80064ba:	bf00      	nop
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr
 80064c4:	e000e3f0 	.word	0xe000e3f0
 80064c8:	20000420 	.word	0x20000420
 80064cc:	e000ed0c 	.word	0xe000ed0c
 80064d0:	20000424 	.word	0x20000424

080064d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08a      	sub	sp, #40	; 0x28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064dc:	2300      	movs	r3, #0
 80064de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064e0:	f7ff f970 	bl	80057c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064e4:	4b57      	ldr	r3, [pc, #348]	; (8006644 <pvPortMalloc+0x170>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064ec:	f000 f90c 	bl	8006708 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064f0:	4b55      	ldr	r3, [pc, #340]	; (8006648 <pvPortMalloc+0x174>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4013      	ands	r3, r2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f040 808c 	bne.w	8006616 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01c      	beq.n	800653e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006504:	2208      	movs	r2, #8
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4413      	add	r3, r2
 800650a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	2b00      	cmp	r3, #0
 8006514:	d013      	beq.n	800653e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f023 0307 	bic.w	r3, r3, #7
 800651c:	3308      	adds	r3, #8
 800651e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	2b00      	cmp	r3, #0
 8006528:	d009      	beq.n	800653e <pvPortMalloc+0x6a>
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e7fe      	b.n	800653c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d068      	beq.n	8006616 <pvPortMalloc+0x142>
 8006544:	4b41      	ldr	r3, [pc, #260]	; (800664c <pvPortMalloc+0x178>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	429a      	cmp	r2, r3
 800654c:	d863      	bhi.n	8006616 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800654e:	4b40      	ldr	r3, [pc, #256]	; (8006650 <pvPortMalloc+0x17c>)
 8006550:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006552:	4b3f      	ldr	r3, [pc, #252]	; (8006650 <pvPortMalloc+0x17c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006558:	e004      	b.n	8006564 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d903      	bls.n	8006576 <pvPortMalloc+0xa2>
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1f1      	bne.n	800655a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006576:	4b33      	ldr	r3, [pc, #204]	; (8006644 <pvPortMalloc+0x170>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657c:	429a      	cmp	r2, r3
 800657e:	d04a      	beq.n	8006616 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2208      	movs	r2, #8
 8006586:	4413      	add	r3, r2
 8006588:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	1ad2      	subs	r2, r2, r3
 800659a:	2308      	movs	r3, #8
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	429a      	cmp	r2, r3
 80065a0:	d91e      	bls.n	80065e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4413      	add	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d009      	beq.n	80065c8 <pvPortMalloc+0xf4>
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	e7fe      	b.n	80065c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	1ad2      	subs	r2, r2, r3
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065da:	69b8      	ldr	r0, [r7, #24]
 80065dc:	f000 f8f6 	bl	80067cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065e0:	4b1a      	ldr	r3, [pc, #104]	; (800664c <pvPortMalloc+0x178>)
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	4a18      	ldr	r2, [pc, #96]	; (800664c <pvPortMalloc+0x178>)
 80065ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065ee:	4b17      	ldr	r3, [pc, #92]	; (800664c <pvPortMalloc+0x178>)
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b18      	ldr	r3, [pc, #96]	; (8006654 <pvPortMalloc+0x180>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d203      	bcs.n	8006602 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <pvPortMalloc+0x178>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a15      	ldr	r2, [pc, #84]	; (8006654 <pvPortMalloc+0x180>)
 8006600:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	4b10      	ldr	r3, [pc, #64]	; (8006648 <pvPortMalloc+0x174>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	431a      	orrs	r2, r3
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006616:	f7ff f8e3 	bl	80057e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	2b00      	cmp	r3, #0
 8006622:	d009      	beq.n	8006638 <pvPortMalloc+0x164>
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	e7fe      	b.n	8006636 <pvPortMalloc+0x162>
	return pvReturn;
 8006638:	69fb      	ldr	r3, [r7, #28]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3728      	adds	r7, #40	; 0x28
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20001030 	.word	0x20001030
 8006648:	2000103c 	.word	0x2000103c
 800664c:	20001034 	.word	0x20001034
 8006650:	20001028 	.word	0x20001028
 8006654:	20001038 	.word	0x20001038

08006658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d046      	beq.n	80066f8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800666a:	2308      	movs	r3, #8
 800666c:	425b      	negs	r3, r3
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4413      	add	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	4b20      	ldr	r3, [pc, #128]	; (8006700 <vPortFree+0xa8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4013      	ands	r3, r2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <vPortFree+0x42>
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	e7fe      	b.n	8006698 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <vPortFree+0x5e>
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	60bb      	str	r3, [r7, #8]
 80066b4:	e7fe      	b.n	80066b4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	4b11      	ldr	r3, [pc, #68]	; (8006700 <vPortFree+0xa8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4013      	ands	r3, r2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d019      	beq.n	80066f8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d115      	bne.n	80066f8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <vPortFree+0xa8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	43db      	mvns	r3, r3
 80066d6:	401a      	ands	r2, r3
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066dc:	f7ff f872 	bl	80057c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	4b07      	ldr	r3, [pc, #28]	; (8006704 <vPortFree+0xac>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4413      	add	r3, r2
 80066ea:	4a06      	ldr	r2, [pc, #24]	; (8006704 <vPortFree+0xac>)
 80066ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066ee:	6938      	ldr	r0, [r7, #16]
 80066f0:	f000 f86c 	bl	80067cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80066f4:	f7ff f874 	bl	80057e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066f8:	bf00      	nop
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	2000103c 	.word	0x2000103c
 8006704:	20001034 	.word	0x20001034

08006708 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800670e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006712:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006714:	4b27      	ldr	r3, [pc, #156]	; (80067b4 <prvHeapInit+0xac>)
 8006716:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00c      	beq.n	800673c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3307      	adds	r3, #7
 8006726:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0307 	bic.w	r3, r3, #7
 800672e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	4a1f      	ldr	r2, [pc, #124]	; (80067b4 <prvHeapInit+0xac>)
 8006738:	4413      	add	r3, r2
 800673a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006740:	4a1d      	ldr	r2, [pc, #116]	; (80067b8 <prvHeapInit+0xb0>)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006746:	4b1c      	ldr	r3, [pc, #112]	; (80067b8 <prvHeapInit+0xb0>)
 8006748:	2200      	movs	r2, #0
 800674a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	4413      	add	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006754:	2208      	movs	r2, #8
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	1a9b      	subs	r3, r3, r2
 800675a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0307 	bic.w	r3, r3, #7
 8006762:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4a15      	ldr	r2, [pc, #84]	; (80067bc <prvHeapInit+0xb4>)
 8006768:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800676a:	4b14      	ldr	r3, [pc, #80]	; (80067bc <prvHeapInit+0xb4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2200      	movs	r2, #0
 8006770:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006772:	4b12      	ldr	r3, [pc, #72]	; (80067bc <prvHeapInit+0xb4>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	1ad2      	subs	r2, r2, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006788:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <prvHeapInit+0xb4>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	4a0a      	ldr	r2, [pc, #40]	; (80067c0 <prvHeapInit+0xb8>)
 8006796:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	4a09      	ldr	r2, [pc, #36]	; (80067c4 <prvHeapInit+0xbc>)
 800679e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067a0:	4b09      	ldr	r3, [pc, #36]	; (80067c8 <prvHeapInit+0xc0>)
 80067a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067a6:	601a      	str	r2, [r3, #0]
}
 80067a8:	bf00      	nop
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bc80      	pop	{r7}
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	20000428 	.word	0x20000428
 80067b8:	20001028 	.word	0x20001028
 80067bc:	20001030 	.word	0x20001030
 80067c0:	20001038 	.word	0x20001038
 80067c4:	20001034 	.word	0x20001034
 80067c8:	2000103c 	.word	0x2000103c

080067cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067d4:	4b27      	ldr	r3, [pc, #156]	; (8006874 <prvInsertBlockIntoFreeList+0xa8>)
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	e002      	b.n	80067e0 <prvInsertBlockIntoFreeList+0x14>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d8f7      	bhi.n	80067da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	4413      	add	r3, r2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d108      	bne.n	800680e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	441a      	add	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	441a      	add	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d118      	bne.n	8006854 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b14      	ldr	r3, [pc, #80]	; (8006878 <prvInsertBlockIntoFreeList+0xac>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d00d      	beq.n	800684a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	441a      	add	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e008      	b.n	800685c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800684a:	4b0b      	ldr	r3, [pc, #44]	; (8006878 <prvInsertBlockIntoFreeList+0xac>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	e003      	b.n	800685c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d002      	beq.n	800686a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800686a:	bf00      	nop
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr
 8006874:	20001028 	.word	0x20001028
 8006878:	20001030 	.word	0x20001030

0800687c <__errno>:
 800687c:	4b01      	ldr	r3, [pc, #4]	; (8006884 <__errno+0x8>)
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20000010 	.word	0x20000010

08006888 <__libc_init_array>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	2500      	movs	r5, #0
 800688c:	4e0c      	ldr	r6, [pc, #48]	; (80068c0 <__libc_init_array+0x38>)
 800688e:	4c0d      	ldr	r4, [pc, #52]	; (80068c4 <__libc_init_array+0x3c>)
 8006890:	1ba4      	subs	r4, r4, r6
 8006892:	10a4      	asrs	r4, r4, #2
 8006894:	42a5      	cmp	r5, r4
 8006896:	d109      	bne.n	80068ac <__libc_init_array+0x24>
 8006898:	f000 f8a2 	bl	80069e0 <_init>
 800689c:	2500      	movs	r5, #0
 800689e:	4e0a      	ldr	r6, [pc, #40]	; (80068c8 <__libc_init_array+0x40>)
 80068a0:	4c0a      	ldr	r4, [pc, #40]	; (80068cc <__libc_init_array+0x44>)
 80068a2:	1ba4      	subs	r4, r4, r6
 80068a4:	10a4      	asrs	r4, r4, #2
 80068a6:	42a5      	cmp	r5, r4
 80068a8:	d105      	bne.n	80068b6 <__libc_init_array+0x2e>
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
 80068ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068b0:	4798      	blx	r3
 80068b2:	3501      	adds	r5, #1
 80068b4:	e7ee      	b.n	8006894 <__libc_init_array+0xc>
 80068b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068ba:	4798      	blx	r3
 80068bc:	3501      	adds	r5, #1
 80068be:	e7f2      	b.n	80068a6 <__libc_init_array+0x1e>
 80068c0:	08006ab4 	.word	0x08006ab4
 80068c4:	08006ab4 	.word	0x08006ab4
 80068c8:	08006ab4 	.word	0x08006ab4
 80068cc:	08006ab8 	.word	0x08006ab8

080068d0 <malloc>:
 80068d0:	4b02      	ldr	r3, [pc, #8]	; (80068dc <malloc+0xc>)
 80068d2:	4601      	mov	r1, r0
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	f000 b817 	b.w	8006908 <_malloc_r>
 80068da:	bf00      	nop
 80068dc:	20000010 	.word	0x20000010

080068e0 <memcpy>:
 80068e0:	b510      	push	{r4, lr}
 80068e2:	1e43      	subs	r3, r0, #1
 80068e4:	440a      	add	r2, r1
 80068e6:	4291      	cmp	r1, r2
 80068e8:	d100      	bne.n	80068ec <memcpy+0xc>
 80068ea:	bd10      	pop	{r4, pc}
 80068ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068f4:	e7f7      	b.n	80068e6 <memcpy+0x6>

080068f6 <memset>:
 80068f6:	4603      	mov	r3, r0
 80068f8:	4402      	add	r2, r0
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d100      	bne.n	8006900 <memset+0xa>
 80068fe:	4770      	bx	lr
 8006900:	f803 1b01 	strb.w	r1, [r3], #1
 8006904:	e7f9      	b.n	80068fa <memset+0x4>
	...

08006908 <_malloc_r>:
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	1ccd      	adds	r5, r1, #3
 800690c:	f025 0503 	bic.w	r5, r5, #3
 8006910:	3508      	adds	r5, #8
 8006912:	2d0c      	cmp	r5, #12
 8006914:	bf38      	it	cc
 8006916:	250c      	movcc	r5, #12
 8006918:	2d00      	cmp	r5, #0
 800691a:	4606      	mov	r6, r0
 800691c:	db01      	blt.n	8006922 <_malloc_r+0x1a>
 800691e:	42a9      	cmp	r1, r5
 8006920:	d903      	bls.n	800692a <_malloc_r+0x22>
 8006922:	230c      	movs	r3, #12
 8006924:	6033      	str	r3, [r6, #0]
 8006926:	2000      	movs	r0, #0
 8006928:	bd70      	pop	{r4, r5, r6, pc}
 800692a:	f000 f857 	bl	80069dc <__malloc_lock>
 800692e:	4a21      	ldr	r2, [pc, #132]	; (80069b4 <_malloc_r+0xac>)
 8006930:	6814      	ldr	r4, [r2, #0]
 8006932:	4621      	mov	r1, r4
 8006934:	b991      	cbnz	r1, 800695c <_malloc_r+0x54>
 8006936:	4c20      	ldr	r4, [pc, #128]	; (80069b8 <_malloc_r+0xb0>)
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	b91b      	cbnz	r3, 8006944 <_malloc_r+0x3c>
 800693c:	4630      	mov	r0, r6
 800693e:	f000 f83d 	bl	80069bc <_sbrk_r>
 8006942:	6020      	str	r0, [r4, #0]
 8006944:	4629      	mov	r1, r5
 8006946:	4630      	mov	r0, r6
 8006948:	f000 f838 	bl	80069bc <_sbrk_r>
 800694c:	1c43      	adds	r3, r0, #1
 800694e:	d124      	bne.n	800699a <_malloc_r+0x92>
 8006950:	230c      	movs	r3, #12
 8006952:	4630      	mov	r0, r6
 8006954:	6033      	str	r3, [r6, #0]
 8006956:	f000 f842 	bl	80069de <__malloc_unlock>
 800695a:	e7e4      	b.n	8006926 <_malloc_r+0x1e>
 800695c:	680b      	ldr	r3, [r1, #0]
 800695e:	1b5b      	subs	r3, r3, r5
 8006960:	d418      	bmi.n	8006994 <_malloc_r+0x8c>
 8006962:	2b0b      	cmp	r3, #11
 8006964:	d90f      	bls.n	8006986 <_malloc_r+0x7e>
 8006966:	600b      	str	r3, [r1, #0]
 8006968:	18cc      	adds	r4, r1, r3
 800696a:	50cd      	str	r5, [r1, r3]
 800696c:	4630      	mov	r0, r6
 800696e:	f000 f836 	bl	80069de <__malloc_unlock>
 8006972:	f104 000b 	add.w	r0, r4, #11
 8006976:	1d23      	adds	r3, r4, #4
 8006978:	f020 0007 	bic.w	r0, r0, #7
 800697c:	1ac3      	subs	r3, r0, r3
 800697e:	d0d3      	beq.n	8006928 <_malloc_r+0x20>
 8006980:	425a      	negs	r2, r3
 8006982:	50e2      	str	r2, [r4, r3]
 8006984:	e7d0      	b.n	8006928 <_malloc_r+0x20>
 8006986:	684b      	ldr	r3, [r1, #4]
 8006988:	428c      	cmp	r4, r1
 800698a:	bf16      	itet	ne
 800698c:	6063      	strne	r3, [r4, #4]
 800698e:	6013      	streq	r3, [r2, #0]
 8006990:	460c      	movne	r4, r1
 8006992:	e7eb      	b.n	800696c <_malloc_r+0x64>
 8006994:	460c      	mov	r4, r1
 8006996:	6849      	ldr	r1, [r1, #4]
 8006998:	e7cc      	b.n	8006934 <_malloc_r+0x2c>
 800699a:	1cc4      	adds	r4, r0, #3
 800699c:	f024 0403 	bic.w	r4, r4, #3
 80069a0:	42a0      	cmp	r0, r4
 80069a2:	d005      	beq.n	80069b0 <_malloc_r+0xa8>
 80069a4:	1a21      	subs	r1, r4, r0
 80069a6:	4630      	mov	r0, r6
 80069a8:	f000 f808 	bl	80069bc <_sbrk_r>
 80069ac:	3001      	adds	r0, #1
 80069ae:	d0cf      	beq.n	8006950 <_malloc_r+0x48>
 80069b0:	6025      	str	r5, [r4, #0]
 80069b2:	e7db      	b.n	800696c <_malloc_r+0x64>
 80069b4:	20001040 	.word	0x20001040
 80069b8:	20001044 	.word	0x20001044

080069bc <_sbrk_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	2300      	movs	r3, #0
 80069c0:	4c05      	ldr	r4, [pc, #20]	; (80069d8 <_sbrk_r+0x1c>)
 80069c2:	4605      	mov	r5, r0
 80069c4:	4608      	mov	r0, r1
 80069c6:	6023      	str	r3, [r4, #0]
 80069c8:	f7fa fda4 	bl	8001514 <_sbrk>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	d102      	bne.n	80069d6 <_sbrk_r+0x1a>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	b103      	cbz	r3, 80069d6 <_sbrk_r+0x1a>
 80069d4:	602b      	str	r3, [r5, #0]
 80069d6:	bd38      	pop	{r3, r4, r5, pc}
 80069d8:	200011f8 	.word	0x200011f8

080069dc <__malloc_lock>:
 80069dc:	4770      	bx	lr

080069de <__malloc_unlock>:
 80069de:	4770      	bx	lr

080069e0 <_init>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	bf00      	nop
 80069e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e6:	bc08      	pop	{r3}
 80069e8:	469e      	mov	lr, r3
 80069ea:	4770      	bx	lr

080069ec <_fini>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	bf00      	nop
 80069f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f2:	bc08      	pop	{r3}
 80069f4:	469e      	mov	lr, r3
 80069f6:	4770      	bx	lr
