
CAN_node_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a190  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002058  0800a2a0  0800a2a0  0001a2a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2f8  0800c2f8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800c2f8  0800c2f8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c2f8  0800c2f8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2f8  0800c2f8  0001c2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2fc  0800c2fc  0001c2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800c300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a8  20000088  0800c388  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001630  0800c388  00021630  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc1f  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c52  00000000  00000000  0003bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001740  00000000  00000000  0003f928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001580  00000000  00000000  00041068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b8a3  00000000  00000000  000425e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013355  00000000  00000000  0005de8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c73a  00000000  00000000  000711e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d91a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068c0  00000000  00000000  0010d998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a288 	.word	0x0800a288

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	0800a288 	.word	0x0800a288

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_frsub>:
 8000a8c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a90:	e002      	b.n	8000a98 <__addsf3>
 8000a92:	bf00      	nop

08000a94 <__aeabi_fsub>:
 8000a94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a98 <__addsf3>:
 8000a98:	0042      	lsls	r2, r0, #1
 8000a9a:	bf1f      	itttt	ne
 8000a9c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa0:	ea92 0f03 	teqne	r2, r3
 8000aa4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aac:	d06a      	beq.n	8000b84 <__addsf3+0xec>
 8000aae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ab2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab6:	bfc1      	itttt	gt
 8000ab8:	18d2      	addgt	r2, r2, r3
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	4048      	eorgt	r0, r1
 8000abe:	4041      	eorgt	r1, r0
 8000ac0:	bfb8      	it	lt
 8000ac2:	425b      	neglt	r3, r3
 8000ac4:	2b19      	cmp	r3, #25
 8000ac6:	bf88      	it	hi
 8000ac8:	4770      	bxhi	lr
 8000aca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ae2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4249      	negne	r1, r1
 8000aea:	ea92 0f03 	teq	r2, r3
 8000aee:	d03f      	beq.n	8000b70 <__addsf3+0xd8>
 8000af0:	f1a2 0201 	sub.w	r2, r2, #1
 8000af4:	fa41 fc03 	asr.w	ip, r1, r3
 8000af8:	eb10 000c 	adds.w	r0, r0, ip
 8000afc:	f1c3 0320 	rsb	r3, r3, #32
 8000b00:	fa01 f103 	lsl.w	r1, r1, r3
 8000b04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b08:	d502      	bpl.n	8000b10 <__addsf3+0x78>
 8000b0a:	4249      	negs	r1, r1
 8000b0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b14:	d313      	bcc.n	8000b3e <__addsf3+0xa6>
 8000b16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b1a:	d306      	bcc.n	8000b2a <__addsf3+0x92>
 8000b1c:	0840      	lsrs	r0, r0, #1
 8000b1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b22:	f102 0201 	add.w	r2, r2, #1
 8000b26:	2afe      	cmp	r2, #254	; 0xfe
 8000b28:	d251      	bcs.n	8000bce <__addsf3+0x136>
 8000b2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b32:	bf08      	it	eq
 8000b34:	f020 0001 	biceq.w	r0, r0, #1
 8000b38:	ea40 0003 	orr.w	r0, r0, r3
 8000b3c:	4770      	bx	lr
 8000b3e:	0049      	lsls	r1, r1, #1
 8000b40:	eb40 0000 	adc.w	r0, r0, r0
 8000b44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b48:	f1a2 0201 	sub.w	r2, r2, #1
 8000b4c:	d1ed      	bne.n	8000b2a <__addsf3+0x92>
 8000b4e:	fab0 fc80 	clz	ip, r0
 8000b52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b56:	ebb2 020c 	subs.w	r2, r2, ip
 8000b5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5e:	bfaa      	itet	ge
 8000b60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b64:	4252      	neglt	r2, r2
 8000b66:	4318      	orrge	r0, r3
 8000b68:	bfbc      	itt	lt
 8000b6a:	40d0      	lsrlt	r0, r2
 8000b6c:	4318      	orrlt	r0, r3
 8000b6e:	4770      	bx	lr
 8000b70:	f092 0f00 	teq	r2, #0
 8000b74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b78:	bf06      	itte	eq
 8000b7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7e:	3201      	addeq	r2, #1
 8000b80:	3b01      	subne	r3, #1
 8000b82:	e7b5      	b.n	8000af0 <__addsf3+0x58>
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d021      	beq.n	8000bd8 <__addsf3+0x140>
 8000b94:	ea92 0f03 	teq	r2, r3
 8000b98:	d004      	beq.n	8000ba4 <__addsf3+0x10c>
 8000b9a:	f092 0f00 	teq	r2, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	4608      	moveq	r0, r1
 8000ba2:	4770      	bx	lr
 8000ba4:	ea90 0f01 	teq	r0, r1
 8000ba8:	bf1c      	itt	ne
 8000baa:	2000      	movne	r0, #0
 8000bac:	4770      	bxne	lr
 8000bae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bb2:	d104      	bne.n	8000bbe <__addsf3+0x126>
 8000bb4:	0040      	lsls	r0, r0, #1
 8000bb6:	bf28      	it	cs
 8000bb8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bbc:	4770      	bx	lr
 8000bbe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bc2:	bf3c      	itt	cc
 8000bc4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bxcc	lr
 8000bca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	4770      	bx	lr
 8000bd8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bdc:	bf16      	itet	ne
 8000bde:	4608      	movne	r0, r1
 8000be0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be4:	4601      	movne	r1, r0
 8000be6:	0242      	lsls	r2, r0, #9
 8000be8:	bf06      	itte	eq
 8000bea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bee:	ea90 0f01 	teqeq	r0, r1
 8000bf2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_ui2f>:
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	e004      	b.n	8000c08 <__aeabi_i2f+0x8>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_i2f>:
 8000c00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	bf48      	it	mi
 8000c06:	4240      	negmi	r0, r0
 8000c08:	ea5f 0c00 	movs.w	ip, r0
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c14:	4601      	mov	r1, r0
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	e01c      	b.n	8000c56 <__aeabi_l2f+0x2a>

08000c1c <__aeabi_ul2f>:
 8000c1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c20:	bf08      	it	eq
 8000c22:	4770      	bxeq	lr
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e00a      	b.n	8000c40 <__aeabi_l2f+0x14>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_l2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c38:	d502      	bpl.n	8000c40 <__aeabi_l2f+0x14>
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	ea5f 0c01 	movs.w	ip, r1
 8000c44:	bf02      	ittt	eq
 8000c46:	4684      	moveq	ip, r0
 8000c48:	4601      	moveq	r1, r0
 8000c4a:	2000      	moveq	r0, #0
 8000c4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c50:	bf08      	it	eq
 8000c52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c5a:	fabc f28c 	clz	r2, ip
 8000c5e:	3a08      	subs	r2, #8
 8000c60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c64:	db10      	blt.n	8000c88 <__aeabi_l2f+0x5c>
 8000c66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c70:	f1c2 0220 	rsb	r2, r2, #32
 8000c74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c78:	fa20 f202 	lsr.w	r2, r0, r2
 8000c7c:	eb43 0002 	adc.w	r0, r3, r2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f102 0220 	add.w	r2, r2, #32
 8000c8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c98:	fa21 f202 	lsr.w	r2, r1, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_fmul>:
 8000ca8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb0:	bf1e      	ittt	ne
 8000cb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb6:	ea92 0f0c 	teqne	r2, ip
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d06f      	beq.n	8000da0 <__aeabi_fmul+0xf8>
 8000cc0:	441a      	add	r2, r3
 8000cc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc6:	0240      	lsls	r0, r0, #9
 8000cc8:	bf18      	it	ne
 8000cca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cce:	d01e      	beq.n	8000d0e <__aeabi_fmul+0x66>
 8000cd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000ce0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce8:	bf3e      	ittt	cc
 8000cea:	0049      	lslcc	r1, r1, #1
 8000cec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cf0:	005b      	lslcc	r3, r3, #1
 8000cf2:	ea40 0001 	orr.w	r0, r0, r1
 8000cf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cfa:	2afd      	cmp	r2, #253	; 0xfd
 8000cfc:	d81d      	bhi.n	8000d3a <__aeabi_fmul+0x92>
 8000cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d06:	bf08      	it	eq
 8000d08:	f020 0001 	biceq.w	r0, r0, #1
 8000d0c:	4770      	bx	lr
 8000d0e:	f090 0f00 	teq	r0, #0
 8000d12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d16:	bf08      	it	eq
 8000d18:	0249      	lsleq	r1, r1, #9
 8000d1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d22:	3a7f      	subs	r2, #127	; 0x7f
 8000d24:	bfc2      	ittt	gt
 8000d26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2e:	4770      	bxgt	lr
 8000d30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	dc5d      	bgt.n	8000df8 <__aeabi_fmul+0x150>
 8000d3c:	f112 0f19 	cmn.w	r2, #25
 8000d40:	bfdc      	itt	le
 8000d42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d46:	4770      	bxle	lr
 8000d48:	f1c2 0200 	rsb	r2, r2, #0
 8000d4c:	0041      	lsls	r1, r0, #1
 8000d4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d52:	f1c2 0220 	rsb	r2, r2, #32
 8000d56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5e:	f140 0000 	adc.w	r0, r0, #0
 8000d62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d66:	bf08      	it	eq
 8000d68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6c:	4770      	bx	lr
 8000d6e:	f092 0f00 	teq	r2, #0
 8000d72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d76:	bf02      	ittt	eq
 8000d78:	0040      	lsleq	r0, r0, #1
 8000d7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7e:	3a01      	subeq	r2, #1
 8000d80:	d0f9      	beq.n	8000d76 <__aeabi_fmul+0xce>
 8000d82:	ea40 000c 	orr.w	r0, r0, ip
 8000d86:	f093 0f00 	teq	r3, #0
 8000d8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8e:	bf02      	ittt	eq
 8000d90:	0049      	lsleq	r1, r1, #1
 8000d92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d96:	3b01      	subeq	r3, #1
 8000d98:	d0f9      	beq.n	8000d8e <__aeabi_fmul+0xe6>
 8000d9a:	ea41 010c 	orr.w	r1, r1, ip
 8000d9e:	e78f      	b.n	8000cc0 <__aeabi_fmul+0x18>
 8000da0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da4:	ea92 0f0c 	teq	r2, ip
 8000da8:	bf18      	it	ne
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d00a      	beq.n	8000dc6 <__aeabi_fmul+0x11e>
 8000db0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db4:	bf18      	it	ne
 8000db6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	d1d8      	bne.n	8000d6e <__aeabi_fmul+0xc6>
 8000dbc:	ea80 0001 	eor.w	r0, r0, r1
 8000dc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	4770      	bx	lr
 8000dc6:	f090 0f00 	teq	r0, #0
 8000dca:	bf17      	itett	ne
 8000dcc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dd0:	4608      	moveq	r0, r1
 8000dd2:	f091 0f00 	teqne	r1, #0
 8000dd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dda:	d014      	beq.n	8000e06 <__aeabi_fmul+0x15e>
 8000ddc:	ea92 0f0c 	teq	r2, ip
 8000de0:	d101      	bne.n	8000de6 <__aeabi_fmul+0x13e>
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	d10f      	bne.n	8000e06 <__aeabi_fmul+0x15e>
 8000de6:	ea93 0f0c 	teq	r3, ip
 8000dea:	d103      	bne.n	8000df4 <__aeabi_fmul+0x14c>
 8000dec:	024b      	lsls	r3, r1, #9
 8000dee:	bf18      	it	ne
 8000df0:	4608      	movne	r0, r1
 8000df2:	d108      	bne.n	8000e06 <__aeabi_fmul+0x15e>
 8000df4:	ea80 0001 	eor.w	r0, r0, r1
 8000df8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bx	lr
 8000e06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_fdiv>:
 8000e10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e18:	bf1e      	ittt	ne
 8000e1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1e:	ea92 0f0c 	teqne	r2, ip
 8000e22:	ea93 0f0c 	teqne	r3, ip
 8000e26:	d069      	beq.n	8000efc <__aeabi_fdiv+0xec>
 8000e28:	eba2 0203 	sub.w	r2, r2, r3
 8000e2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e30:	0249      	lsls	r1, r1, #9
 8000e32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e36:	d037      	beq.n	8000ea8 <__aeabi_fdiv+0x98>
 8000e38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	bf38      	it	cc
 8000e4c:	005b      	lslcc	r3, r3, #1
 8000e4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e56:	428b      	cmp	r3, r1
 8000e58:	bf24      	itt	cs
 8000e5a:	1a5b      	subcs	r3, r3, r1
 8000e5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e64:	bf24      	itt	cs
 8000e66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e72:	bf24      	itt	cs
 8000e74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e80:	bf24      	itt	cs
 8000e82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	bf18      	it	ne
 8000e8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e92:	d1e0      	bne.n	8000e56 <__aeabi_fdiv+0x46>
 8000e94:	2afd      	cmp	r2, #253	; 0xfd
 8000e96:	f63f af50 	bhi.w	8000d3a <__aeabi_fmul+0x92>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ea0:	bf08      	it	eq
 8000ea2:	f020 0001 	biceq.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eb0:	327f      	adds	r2, #127	; 0x7f
 8000eb2:	bfc2      	ittt	gt
 8000eb4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ebc:	4770      	bxgt	lr
 8000ebe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec2:	f04f 0300 	mov.w	r3, #0
 8000ec6:	3a01      	subs	r2, #1
 8000ec8:	e737      	b.n	8000d3a <__aeabi_fmul+0x92>
 8000eca:	f092 0f00 	teq	r2, #0
 8000ece:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ed2:	bf02      	ittt	eq
 8000ed4:	0040      	lsleq	r0, r0, #1
 8000ed6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eda:	3a01      	subeq	r2, #1
 8000edc:	d0f9      	beq.n	8000ed2 <__aeabi_fdiv+0xc2>
 8000ede:	ea40 000c 	orr.w	r0, r0, ip
 8000ee2:	f093 0f00 	teq	r3, #0
 8000ee6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0049      	lsleq	r1, r1, #1
 8000eee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ef2:	3b01      	subeq	r3, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fdiv+0xda>
 8000ef6:	ea41 010c 	orr.w	r1, r1, ip
 8000efa:	e795      	b.n	8000e28 <__aeabi_fdiv+0x18>
 8000efc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	d108      	bne.n	8000f18 <__aeabi_fdiv+0x108>
 8000f06:	0242      	lsls	r2, r0, #9
 8000f08:	f47f af7d 	bne.w	8000e06 <__aeabi_fmul+0x15e>
 8000f0c:	ea93 0f0c 	teq	r3, ip
 8000f10:	f47f af70 	bne.w	8000df4 <__aeabi_fmul+0x14c>
 8000f14:	4608      	mov	r0, r1
 8000f16:	e776      	b.n	8000e06 <__aeabi_fmul+0x15e>
 8000f18:	ea93 0f0c 	teq	r3, ip
 8000f1c:	d104      	bne.n	8000f28 <__aeabi_fdiv+0x118>
 8000f1e:	024b      	lsls	r3, r1, #9
 8000f20:	f43f af4c 	beq.w	8000dbc <__aeabi_fmul+0x114>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e76e      	b.n	8000e06 <__aeabi_fmul+0x15e>
 8000f28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f2c:	bf18      	it	ne
 8000f2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f32:	d1ca      	bne.n	8000eca <__aeabi_fdiv+0xba>
 8000f34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f38:	f47f af5c 	bne.w	8000df4 <__aeabi_fmul+0x14c>
 8000f3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f40:	f47f af3c 	bne.w	8000dbc <__aeabi_fmul+0x114>
 8000f44:	e75f      	b.n	8000e06 <__aeabi_fmul+0x15e>
 8000f46:	bf00      	nop

08000f48 <__aeabi_f2uiz>:
 8000f48:	0042      	lsls	r2, r0, #1
 8000f4a:	d20e      	bcs.n	8000f6a <__aeabi_f2uiz+0x22>
 8000f4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f50:	d30b      	bcc.n	8000f6a <__aeabi_f2uiz+0x22>
 8000f52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f5a:	d409      	bmi.n	8000f70 <__aeabi_f2uiz+0x28>
 8000f5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	4770      	bx	lr
 8000f70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f74:	d101      	bne.n	8000f7a <__aeabi_f2uiz+0x32>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	d102      	bne.n	8000f80 <__aeabi_f2uiz+0x38>
 8000f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7e:	4770      	bx	lr
 8000f80:	f04f 0000 	mov.w	r0, #0
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <vApplicationGetIdleTaskMemory+0x28>)
 8000f98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	200000a4 	.word	0x200000a4
 8000fb4:	200000f8 	.word	0x200000f8

08000fb8 <create_kalman>:
 *      Author: tantr
 */
#include "kalman_filter.h"

kalman_t * create_kalman (float mea_e, float est_e, float q)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
    kalman_t * kalman_instance = (kalman_t *)malloc(sizeof(kalman_t));
 8000fc4:	2018      	movs	r0, #24
 8000fc6:	f007 fd1b 	bl	8008a00 <malloc>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	617b      	str	r3, [r7, #20]
    kalman_instance->_current_estimate = 0;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
    kalman_instance->_last_estimate = 0;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
    kalman_instance->_kalman_gain = 0;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
    kalman_instance->_err_measure = mea_e;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	601a      	str	r2, [r3, #0]
    kalman_instance->_err_estimate = est_e;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	605a      	str	r2, [r3, #4]
    kalman_instance->_q = q;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
    return kalman_instance;
 8000ff8:	697b      	ldr	r3, [r7, #20]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <update_kalman>:

float update_kalman (kalman_t * kalman, float value)
{
 8001002:	b5b0      	push	{r4, r5, r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
    kalman->_kalman_gain = kalman->_err_estimate / (kalman->_err_estimate + kalman->_err_measure);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685c      	ldr	r4, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	4610      	mov	r0, r2
 800101c:	f7ff fd3c 	bl	8000a98 <__addsf3>
 8001020:	4603      	mov	r3, r0
 8001022:	4619      	mov	r1, r3
 8001024:	4620      	mov	r0, r4
 8001026:	f7ff fef3 	bl	8000e10 <__aeabi_fdiv>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	615a      	str	r2, [r3, #20]
    kalman->_current_estimate = kalman->_last_estimate + kalman->_kalman_gain * (value - kalman->_last_estimate);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691c      	ldr	r4, [r3, #16]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	695d      	ldr	r5, [r3, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	4619      	mov	r1, r3
 8001040:	6838      	ldr	r0, [r7, #0]
 8001042:	f7ff fd27 	bl	8000a94 <__aeabi_fsub>
 8001046:	4603      	mov	r3, r0
 8001048:	4619      	mov	r1, r3
 800104a:	4628      	mov	r0, r5
 800104c:	f7ff fe2c 	bl	8000ca8 <__aeabi_fmul>
 8001050:	4603      	mov	r3, r0
 8001052:	4619      	mov	r1, r3
 8001054:	4620      	mov	r0, r4
 8001056:	f7ff fd1f 	bl	8000a98 <__addsf3>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60da      	str	r2, [r3, #12]
    kalman->_err_estimate = (1.0f - kalman->_kalman_gain) * kalman->_err_estimate + fabsf(kalman->_last_estimate - kalman->_current_estimate) * kalman->_q;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800106c:	f7ff fd12 	bl	8000a94 <__aeabi_fsub>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	4619      	mov	r1, r3
 800107a:	4610      	mov	r0, r2
 800107c:	f7ff fe14 	bl	8000ca8 <__aeabi_fmul>
 8001080:	4603      	mov	r3, r0
 8001082:	461c      	mov	r4, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	4619      	mov	r1, r3
 800108e:	4610      	mov	r0, r2
 8001090:	f7ff fd00 	bl	8000a94 <__aeabi_fsub>
 8001094:	4603      	mov	r3, r0
 8001096:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	4619      	mov	r1, r3
 80010a0:	4610      	mov	r0, r2
 80010a2:	f7ff fe01 	bl	8000ca8 <__aeabi_fmul>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4619      	mov	r1, r3
 80010aa:	4620      	mov	r0, r4
 80010ac:	f7ff fcf4 	bl	8000a98 <__addsf3>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	605a      	str	r2, [r3, #4]
    kalman->_last_estimate = kalman->_current_estimate;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	611a      	str	r2, [r3, #16]

    return kalman->_current_estimate;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}

080010cc <clear_buff>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clear_buff (uint8_t * buff_clear, size_t num)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	if (buff_clear == NULL) return;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <clear_buff+0x1c>

	memset(buff_clear, 0, num);
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	2100      	movs	r1, #0
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f007 fca0 	bl	8008a26 <memset>
 80010e6:	e000      	b.n	80010ea <clear_buff+0x1e>
	if (buff_clear == NULL) return;
 80010e8:	bf00      	nop
}
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <prepare_buff_send>:

void prepare_buff_send ()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
	static uint16_t pre_steering = 0;
	static uint16_t pre_light = 0;

	uint16_t current_value;
	osEvent q_message;
	uint8_t * p_buff_ptr = (uint8_t *)&current_value;
 80010f6:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24

	tx_header.IDE = CAN_ID_STD;
 80010fc:	4b6b      	ldr	r3, [pc, #428]	; (80012ac <prepare_buff_send+0x1bc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]

	/* get element from throttle queue to send motor node control speed motor */
	q_message = osMessageGet(q_throttle_controlHandle, 0);
 8001102:	4b6b      	ldr	r3, [pc, #428]	; (80012b0 <prepare_buff_send+0x1c0>)
 8001104:	6819      	ldr	r1, [r3, #0]
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	2200      	movs	r2, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f005 fb85 	bl	800681c <osMessageGet>

	/* get a message in q_throttle_control if it is not empty */
	if (q_message.status == osEventMessage)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b10      	cmp	r3, #16
 8001116:	d145      	bne.n	80011a4 <prepare_buff_send+0xb4>
	{
		/* check if the value has changed, then send a message */
		current_value = (uint16_t)q_message.value.v;
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	b29b      	uxth	r3, r3
 800111c:	847b      	strh	r3, [r7, #34]	; 0x22
		tmp_adc_value = (current_value*299/4028);
 800111e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001120:	461a      	mov	r2, r3
 8001122:	f240 132b 	movw	r3, #299	; 0x12b
 8001126:	fb03 f302 	mul.w	r3, r3, r2
 800112a:	4a62      	ldr	r2, [pc, #392]	; (80012b4 <prepare_buff_send+0x1c4>)
 800112c:	fb82 1203 	smull	r1, r2, r2, r3
 8001130:	1212      	asrs	r2, r2, #8
 8001132:	17db      	asrs	r3, r3, #31
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b5f      	ldr	r3, [pc, #380]	; (80012b8 <prepare_buff_send+0x1c8>)
 800113a:	801a      	strh	r2, [r3, #0]
		if (abs(current_value - pre_throttle) > 10)
 800113c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800113e:	461a      	mov	r2, r3
 8001140:	4b5e      	ldr	r3, [pc, #376]	; (80012bc <prepare_buff_send+0x1cc>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	bfb8      	it	lt
 800114a:	425b      	neglt	r3, r3
 800114c:	2b0a      	cmp	r3, #10
 800114e:	dd29      	ble.n	80011a4 <prepare_buff_send+0xb4>
		{
			pre_throttle = current_value;
 8001150:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001152:	4b5a      	ldr	r3, [pc, #360]	; (80012bc <prepare_buff_send+0x1cc>)
 8001154:	801a      	strh	r2, [r3, #0]
			tx_header.StdId = 0x100;
 8001156:	4b55      	ldr	r3, [pc, #340]	; (80012ac <prepare_buff_send+0x1bc>)
 8001158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115c:	601a      	str	r2, [r3, #0]
			tx_header.RTR = CAN_RTR_DATA;
 800115e:	4b53      	ldr	r3, [pc, #332]	; (80012ac <prepare_buff_send+0x1bc>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
			tx_header.DLC = 2;
 8001164:	4b51      	ldr	r3, [pc, #324]	; (80012ac <prepare_buff_send+0x1bc>)
 8001166:	2202      	movs	r2, #2
 8001168:	611a      	str	r2, [r3, #16]

			tx_data[0] = *p_buff_ptr;
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	4b54      	ldr	r3, [pc, #336]	; (80012c0 <prepare_buff_send+0x1d0>)
 8001170:	701a      	strb	r2, [r3, #0]
			p_buff_ptr++;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
			tx_data[1] = *p_buff_ptr;
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <prepare_buff_send+0x1d0>)
 800117e:	705a      	strb	r2, [r3, #1]
			if (HAL_CAN_AddTxMessage(&hcan, &tx_header, tx_data, &tx_mailbox) != HAL_OK)
 8001180:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <prepare_buff_send+0x1d4>)
 8001182:	4a4f      	ldr	r2, [pc, #316]	; (80012c0 <prepare_buff_send+0x1d0>)
 8001184:	4949      	ldr	r1, [pc, #292]	; (80012ac <prepare_buff_send+0x1bc>)
 8001186:	4850      	ldr	r0, [pc, #320]	; (80012c8 <prepare_buff_send+0x1d8>)
 8001188:	f002 fcf6 	bl	8003b78 <HAL_CAN_AddTxMessage>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <prepare_buff_send+0xa6>
			{
			   Error_Handler ();
 8001192:	f000 fd83 	bl	8001c9c <Error_Handler>
			}
			clear_buff(&tx_data, sizeof(uint8_t)*8);
 8001196:	2108      	movs	r1, #8
 8001198:	4849      	ldr	r0, [pc, #292]	; (80012c0 <prepare_buff_send+0x1d0>)
 800119a:	f7ff ff97 	bl	80010cc <clear_buff>
			p_buff_ptr = &current_value;
 800119e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	/* get element from steering queue to send motor node control angle servo */
	q_message = osMessageGet(q_steering_controlHandle, 0);
 80011a4:	4b49      	ldr	r3, [pc, #292]	; (80012cc <prepare_buff_send+0x1dc>)
 80011a6:	6819      	ldr	r1, [r3, #0]
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f005 fb35 	bl	800681c <osMessageGet>
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	463a      	mov	r2, r7
 80011b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* get a message in q_steering_control if it is not empty */
	if (q_message.status == osEventMessage)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b10      	cmp	r3, #16
 80011c2:	d136      	bne.n	8001232 <prepare_buff_send+0x142>
	{
		/* check if the value has changed, then send a message */
		current_value = (uint16_t)q_message.value.v;
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	847b      	strh	r3, [r7, #34]	; 0x22
		if (abs(current_value - pre_steering) > 10)
 80011ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <prepare_buff_send+0x1e0>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	bfb8      	it	lt
 80011d8:	425b      	neglt	r3, r3
 80011da:	2b0a      	cmp	r3, #10
 80011dc:	dd29      	ble.n	8001232 <prepare_buff_send+0x142>
		{
			pre_steering = current_value;
 80011de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80011e0:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <prepare_buff_send+0x1e0>)
 80011e2:	801a      	strh	r2, [r3, #0]
			tx_header.StdId = 0x110;
 80011e4:	4b31      	ldr	r3, [pc, #196]	; (80012ac <prepare_buff_send+0x1bc>)
 80011e6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80011ea:	601a      	str	r2, [r3, #0]
			tx_header.RTR = CAN_RTR_DATA;
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <prepare_buff_send+0x1bc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
			tx_header.DLC = 2;
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <prepare_buff_send+0x1bc>)
 80011f4:	2202      	movs	r2, #2
 80011f6:	611a      	str	r2, [r3, #16]

			tx_data[0] = *p_buff_ptr;
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <prepare_buff_send+0x1d0>)
 80011fe:	701a      	strb	r2, [r3, #0]
			p_buff_ptr++;
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	3301      	adds	r3, #1
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
			tx_data[1] = *p_buff_ptr;
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <prepare_buff_send+0x1d0>)
 800120c:	705a      	strb	r2, [r3, #1]
			if (HAL_CAN_AddTxMessage(&hcan, &tx_header, tx_data, &tx_mailbox) != HAL_OK)
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <prepare_buff_send+0x1d4>)
 8001210:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <prepare_buff_send+0x1d0>)
 8001212:	4926      	ldr	r1, [pc, #152]	; (80012ac <prepare_buff_send+0x1bc>)
 8001214:	482c      	ldr	r0, [pc, #176]	; (80012c8 <prepare_buff_send+0x1d8>)
 8001216:	f002 fcaf 	bl	8003b78 <HAL_CAN_AddTxMessage>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <prepare_buff_send+0x134>
			{
			   Error_Handler ();
 8001220:	f000 fd3c 	bl	8001c9c <Error_Handler>
			}
			clear_buff(&tx_data, sizeof(uint8_t)*8);
 8001224:	2108      	movs	r1, #8
 8001226:	4826      	ldr	r0, [pc, #152]	; (80012c0 <prepare_buff_send+0x1d0>)
 8001228:	f7ff ff50 	bl	80010cc <clear_buff>
			p_buff_ptr = &current_value;
 800122c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	/* get element from light queue to send light node control light */
	q_message = osMessageGet(q_turn_signalHandle, 0);
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <prepare_buff_send+0x1e4>)
 8001234:	6819      	ldr	r1, [r3, #0]
 8001236:	463b      	mov	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f005 faee 	bl	800681c <osMessageGet>
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	463a      	mov	r2, r7
 8001246:	ca07      	ldmia	r2, {r0, r1, r2}
 8001248:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* get a message in q_light_control if it is not empty */
	if (q_message.status == osEventMessage)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	2b10      	cmp	r3, #16
 8001250:	d127      	bne.n	80012a2 <prepare_buff_send+0x1b2>
	{
		current_value = (uint16_t)q_message.value.v;
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	b29b      	uxth	r3, r3
 8001256:	847b      	strh	r3, [r7, #34]	; 0x22
		if (current_value != pre_light)
 8001258:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <prepare_buff_send+0x1e8>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d01f      	beq.n	80012a2 <prepare_buff_send+0x1b2>
		{
			pre_light = current_value;
 8001262:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <prepare_buff_send+0x1e8>)
 8001266:	801a      	strh	r2, [r3, #0]
			tx_header.StdId = 0x210;
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <prepare_buff_send+0x1bc>)
 800126a:	f44f 7204 	mov.w	r2, #528	; 0x210
 800126e:	601a      	str	r2, [r3, #0]
			tx_header.RTR = CAN_RTR_DATA;
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <prepare_buff_send+0x1bc>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
			tx_header.DLC = 1;
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <prepare_buff_send+0x1bc>)
 8001278:	2201      	movs	r2, #1
 800127a:	611a      	str	r2, [r3, #16]

			tx_data[0] = current_value;
 800127c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <prepare_buff_send+0x1d0>)
 8001282:	701a      	strb	r2, [r3, #0]
			if (HAL_CAN_AddTxMessage(&hcan, &tx_header, tx_data, &tx_mailbox) != HAL_OK)
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <prepare_buff_send+0x1d4>)
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <prepare_buff_send+0x1d0>)
 8001288:	4908      	ldr	r1, [pc, #32]	; (80012ac <prepare_buff_send+0x1bc>)
 800128a:	480f      	ldr	r0, [pc, #60]	; (80012c8 <prepare_buff_send+0x1d8>)
 800128c:	f002 fc74 	bl	8003b78 <HAL_CAN_AddTxMessage>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <prepare_buff_send+0x1aa>
			{
			   Error_Handler ();
 8001296:	f000 fd01 	bl	8001c9c <Error_Handler>
			}
			clear_buff(&tx_data, sizeof(uint8_t)*8);
 800129a:	2108      	movs	r1, #8
 800129c:	4808      	ldr	r0, [pc, #32]	; (80012c0 <prepare_buff_send+0x1d0>)
 800129e:	f7ff ff15 	bl	80010cc <clear_buff>

		}
	}
}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20001560 	.word	0x20001560
 80012b0:	20001474 	.word	0x20001474
 80012b4:	104525e1 	.word	0x104525e1
 80012b8:	200015c4 	.word	0x200015c4
 80012bc:	200002fc 	.word	0x200002fc
 80012c0:	20001620 	.word	0x20001620
 80012c4:	20001518 	.word	0x20001518
 80012c8:	200014f0 	.word	0x200014f0
 80012cc:	20001550 	.word	0x20001550
 80012d0:	200002fe 	.word	0x200002fe
 80012d4:	20001610 	.word	0x20001610
 80012d8:	20000300 	.word	0x20000300

080012dc <emergency_buff_send>:

void emergency_buff_send ()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	tx_header.IDE = CAN_ID_STD;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <emergency_buff_send+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]

	/* stop motor emergency */
	if (status_motor == 0)
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <emergency_buff_send+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d114      	bne.n	8001318 <emergency_buff_send+0x3c>
	{
		tx_header.StdId = 0x102;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <emergency_buff_send+0x40>)
 80012f0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80012f4:	601a      	str	r2, [r3, #0]
		tx_header.RTR = CAN_RTR_DATA;
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <emergency_buff_send+0x40>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
		tx_header.DLC = 1;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <emergency_buff_send+0x40>)
 80012fe:	2201      	movs	r2, #1
 8001300:	611a      	str	r2, [r3, #16]

		if (HAL_CAN_AddTxMessage(&hcan, &tx_header, 0, &tx_mailbox) != HAL_OK)
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <emergency_buff_send+0x48>)
 8001304:	2200      	movs	r2, #0
 8001306:	4905      	ldr	r1, [pc, #20]	; (800131c <emergency_buff_send+0x40>)
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <emergency_buff_send+0x4c>)
 800130a:	f002 fc35 	bl	8003b78 <HAL_CAN_AddTxMessage>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <emergency_buff_send+0x3c>
		{
		   Error_Handler ();
 8001314:	f000 fcc2 	bl	8001c9c <Error_Handler>
		}
	}
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20001560 	.word	0x20001560
 8001320:	200002f8 	.word	0x200002f8
 8001324:	20001518 	.word	0x20001518
 8001328:	200014f0 	.word	0x200014f0

0800132c <HAL_ADC_ConvCpltCallback>:
		clear_buff(&tx_data, sizeof(uint8_t)*8);
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	  adc_value[0] = update_kalman(kalman_1, adc_value[0]);
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_ADC_ConvCpltCallback+0x60>)
 8001336:	681c      	ldr	r4, [r3, #0]
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_ADC_ConvCpltCallback+0x64>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fc5b 	bl	8000bf8 <__aeabi_ui2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4619      	mov	r1, r3
 8001346:	4620      	mov	r0, r4
 8001348:	f7ff fe5b 	bl	8001002 <update_kalman>
 800134c:	4603      	mov	r3, r0
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fdfa 	bl	8000f48 <__aeabi_f2uiz>
 8001354:	4603      	mov	r3, r0
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_ADC_ConvCpltCallback+0x64>)
 800135a:	801a      	strh	r2, [r3, #0]
	  adc_value[1] = update_kalman(kalman_2, adc_value[1]);
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_ADC_ConvCpltCallback+0x68>)
 800135e:	681c      	ldr	r4, [r3, #0]
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_ADC_ConvCpltCallback+0x64>)
 8001362:	885b      	ldrh	r3, [r3, #2]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fc47 	bl	8000bf8 <__aeabi_ui2f>
 800136a:	4603      	mov	r3, r0
 800136c:	4619      	mov	r1, r3
 800136e:	4620      	mov	r0, r4
 8001370:	f7ff fe47 	bl	8001002 <update_kalman>
 8001374:	4603      	mov	r3, r0
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fde6 	bl	8000f48 <__aeabi_f2uiz>
 800137c:	4603      	mov	r3, r0
 800137e:	b29a      	uxth	r2, r3
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_ADC_ConvCpltCallback+0x64>)
 8001382:	805a      	strh	r2, [r3, #2]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	20001558 	.word	0x20001558
 8001390:	2000151c 	.word	0x2000151c
 8001394:	2000161c 	.word	0x2000161c

08001398 <read_light_sw>:

void read_light_sw ()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	/* Set bit 0  */
	light_sw |= (1 << 0);
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <read_light_sw+0xa0>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b24      	ldr	r3, [pc, #144]	; (8001438 <read_light_sw+0xa0>)
 80013a8:	701a      	strb	r2, [r3, #0]

	/* ON/OFF hazard mode */
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET)
 80013aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ae:	4823      	ldr	r0, [pc, #140]	; (800143c <read_light_sw+0xa4>)
 80013b0:	f003 fc66 	bl	8004c80 <HAL_GPIO_ReadPin>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d107      	bne.n	80013ca <read_light_sw+0x32>
	{
		light_sw |= (1 << 1);
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <read_light_sw+0xa0>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <read_light_sw+0xa0>)
 80013c6:	701a      	strb	r2, [r3, #0]
 80013c8:	e006      	b.n	80013d8 <read_light_sw+0x40>
	}
	else
	{
		light_sw &= ~(1 << 1);
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <read_light_sw+0xa0>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	f023 0302 	bic.w	r3, r3, #2
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <read_light_sw+0xa0>)
 80013d6:	701a      	strb	r2, [r3, #0]
	}

	/* ON/OFF blinker left light */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80013d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013dc:	4818      	ldr	r0, [pc, #96]	; (8001440 <read_light_sw+0xa8>)
 80013de:	f003 fc4f 	bl	8004c80 <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d107      	bne.n	80013f8 <read_light_sw+0x60>
	{
		light_sw |= (1 << 2);
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <read_light_sw+0xa0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <read_light_sw+0xa0>)
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e006      	b.n	8001406 <read_light_sw+0x6e>
	}
	else
	{
		light_sw &= ~(1 << 2);
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <read_light_sw+0xa0>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	f023 0304 	bic.w	r3, r3, #4
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <read_light_sw+0xa0>)
 8001404:	701a      	strb	r2, [r3, #0]
	}

	/* ON/OFF blinker right light */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_RESET)
 8001406:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140a:	480d      	ldr	r0, [pc, #52]	; (8001440 <read_light_sw+0xa8>)
 800140c:	f003 fc38 	bl	8004c80 <HAL_GPIO_ReadPin>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d107      	bne.n	8001426 <read_light_sw+0x8e>
	{
		light_sw |= (1 << 3);
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <read_light_sw+0xa0>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f043 0308 	orr.w	r3, r3, #8
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <read_light_sw+0xa0>)
 8001422:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		light_sw &= ~(1 << 3);
	}
}
 8001424:	e006      	b.n	8001434 <read_light_sw+0x9c>
		light_sw &= ~(1 << 3);
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <read_light_sw+0xa0>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	f023 0308 	bic.w	r3, r3, #8
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b01      	ldr	r3, [pc, #4]	; (8001438 <read_light_sw+0xa0>)
 8001432:	701a      	strb	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200002fa 	.word	0x200002fa
 800143c:	40010c00 	.word	0x40010c00
 8001440:	40011000 	.word	0x40011000

08001444 <read_trim_button>:

void read_trim_button ()
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0

	/* trimming down steering */
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8001448:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144c:	4816      	ldr	r0, [pc, #88]	; (80014a8 <read_trim_button+0x64>)
 800144e:	f003 fc17 	bl	8004c80 <HAL_GPIO_ReadPin>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d107      	bne.n	8001468 <read_trim_button+0x24>
	{
		trim_button |= (1 << 0);
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <read_trim_button+0x68>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <read_trim_button+0x68>)
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	e006      	b.n	8001476 <read_trim_button+0x32>
	}
	else
	{
		trim_button &= ~(1 << 0);
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <read_trim_button+0x68>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <read_trim_button+0x68>)
 8001474:	701a      	strb	r2, [r3, #0]
	}

	/* trimming up steering */
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 8001476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147a:	480b      	ldr	r0, [pc, #44]	; (80014a8 <read_trim_button+0x64>)
 800147c:	f003 fc00 	bl	8004c80 <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d107      	bne.n	8001496 <read_trim_button+0x52>
	{
		trim_button |= (1 << 1);
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <read_trim_button+0x68>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <read_trim_button+0x68>)
 8001492:	701a      	strb	r2, [r3, #0]
	else
	{
		trim_button &= ~(1 << 1);
	}

}
 8001494:	e006      	b.n	80014a4 <read_trim_button+0x60>
		trim_button &= ~(1 << 1);
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <read_trim_button+0x68>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	f023 0302 	bic.w	r3, r3, #2
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b02      	ldr	r3, [pc, #8]	; (80014ac <read_trim_button+0x68>)
 80014a2:	701a      	strb	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	200002f9 	.word	0x200002f9

080014b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	static uint8_t 	tmp_cnt = 0;
	if (htim->Instance == htim2.Instance)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d10c      	bne.n	80014de <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		if (tmp_cnt > 49)
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b31      	cmp	r3, #49	; 0x31
 80014ca:	d902      	bls.n	80014d2 <HAL_TIM_PeriodElapsedCallback+0x22>
		{
			tmp_cnt = 0;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
		}
		tmp_cnt++;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80014dc:	701a      	strb	r2, [r3, #0]
	}
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	200015c8 	.word	0x200015c8
 80014ec:	20000302 	.word	0x20000302

080014f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) != HAL_OK)
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80014fc:	2100      	movs	r1, #0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f002 fc14 	bl	8003d2c <HAL_CAN_GetRxMessage>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	  {
	    Error_Handler();
 800150a:	f000 fbc7 	bl	8001c9c <Error_Handler>
	  }
	  if (rx_header.StdId == 0x211)
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f240 2211 	movw	r2, #529	; 0x211
 8001516:	4293      	cmp	r3, r2
 8001518:	d104      	bne.n	8001524 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	  {
		  tmp_disp(rx_data[0]);
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f80c 	bl	800153c <tmp_disp>
	  }
	  clear_buff(&rx_data, sizeof(uint8_t)*8);
 8001524:	2108      	movs	r1, #8
 8001526:	4803      	ldr	r0, [pc, #12]	; (8001534 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001528:	f7ff fdd0 	bl	80010cc <clear_buff>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200015bc 	.word	0x200015bc
 8001538:	2000147c 	.word	0x2000147c

0800153c <tmp_disp>:

void tmp_disp (uint8_t feedback_turn_signal)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
	if ((feedback_turn_signal >> 1) & 0x01)
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	085b      	lsrs	r3, r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <tmp_disp+0x20>
	{
		disp_toggle_turn_signal(hazard_blinker);
 8001554:	4810      	ldr	r0, [pc, #64]	; (8001598 <tmp_disp+0x5c>)
 8001556:	f001 f821 	bl	800259c <disp_toggle_turn_signal>
 800155a:	e017      	b.n	800158c <tmp_disp+0x50>
	}
	else if ((feedback_turn_signal >> 2) & 0x01)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <tmp_disp+0x36>
	{
		disp_toggle_turn_signal(left_blinker);
 800156a:	480c      	ldr	r0, [pc, #48]	; (800159c <tmp_disp+0x60>)
 800156c:	f001 f816 	bl	800259c <disp_toggle_turn_signal>
 8001570:	e00c      	b.n	800158c <tmp_disp+0x50>
	}
	else if ((feedback_turn_signal >> 3) & 0x01)
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <tmp_disp+0x4c>
	{
		disp_toggle_turn_signal(right_blinker);
 8001580:	4807      	ldr	r0, [pc, #28]	; (80015a0 <tmp_disp+0x64>)
 8001582:	f001 f80b 	bl	800259c <disp_toggle_turn_signal>
 8001586:	e001      	b.n	800158c <tmp_disp+0x50>
	}
	else
	{
		disp_off_turn_signal();
 8001588:	f001 f82c 	bl	80025e4 <disp_off_turn_signal>
	}
	ssd1306_UpdateScreen();
 800158c:	f000 fc44 	bl	8001e18 <ssd1306_UpdateScreen>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	0800bcd4 	.word	0x0800bcd4
 800159c:	0800b4d4 	.word	0x0800b4d4
 80015a0:	0800b8d4 	.word	0x0800b8d4

080015a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b0b2      	sub	sp, #200	; 0xc8
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015aa:	f001 fbc3 	bl	8002d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ae:	f000 f8f3 	bl	8001798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b2:	f000 fa85 	bl	8001ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 80015b6:	f000 fa65 	bl	8001a84 <MX_DMA_Init>
  MX_CAN_Init();
 80015ba:	f000 f997 	bl	80018ec <MX_CAN_Init>
  MX_I2C1_Init();
 80015be:	f000 f9e7 	bl	8001990 <MX_I2C1_Init>
  MX_TIM2_Init();
 80015c2:	f000 fa13 	bl	80019ec <MX_TIM2_Init>
  MX_ADC1_Init();
 80015c6:	f000 f943 	bl	8001850 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 80015ca:	485d      	ldr	r0, [pc, #372]	; (8001740 <main+0x19c>)
 80015cc:	f002 fa90 	bl	8003af0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80015d0:	2102      	movs	r1, #2
 80015d2:	485b      	ldr	r0, [pc, #364]	; (8001740 <main+0x19c>)
 80015d4:	f002 fcbb 	bl	8003f4e <HAL_CAN_ActivateNotification>
  kalman_1 = create_kalman(50, 50, 0.01);
 80015d8:	4a5a      	ldr	r2, [pc, #360]	; (8001744 <main+0x1a0>)
 80015da:	495b      	ldr	r1, [pc, #364]	; (8001748 <main+0x1a4>)
 80015dc:	485a      	ldr	r0, [pc, #360]	; (8001748 <main+0x1a4>)
 80015de:	f7ff fceb 	bl	8000fb8 <create_kalman>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <main+0x1a8>)
 80015e6:	601a      	str	r2, [r3, #0]
  kalman_2 = create_kalman(50, 50, 0.01);
 80015e8:	4a56      	ldr	r2, [pc, #344]	; (8001744 <main+0x1a0>)
 80015ea:	4957      	ldr	r1, [pc, #348]	; (8001748 <main+0x1a4>)
 80015ec:	4856      	ldr	r0, [pc, #344]	; (8001748 <main+0x1a4>)
 80015ee:	f7ff fce3 	bl	8000fb8 <create_kalman>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4b56      	ldr	r3, [pc, #344]	; (8001750 <main+0x1ac>)
 80015f6:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of q_steering_control */
  osMessageQDef(q_steering_control, 32, uint16_t);
 80015f8:	4b56      	ldr	r3, [pc, #344]	; (8001754 <main+0x1b0>)
 80015fa:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 80015fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_steering_controlHandle = osMessageCreate(osMessageQ(q_steering_control), NULL);
 8001604:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f005 f89d 	bl	800674a <osMessageCreate>
 8001610:	4602      	mov	r2, r0
 8001612:	4b51      	ldr	r3, [pc, #324]	; (8001758 <main+0x1b4>)
 8001614:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_throttle_control */
  osMessageQDef(q_throttle_control, 32, uint16_t);
 8001616:	4b4f      	ldr	r3, [pc, #316]	; (8001754 <main+0x1b0>)
 8001618:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800161c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800161e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_throttle_controlHandle = osMessageCreate(osMessageQ(q_throttle_control), NULL);
 8001622:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f005 f88e 	bl	800674a <osMessageCreate>
 800162e:	4602      	mov	r2, r0
 8001630:	4b4a      	ldr	r3, [pc, #296]	; (800175c <main+0x1b8>)
 8001632:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_turn_signal */
  osMessageQDef(q_turn_signal, 32, uint8_t);
 8001634:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <main+0x1bc>)
 8001636:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800163a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800163c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_turn_signalHandle = osMessageCreate(osMessageQ(q_turn_signal), NULL);
 8001640:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f005 f87f 	bl	800674a <osMessageCreate>
 800164c:	4602      	mov	r2, r0
 800164e:	4b45      	ldr	r3, [pc, #276]	; (8001764 <main+0x1c0>)
 8001650:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_trim_steering */
  osMessageQDef(q_trim_steering, 32, uint8_t);
 8001652:	4b43      	ldr	r3, [pc, #268]	; (8001760 <main+0x1bc>)
 8001654:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8001658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800165a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_trim_steeringHandle = osMessageCreate(osMessageQ(q_trim_steering), NULL);
 800165e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f005 f870 	bl	800674a <osMessageCreate>
 800166a:	4602      	mov	r2, r0
 800166c:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <main+0x1c4>)
 800166e:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_disp_steering */
  osMessageQDef(q_disp_steering, 16, uint16_t);
 8001670:	4b3e      	ldr	r3, [pc, #248]	; (800176c <main+0x1c8>)
 8001672:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_disp_steeringHandle = osMessageCreate(osMessageQ(q_disp_steering), NULL);
 800167c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f005 f861 	bl	800674a <osMessageCreate>
 8001688:	4602      	mov	r2, r0
 800168a:	4b39      	ldr	r3, [pc, #228]	; (8001770 <main+0x1cc>)
 800168c:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_disp_turn_signal */
  osMessageQDef(q_disp_turn_signal, 16, uint8_t);
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <main+0x1d0>)
 8001690:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001694:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001696:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_disp_turn_signalHandle = osMessageCreate(osMessageQ(q_disp_turn_signal), NULL);
 800169a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f005 f852 	bl	800674a <osMessageCreate>
 80016a6:	4602      	mov	r2, r0
 80016a8:	4b33      	ldr	r3, [pc, #204]	; (8001778 <main+0x1d4>)
 80016aa:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_disp_throttle */
  osMessageQDef(q_disp_throttle, 16, uint16_t);
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <main+0x1c8>)
 80016ae:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80016b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_disp_throttleHandle = osMessageCreate(osMessageQ(q_disp_throttle), NULL);
 80016b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f005 f843 	bl	800674a <osMessageCreate>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <main+0x1d8>)
 80016c8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of display */
  osThreadDef(display, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <main+0x1dc>)
 80016cc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80016d0:	461d      	mov	r5, r3
 80016d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayHandle = osThreadCreate(osThread(display), NULL);
 80016de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 ffd0 	bl	800668a <osThreadCreate>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <main+0x1e0>)
 80016ee:	601a      	str	r2, [r3, #0]

  /* definition and creation of send_message */
  osThreadDef(send_message, StartTask01, osPriorityNormal, 0, 128);
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <main+0x1e4>)
 80016f2:	f107 0420 	add.w	r4, r7, #32
 80016f6:	461d      	mov	r5, r3
 80016f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001700:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  send_messageHandle = osThreadCreate(osThread(send_message), NULL);
 8001704:	f107 0320 	add.w	r3, r7, #32
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f004 ffbd 	bl	800668a <osThreadCreate>
 8001710:	4602      	mov	r2, r0
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <main+0x1e8>)
 8001714:	601a      	str	r2, [r3, #0]

  /* definition and creation of dashboard */
  osThreadDef(dashboard, StartTask02, osPriorityNormal, 0, 128);
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <main+0x1ec>)
 8001718:	1d3c      	adds	r4, r7, #4
 800171a:	461d      	mov	r5, r3
 800171c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001720:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dashboardHandle = osThreadCreate(osThread(dashboard), NULL);
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f004 ffac 	bl	800668a <osThreadCreate>
 8001732:	4602      	mov	r2, r0
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <main+0x1f0>)
 8001736:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001738:	f004 ffa0 	bl	800667c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800173c:	e7fe      	b.n	800173c <main+0x198>
 800173e:	bf00      	nop
 8001740:	200014f0 	.word	0x200014f0
 8001744:	3c23d70a 	.word	0x3c23d70a
 8001748:	42480000 	.word	0x42480000
 800174c:	20001558 	.word	0x20001558
 8001750:	2000161c 	.word	0x2000161c
 8001754:	0800a2a0 	.word	0x0800a2a0
 8001758:	20001550 	.word	0x20001550
 800175c:	20001474 	.word	0x20001474
 8001760:	0800a2b0 	.word	0x0800a2b0
 8001764:	20001610 	.word	0x20001610
 8001768:	20001478 	.word	0x20001478
 800176c:	0800a2c0 	.word	0x0800a2c0
 8001770:	200014ec 	.word	0x200014ec
 8001774:	0800a2d0 	.word	0x0800a2d0
 8001778:	2000155c 	.word	0x2000155c
 800177c:	20001618 	.word	0x20001618
 8001780:	0800a2e8 	.word	0x0800a2e8
 8001784:	20001614 	.word	0x20001614
 8001788:	0800a314 	.word	0x0800a314
 800178c:	20001554 	.word	0x20001554
 8001790:	0800a33c 	.word	0x0800a33c
 8001794:	20001470 	.word	0x20001470

08001798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b094      	sub	sp, #80	; 0x50
 800179c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a2:	2228      	movs	r2, #40	; 0x28
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f007 f93d 	bl	8008a26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c8:	2301      	movs	r3, #1
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d6:	2301      	movs	r3, #1
 80017d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017da:	2302      	movs	r3, #2
 80017dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 fec4 	bl	800557c <HAL_RCC_OscConfig>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017fa:	f000 fa4f 	bl	8001c9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fe:	230f      	movs	r3, #15
 8001800:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001802:	2302      	movs	r3, #2
 8001804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800180a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2102      	movs	r1, #2
 800181a:	4618      	mov	r0, r3
 800181c:	f004 f92e 	bl	8005a7c <HAL_RCC_ClockConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001826:	f000 fa39 	bl	8001c9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800182a:	2302      	movs	r3, #2
 800182c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800182e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001832:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	4618      	mov	r0, r3
 8001838:	f004 faa8 	bl	8005d8c <HAL_RCCEx_PeriphCLKConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001842:	f000 fa2b 	bl	8001c9c <Error_Handler>
  }
}
 8001846:	bf00      	nop
 8001848:	3750      	adds	r7, #80	; 0x50
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <MX_ADC1_Init+0x94>)
 8001862:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <MX_ADC1_Init+0x98>)
 8001864:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <MX_ADC1_Init+0x94>)
 8001868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800186c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <MX_ADC1_Init+0x94>)
 8001870:	2201      	movs	r2, #1
 8001872:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <MX_ADC1_Init+0x94>)
 8001876:	2200      	movs	r2, #0
 8001878:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_ADC1_Init+0x94>)
 800187c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001880:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_ADC1_Init+0x94>)
 8001884:	2200      	movs	r2, #0
 8001886:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_ADC1_Init+0x94>)
 800188a:	2202      	movs	r2, #2
 800188c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800188e:	4815      	ldr	r0, [pc, #84]	; (80018e4 <MX_ADC1_Init+0x94>)
 8001890:	f001 fad4 	bl	8002e3c <HAL_ADC_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800189a:	f000 f9ff 	bl	8001c9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80018a6:	2307      	movs	r3, #7
 80018a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	480d      	ldr	r0, [pc, #52]	; (80018e4 <MX_ADC1_Init+0x94>)
 80018b0:	f001 fd58 	bl	8003364 <HAL_ADC_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80018ba:	f000 f9ef 	bl	8001c9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018be:	2301      	movs	r3, #1
 80018c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018c2:	2302      	movs	r3, #2
 80018c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	4619      	mov	r1, r3
 80018ca:	4806      	ldr	r0, [pc, #24]	; (80018e4 <MX_ADC1_Init+0x94>)
 80018cc:	f001 fd4a 	bl	8003364 <HAL_ADC_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80018d6:	f000 f9e1 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20001520 	.word	0x20001520
 80018e8:	40012400 	.word	0x40012400

080018ec <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <MX_CAN_Init+0x9c>)
 80018f4:	4a25      	ldr	r2, [pc, #148]	; (800198c <MX_CAN_Init+0xa0>)
 80018f6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80018f8:	4b23      	ldr	r3, [pc, #140]	; (8001988 <MX_CAN_Init+0x9c>)
 80018fa:	2209      	movs	r2, #9
 80018fc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <MX_CAN_Init+0x9c>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001904:	4b20      	ldr	r3, [pc, #128]	; (8001988 <MX_CAN_Init+0x9c>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 800190a:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <MX_CAN_Init+0x9c>)
 800190c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001910:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <MX_CAN_Init+0x9c>)
 8001914:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001918:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800191a:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <MX_CAN_Init+0x9c>)
 800191c:	2200      	movs	r2, #0
 800191e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <MX_CAN_Init+0x9c>)
 8001922:	2200      	movs	r2, #0
 8001924:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <MX_CAN_Init+0x9c>)
 8001928:	2200      	movs	r2, #0
 800192a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <MX_CAN_Init+0x9c>)
 800192e:	2200      	movs	r2, #0
 8001930:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <MX_CAN_Init+0x9c>)
 8001934:	2200      	movs	r2, #0
 8001936:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <MX_CAN_Init+0x9c>)
 800193a:	2200      	movs	r2, #0
 800193c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800193e:	4812      	ldr	r0, [pc, #72]	; (8001988 <MX_CAN_Init+0x9c>)
 8001940:	f001 ff12 	bl	8003768 <HAL_CAN_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800194a:	f000 f9a7 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = ENABLE;
 800194e:	2301      	movs	r3, #1
 8001950:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterIdHigh = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800196e:	2301      	movs	r3, #1
 8001970:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 10;
 8001972:	230a      	movs	r3, #10
 8001974:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001976:	463b      	mov	r3, r7
 8001978:	4619      	mov	r1, r3
 800197a:	4803      	ldr	r0, [pc, #12]	; (8001988 <MX_CAN_Init+0x9c>)
 800197c:	f001 ffef 	bl	800395e <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200014f0 	.word	0x200014f0
 800198c:	40006400 	.word	0x40006400

08001990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_I2C1_Init+0x50>)
 8001996:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <MX_I2C1_Init+0x54>)
 8001998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_I2C1_Init+0x50>)
 800199c:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <MX_I2C1_Init+0x58>)
 800199e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019ce:	f003 f987 	bl	8004ce0 <HAL_I2C_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019d8:	f000 f960 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20001498 	.word	0x20001498
 80019e4:	40005400 	.word	0x40005400
 80019e8:	00061a80 	.word	0x00061a80

080019ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a00:	463b      	mov	r3, r7
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <MX_TIM2_Init+0x94>)
 8001a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <MX_TIM2_Init+0x94>)
 8001a12:	2247      	movs	r2, #71	; 0x47
 8001a14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <MX_TIM2_Init+0x94>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <MX_TIM2_Init+0x94>)
 8001a1e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_TIM2_Init+0x94>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <MX_TIM2_Init+0x94>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a30:	4813      	ldr	r0, [pc, #76]	; (8001a80 <MX_TIM2_Init+0x94>)
 8001a32:	f004 fa61 	bl	8005ef8 <HAL_TIM_Base_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a3c:	f000 f92e 	bl	8001c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <MX_TIM2_Init+0x94>)
 8001a4e:	f004 fbaa 	bl	80061a6 <HAL_TIM_ConfigClockSource>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a58:	f000 f920 	bl	8001c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a64:	463b      	mov	r3, r7
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_TIM2_Init+0x94>)
 8001a6a:	f004 fd6f 	bl	800654c <HAL_TIMEx_MasterConfigSynchronization>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a74:	f000 f912 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200015c8 	.word	0x200015c8

08001a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_DMA_Init+0x38>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <MX_DMA_Init+0x38>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6153      	str	r3, [r2, #20]
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_DMA_Init+0x38>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2105      	movs	r1, #5
 8001aa6:	200b      	movs	r0, #11
 8001aa8:	f002 fd6b 	bl	8004582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001aac:	200b      	movs	r0, #11
 8001aae:	f002 fd84 	bl	80045ba <HAL_NVIC_EnableIRQ>

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000

08001ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a2f      	ldr	r2, [pc, #188]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001ada:	f043 0310 	orr.w	r3, r3, #16
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aec:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a29      	ldr	r2, [pc, #164]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001af2:	f043 0320 	orr.w	r3, r3, #32
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <MX_GPIO_Init+0xd8>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2104      	movs	r1, #4
 8001b38:	4818      	ldr	r0, [pc, #96]	; (8001b9c <MX_GPIO_Init+0xdc>)
 8001b3a:	f003 f8b8 	bl	8004cae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b3e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	4619      	mov	r1, r3
 8001b52:	4813      	ldr	r0, [pc, #76]	; (8001ba0 <MX_GPIO_Init+0xe0>)
 8001b54:	f002 ff3a 	bl	80049cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b58:	2304      	movs	r3, #4
 8001b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480b      	ldr	r0, [pc, #44]	; (8001b9c <MX_GPIO_Init+0xdc>)
 8001b70:	f002 ff2c 	bl	80049cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001b74:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001b78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	4619      	mov	r1, r3
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <MX_GPIO_Init+0xdc>)
 8001b8a:	f002 ff1f 	bl	80049cc <HAL_GPIO_Init>

}
 8001b8e:	bf00      	nop
 8001b90:	3720      	adds	r7, #32
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010c00 	.word	0x40010c00
 8001ba0:	40011000 	.word	0x40011000

08001ba4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
				/* this task is displays information */
  /* Infinite loop */
	disp_draw_dashboard();
 8001bac:	f000 fba8 	bl	8002300 <disp_draw_dashboard>
	for(;;)
  {
	disp_msg_uint(tmp_adc_value, 95, 40);
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <StartDefaultTask+0x28>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	2228      	movs	r2, #40	; 0x28
 8001bb6:	215f      	movs	r1, #95	; 0x5f
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fb81 	bl	80022c0 <disp_msg_uint>
	disp_needle_speed(tmp_adc_value);
 8001bbe:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <StartDefaultTask+0x28>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fd40 	bl	8002648 <disp_needle_speed>
  {
 8001bc8:	e7f2      	b.n	8001bb0 <StartDefaultTask+0xc>
 8001bca:	bf00      	nop
 8001bcc:	200015c4 	.word	0x200015c4

08001bd0 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
				/* this task is prepares message and send message */
  /* Infinite loop */
  for(;;)
  {
	emergency_buff_send();
 8001bd8:	f7ff fb80 	bl	80012dc <emergency_buff_send>
	prepare_buff_send();
 8001bdc:	f7ff fa88 	bl	80010f0 <prepare_buff_send>
	osDelay(1);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f004 fd9e 	bl	8006722 <osDelay>
	emergency_buff_send();
 8001be6:	e7f7      	b.n	8001bd8 <StartTask01+0x8>

08001be8 <StartTask02>:
* @retval None
*/

/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
				/* this task is get data from dashboard */
  /* Infinite loop */
	HAL_ADC_Start_DMA(&hadc1, &adc_value, 2);
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	491f      	ldr	r1, [pc, #124]	; (8001c70 <StartTask02+0x88>)
 8001bf4:	481f      	ldr	r0, [pc, #124]	; (8001c74 <StartTask02+0x8c>)
 8001bf6:	f001 f9f9 	bl	8002fec <HAL_ADC_Start_DMA>
	status_motor = 1;
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <StartTask02+0x90>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
	osMessagePut(q_throttle_controlHandle, adc_value[0], 0);
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <StartTask02+0x94>)
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <StartTask02+0x88>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f004 fdc6 	bl	800679c <osMessagePut>
	osMessagePut(q_steering_controlHandle, adc_value[1], 0);
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <StartTask02+0x98>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <StartTask02+0x88>)
 8001c16:	885b      	ldrh	r3, [r3, #2]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f004 fdbe 	bl	800679c <osMessagePut>
	osMessagePut(q_disp_throttleHandle, adc_value[1], 0);
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <StartTask02+0x9c>)
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <StartTask02+0x88>)
 8001c26:	885b      	ldrh	r3, [r3, #2]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f004 fdb6 	bl	800679c <osMessagePut>

	read_light_sw();
 8001c30:	f7ff fbb2 	bl	8001398 <read_light_sw>
	osMessagePut(q_turn_signalHandle, light_sw, 0);
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <StartTask02+0xa0>)
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <StartTask02+0xa4>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f004 fdac 	bl	800679c <osMessagePut>
	osMessagePut(q_disp_turn_signalHandle, light_sw, 0);
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <StartTask02+0xa8>)
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <StartTask02+0xa4>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f004 fda4 	bl	800679c <osMessagePut>

	read_trim_button();
 8001c54:	f7ff fbf6 	bl	8001444 <read_trim_button>
	osMessagePut(q_trim_steeringHandle, trim_button, 0);
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <StartTask02+0xac>)
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <StartTask02+0xb0>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2200      	movs	r2, #0
 8001c62:	4619      	mov	r1, r3
 8001c64:	f004 fd9a 	bl	800679c <osMessagePut>
	osDelay(1);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f004 fd5a 	bl	8006722 <osDelay>
	osMessagePut(q_throttle_controlHandle, adc_value[0], 0);
 8001c6e:	e7c7      	b.n	8001c00 <StartTask02+0x18>
 8001c70:	2000151c 	.word	0x2000151c
 8001c74:	20001520 	.word	0x20001520
 8001c78:	200002f8 	.word	0x200002f8
 8001c7c:	20001474 	.word	0x20001474
 8001c80:	20001550 	.word	0x20001550
 8001c84:	20001618 	.word	0x20001618
 8001c88:	20001610 	.word	0x20001610
 8001c8c:	200002fa 	.word	0x200002fa
 8001c90:	2000155c 	.word	0x2000155c
 8001c94:	20001478 	.word	0x20001478
 8001c98:	200002f9 	.word	0x200002f9

08001c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <Error_Handler+0x6>

08001ca4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af04      	add	r7, sp, #16
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	1dfb      	adds	r3, r7, #7
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2178      	movs	r1, #120	; 0x78
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ssd1306_WriteCommand+0x2c>)
 8001cd0:	f003 f93e 	bl	8004f50 <HAL_I2C_Mem_Write>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20001498 	.word	0x20001498

08001ce0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af04      	add	r7, sp, #16
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf2:	9202      	str	r2, [sp, #8]
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	2240      	movs	r2, #64	; 0x40
 8001cfe:	2178      	movs	r1, #120	; 0x78
 8001d00:	4803      	ldr	r0, [pc, #12]	; (8001d10 <ssd1306_WriteData+0x30>)
 8001d02:	f003 f925 	bl	8004f50 <HAL_I2C_Mem_Write>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20001498 	.word	0x20001498

08001d14 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001d18:	f7ff ffc4 	bl	8001ca4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001d1c:	2064      	movs	r0, #100	; 0x64
 8001d1e:	f001 f86b 	bl	8002df8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001d22:	2000      	movs	r0, #0
 8001d24:	f000 fa92 	bl	800224c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d28:	2020      	movs	r0, #32
 8001d2a:	f7ff ffc1 	bl	8001cb0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff ffbe 	bl	8001cb0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d34:	20b0      	movs	r0, #176	; 0xb0
 8001d36:	f7ff ffbb 	bl	8001cb0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d3a:	20c8      	movs	r0, #200	; 0xc8
 8001d3c:	f7ff ffb8 	bl	8001cb0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d40:	2000      	movs	r0, #0
 8001d42:	f7ff ffb5 	bl	8001cb0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d46:	2010      	movs	r0, #16
 8001d48:	f7ff ffb2 	bl	8001cb0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d4c:	2040      	movs	r0, #64	; 0x40
 8001d4e:	f7ff ffaf 	bl	8001cb0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d52:	20ff      	movs	r0, #255	; 0xff
 8001d54:	f000 fa66 	bl	8002224 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d58:	20a1      	movs	r0, #161	; 0xa1
 8001d5a:	f7ff ffa9 	bl	8001cb0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d5e:	20a6      	movs	r0, #166	; 0xa6
 8001d60:	f7ff ffa6 	bl	8001cb0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d64:	20a8      	movs	r0, #168	; 0xa8
 8001d66:	f7ff ffa3 	bl	8001cb0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001d6a:	203f      	movs	r0, #63	; 0x3f
 8001d6c:	f7ff ffa0 	bl	8001cb0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d70:	20a4      	movs	r0, #164	; 0xa4
 8001d72:	f7ff ff9d 	bl	8001cb0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d76:	20d3      	movs	r0, #211	; 0xd3
 8001d78:	f7ff ff9a 	bl	8001cb0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff ff97 	bl	8001cb0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d82:	20d5      	movs	r0, #213	; 0xd5
 8001d84:	f7ff ff94 	bl	8001cb0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d88:	20f0      	movs	r0, #240	; 0xf0
 8001d8a:	f7ff ff91 	bl	8001cb0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001d8e:	20d9      	movs	r0, #217	; 0xd9
 8001d90:	f7ff ff8e 	bl	8001cb0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001d94:	2022      	movs	r0, #34	; 0x22
 8001d96:	f7ff ff8b 	bl	8001cb0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001d9a:	20da      	movs	r0, #218	; 0xda
 8001d9c:	f7ff ff88 	bl	8001cb0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001da0:	2012      	movs	r0, #18
 8001da2:	f7ff ff85 	bl	8001cb0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001da6:	20db      	movs	r0, #219	; 0xdb
 8001da8:	f7ff ff82 	bl	8001cb0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001dac:	2020      	movs	r0, #32
 8001dae:	f7ff ff7f 	bl	8001cb0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001db2:	208d      	movs	r0, #141	; 0x8d
 8001db4:	f7ff ff7c 	bl	8001cb0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001db8:	2014      	movs	r0, #20
 8001dba:	f7ff ff79 	bl	8001cb0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f000 fa44 	bl	800224c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f000 f80f 	bl	8001de8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001dca:	f000 f825 	bl	8001e18 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <ssd1306_Init+0xd0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <ssd1306_Init+0xd0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001dda:	4b02      	ldr	r3, [pc, #8]	; (8001de4 <ssd1306_Init+0xd0>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	711a      	strb	r2, [r3, #4]
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000704 	.word	0x20000704

08001de8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <ssd1306_Fill+0x14>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <ssd1306_Fill+0x16>
 8001dfc:	23ff      	movs	r3, #255	; 0xff
 8001dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e02:	4619      	mov	r1, r3
 8001e04:	4803      	ldr	r0, [pc, #12]	; (8001e14 <ssd1306_Fill+0x2c>)
 8001e06:	f006 fe0e 	bl	8008a26 <memset>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000304 	.word	0x20000304

08001e18 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e1e:	2300      	movs	r3, #0
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	e016      	b.n	8001e52 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	3b50      	subs	r3, #80	; 0x50
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff40 	bl	8001cb0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001e30:	2000      	movs	r0, #0
 8001e32:	f7ff ff3d 	bl	8001cb0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001e36:	2010      	movs	r0, #16
 8001e38:	f7ff ff3a 	bl	8001cb0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	01db      	lsls	r3, r3, #7
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <ssd1306_UpdateScreen+0x48>)
 8001e42:	4413      	add	r3, r2
 8001e44:	2180      	movs	r1, #128	; 0x80
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff4a 	bl	8001ce0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	71fb      	strb	r3, [r7, #7]
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b07      	cmp	r3, #7
 8001e56:	d9e5      	bls.n	8001e24 <ssd1306_UpdateScreen+0xc>
    }
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000304 	.word	0x20000304

08001e64 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	71bb      	strb	r3, [r7, #6]
 8001e72:	4613      	mov	r3, r2
 8001e74:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db3d      	blt.n	8001efa <ssd1306_DrawPixel+0x96>
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	2b3f      	cmp	r3, #63	; 0x3f
 8001e82:	d83a      	bhi.n	8001efa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8001e84:	797b      	ldrb	r3, [r7, #5]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d11a      	bne.n	8001ec0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e8a:	79fa      	ldrb	r2, [r7, #7]
 8001e8c:	79bb      	ldrb	r3, [r7, #6]
 8001e8e:	08db      	lsrs	r3, r3, #3
 8001e90:	b2d8      	uxtb	r0, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	01db      	lsls	r3, r3, #7
 8001e96:	4413      	add	r3, r2
 8001e98:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <ssd1306_DrawPixel+0xa0>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	b25a      	sxtb	r2, r3
 8001e9e:	79bb      	ldrb	r3, [r7, #6]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	4313      	orrs	r3, r2
 8001eae:	b259      	sxtb	r1, r3
 8001eb0:	79fa      	ldrb	r2, [r7, #7]
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	01db      	lsls	r3, r3, #7
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b2c9      	uxtb	r1, r1
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <ssd1306_DrawPixel+0xa0>)
 8001ebc:	54d1      	strb	r1, [r2, r3]
 8001ebe:	e01d      	b.n	8001efc <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ec0:	79fa      	ldrb	r2, [r7, #7]
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	b2d8      	uxtb	r0, r3
 8001ec8:	4603      	mov	r3, r0
 8001eca:	01db      	lsls	r3, r3, #7
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <ssd1306_DrawPixel+0xa0>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	b25a      	sxtb	r2, r3
 8001ed4:	79bb      	ldrb	r3, [r7, #6]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	b25b      	sxtb	r3, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	b259      	sxtb	r1, r3
 8001eea:	79fa      	ldrb	r2, [r7, #7]
 8001eec:	4603      	mov	r3, r0
 8001eee:	01db      	lsls	r3, r3, #7
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b2c9      	uxtb	r1, r1
 8001ef4:	4a03      	ldr	r2, [pc, #12]	; (8001f04 <ssd1306_DrawPixel+0xa0>)
 8001ef6:	54d1      	strb	r1, [r2, r3]
 8001ef8:	e000      	b.n	8001efc <ssd1306_DrawPixel+0x98>
        return;
 8001efa:	bf00      	nop
    }
}
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	20000304 	.word	0x20000304

08001f08 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4604      	mov	r4, r0
 8001f10:	1d38      	adds	r0, r7, #4
 8001f12:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f16:	461a      	mov	r2, r3
 8001f18:	4623      	mov	r3, r4
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	2b1f      	cmp	r3, #31
 8001f24:	d902      	bls.n	8001f2c <ssd1306_WriteChar+0x24>
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b7e      	cmp	r3, #126	; 0x7e
 8001f2a:	d901      	bls.n	8001f30 <ssd1306_WriteChar+0x28>
        return 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e06d      	b.n	800200c <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001f30:	4b38      	ldr	r3, [pc, #224]	; (8002014 <ssd1306_WriteChar+0x10c>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	793b      	ldrb	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	2b80      	cmp	r3, #128	; 0x80
 8001f3c:	dc06      	bgt.n	8001f4c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001f3e:	4b35      	ldr	r3, [pc, #212]	; (8002014 <ssd1306_WriteChar+0x10c>)
 8001f40:	885b      	ldrh	r3, [r3, #2]
 8001f42:	461a      	mov	r2, r3
 8001f44:	797b      	ldrb	r3, [r7, #5]
 8001f46:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001f48:	2b40      	cmp	r3, #64	; 0x40
 8001f4a:	dd01      	ble.n	8001f50 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e05d      	b.n	800200c <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	e04c      	b.n	8001ff0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	3b20      	subs	r3, #32
 8001f5c:	7979      	ldrb	r1, [r7, #5]
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	4619      	mov	r1, r3
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	440b      	add	r3, r1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	e034      	b.n	8001fe0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d012      	beq.n	8001fac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001f86:	4b23      	ldr	r3, [pc, #140]	; (8002014 <ssd1306_WriteChar+0x10c>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	b2d8      	uxtb	r0, r3
 8001f94:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <ssd1306_WriteChar+0x10c>)
 8001f96:	885b      	ldrh	r3, [r3, #2]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	7bba      	ldrb	r2, [r7, #14]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7ff ff5d 	bl	8001e64 <ssd1306_DrawPixel>
 8001faa:	e016      	b.n	8001fda <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <ssd1306_WriteChar+0x10c>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b2d8      	uxtb	r0, r3
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <ssd1306_WriteChar+0x10c>)
 8001fbc:	885b      	ldrh	r3, [r3, #2]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	b2d9      	uxtb	r1, r3
 8001fc8:	7bbb      	ldrb	r3, [r7, #14]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf0c      	ite	eq
 8001fce:	2301      	moveq	r3, #1
 8001fd0:	2300      	movne	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f7ff ff45 	bl	8001e64 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	793b      	ldrb	r3, [r7, #4]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d3c5      	bcc.n	8001f76 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	797b      	ldrb	r3, [r7, #5]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d3ad      	bcc.n	8001f56 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <ssd1306_WriteChar+0x10c>)
 8001ffc:	881a      	ldrh	r2, [r3, #0]
 8001ffe:	793b      	ldrb	r3, [r7, #4]
 8002000:	b29b      	uxth	r3, r3
 8002002:	4413      	add	r3, r2
 8002004:	b29a      	uxth	r2, r3
 8002006:	4b03      	ldr	r3, [pc, #12]	; (8002014 <ssd1306_WriteChar+0x10c>)
 8002008:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800200a:	7bfb      	ldrb	r3, [r7, #15]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3724      	adds	r7, #36	; 0x24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd90      	pop	{r4, r7, pc}
 8002014:	20000704 	.word	0x20000704

08002018 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	1d38      	adds	r0, r7, #4
 8002022:	e880 0006 	stmia.w	r0, {r1, r2}
 8002026:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002028:	e012      	b.n	8002050 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	7818      	ldrb	r0, [r3, #0]
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	1d3a      	adds	r2, r7, #4
 8002032:	ca06      	ldmia	r2, {r1, r2}
 8002034:	f7ff ff68 	bl	8001f08 <ssd1306_WriteChar>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d002      	beq.n	800204a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	e008      	b.n	800205c <ssd1306_WriteString+0x44>
        }
        str++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3301      	adds	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e8      	bne.n	800202a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	781b      	ldrb	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	460a      	mov	r2, r1
 800206e:	71fb      	strb	r3, [r7, #7]
 8002070:	4613      	mov	r3, r2
 8002072:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	b29a      	uxth	r2, r3
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <ssd1306_SetCursor+0x2c>)
 800207a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800207c:	79bb      	ldrb	r3, [r7, #6]
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <ssd1306_SetCursor+0x2c>)
 8002082:	805a      	strh	r2, [r3, #2]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000704 	.word	0x20000704

08002094 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	4604      	mov	r4, r0
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	4623      	mov	r3, r4
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	4603      	mov	r3, r0
 80020a8:	71bb      	strb	r3, [r7, #6]
 80020aa:	460b      	mov	r3, r1
 80020ac:	717b      	strb	r3, [r7, #5]
 80020ae:	4613      	mov	r3, r2
 80020b0:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80020b2:	797a      	ldrb	r2, [r7, #5]
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bfb8      	it	lt
 80020bc:	425b      	neglt	r3, r3
 80020be:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80020c0:	793a      	ldrb	r2, [r7, #4]
 80020c2:	79bb      	ldrb	r3, [r7, #6]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bfb8      	it	lt
 80020ca:	425b      	neglt	r3, r3
 80020cc:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80020ce:	79fa      	ldrb	r2, [r7, #7]
 80020d0:	797b      	ldrb	r3, [r7, #5]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d201      	bcs.n	80020da <ssd1306_Line+0x46>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e001      	b.n	80020de <ssd1306_Line+0x4a>
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80020e0:	79ba      	ldrb	r2, [r7, #6]
 80020e2:	793b      	ldrb	r3, [r7, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d201      	bcs.n	80020ec <ssd1306_Line+0x58>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e001      	b.n	80020f0 <ssd1306_Line+0x5c>
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
 80020f0:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 80020fa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80020fe:	7939      	ldrb	r1, [r7, #4]
 8002100:	797b      	ldrb	r3, [r7, #5]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff feae 	bl	8001e64 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002108:	e024      	b.n	8002154 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800210a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800210e:	79b9      	ldrb	r1, [r7, #6]
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fea6 	bl	8001e64 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	425b      	negs	r3, r3
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	429a      	cmp	r2, r3
 8002126:	dd08      	ble.n	800213a <ssd1306_Line+0xa6>
            error -= deltaY;
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	4413      	add	r3, r2
 8002138:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	429a      	cmp	r2, r3
 8002140:	da08      	bge.n	8002154 <ssd1306_Line+0xc0>
            error += deltaX;
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	4413      	add	r3, r2
 8002148:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	79bb      	ldrb	r3, [r7, #6]
 8002150:	4413      	add	r3, r2
 8002152:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002154:	79fa      	ldrb	r2, [r7, #7]
 8002156:	797b      	ldrb	r3, [r7, #5]
 8002158:	429a      	cmp	r2, r3
 800215a:	d1d6      	bne.n	800210a <ssd1306_Line+0x76>
 800215c:	79ba      	ldrb	r2, [r7, #6]
 800215e:	793b      	ldrb	r3, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	d1d2      	bne.n	800210a <ssd1306_Line+0x76>
        }
    }
    return;
 8002164:	bf00      	nop
}
 8002166:	3724      	adds	r7, #36	; 0x24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd90      	pop	{r4, r7, pc}

0800216c <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	603a      	str	r2, [r7, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
 800217a:	460b      	mov	r3, r1
 800217c:	71bb      	strb	r3, [r7, #6]
 800217e:	4613      	mov	r3, r2
 8002180:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002182:	797b      	ldrb	r3, [r7, #5]
 8002184:	3307      	adds	r3, #7
 8002186:	2b00      	cmp	r3, #0
 8002188:	da00      	bge.n	800218c <ssd1306_DrawBitmap+0x20>
 800218a:	3307      	adds	r3, #7
 800218c:	10db      	asrs	r3, r3, #3
 800218e:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db3f      	blt.n	800221c <ssd1306_DrawBitmap+0xb0>
 800219c:	79bb      	ldrb	r3, [r7, #6]
 800219e:	2b3f      	cmp	r3, #63	; 0x3f
 80021a0:	d83c      	bhi.n	800221c <ssd1306_DrawBitmap+0xb0>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80021a2:	2300      	movs	r3, #0
 80021a4:	73bb      	strb	r3, [r7, #14]
 80021a6:	e033      	b.n	8002210 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80021a8:	2300      	movs	r3, #0
 80021aa:	737b      	strb	r3, [r7, #13]
 80021ac:	e026      	b.n	80021fc <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80021ae:	7b7b      	ldrb	r3, [r7, #13]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	e00d      	b.n	80021dc <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	7b7a      	ldrb	r2, [r7, #13]
 80021cc:	08d2      	lsrs	r2, r2, #3
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	4413      	add	r3, r2
 80021d2:	461a      	mov	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80021dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	da08      	bge.n	80021f6 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80021e4:	79fa      	ldrb	r2, [r7, #7]
 80021e6:	7b7b      	ldrb	r3, [r7, #13]
 80021e8:	4413      	add	r3, r2
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	7f3a      	ldrb	r2, [r7, #28]
 80021ee:	79b9      	ldrb	r1, [r7, #6]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fe37 	bl	8001e64 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80021f6:	7b7b      	ldrb	r3, [r7, #13]
 80021f8:	3301      	adds	r3, #1
 80021fa:	737b      	strb	r3, [r7, #13]
 80021fc:	7b7a      	ldrb	r2, [r7, #13]
 80021fe:	797b      	ldrb	r3, [r7, #5]
 8002200:	429a      	cmp	r2, r3
 8002202:	d3d4      	bcc.n	80021ae <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002204:	7bbb      	ldrb	r3, [r7, #14]
 8002206:	3301      	adds	r3, #1
 8002208:	73bb      	strb	r3, [r7, #14]
 800220a:	79bb      	ldrb	r3, [r7, #6]
 800220c:	3301      	adds	r3, #1
 800220e:	71bb      	strb	r3, [r7, #6]
 8002210:	7bba      	ldrb	r2, [r7, #14]
 8002212:	7e3b      	ldrb	r3, [r7, #24]
 8002214:	429a      	cmp	r2, r3
 8002216:	d3c7      	bcc.n	80021a8 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002218:	bf00      	nop
 800221a:	e000      	b.n	800221e <ssd1306_DrawBitmap+0xb2>
        return;
 800221c:	bf00      	nop
}
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800222e:	2381      	movs	r3, #129	; 0x81
 8002230:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fd3b 	bl	8001cb0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fd37 	bl	8001cb0 <ssd1306_WriteCommand>
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800225c:	23af      	movs	r3, #175	; 0xaf
 800225e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <ssd1306_SetDisplayOn+0x38>)
 8002262:	2201      	movs	r2, #1
 8002264:	715a      	strb	r2, [r3, #5]
 8002266:	e004      	b.n	8002272 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002268:	23ae      	movs	r3, #174	; 0xae
 800226a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <ssd1306_SetDisplayOn+0x38>)
 800226e:	2200      	movs	r2, #0
 8002270:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fd1b 	bl	8001cb0 <ssd1306_WriteCommand>
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000704 	.word	0x20000704

08002288 <disp_msg_11x18>:
	ssd1306_SetCursor(x, y);
	ssd1306_WriteString(msg, Font_7x10, White);
	ssd1306_UpdateScreen();
}

void disp_msg_11x18(char* msg, uint8_t x, uint8_t y){
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
 8002294:	4613      	mov	r3, r2
 8002296:	70bb      	strb	r3, [r7, #2]
	ssd1306_SetCursor(x, y);
 8002298:	78ba      	ldrb	r2, [r7, #2]
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fee0 	bl	8002064 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_11x18, White);
 80022a4:	4a05      	ldr	r2, [pc, #20]	; (80022bc <disp_msg_11x18+0x34>)
 80022a6:	2301      	movs	r3, #1
 80022a8:	ca06      	ldmia	r2, {r1, r2}
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff feb4 	bl	8002018 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80022b0:	f7ff fdb2 	bl	8001e18 <ssd1306_UpdateScreen>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000000 	.word	0x20000000

080022c0 <disp_msg_uint>:

void disp_msg_uint(uint16_t number, uint8_t x, uint8_t y)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]
 80022ca:	460b      	mov	r3, r1
 80022cc:	717b      	strb	r3, [r7, #5]
 80022ce:	4613      	mov	r3, r2
 80022d0:	713b      	strb	r3, [r7, #4]
	char c_number[4];
	sprintf(c_number,"%3d",number);
 80022d2:	88fa      	ldrh	r2, [r7, #6]
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	4907      	ldr	r1, [pc, #28]	; (80022f8 <disp_msg_uint+0x38>)
 80022da:	4618      	mov	r0, r3
 80022dc:	f006 fc62 	bl	8008ba4 <siprintf>
	disp_msg_11x18(c_number, x, y);
 80022e0:	793a      	ldrb	r2, [r7, #4]
 80022e2:	7979      	ldrb	r1, [r7, #5]
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ffcd 	bl	8002288 <disp_msg_11x18>
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	0800a358 	.word	0x0800a358
 80022fc:	00000000 	.word	0x00000000

08002300 <disp_draw_dashboard>:

void disp_draw_dashboard()
{
 8002300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af02      	add	r7, sp, #8
    ssd1306_Init();
 8002308:	f7ff fd04 	bl	8001d14 <ssd1306_Init>
    ssd1306_Fill(Black);
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff fd6b 	bl	8001de8 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,dashboard_128x64,128,64,White);
 8002312:	2301      	movs	r3, #1
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	2340      	movs	r3, #64	; 0x40
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	4a94      	ldr	r2, [pc, #592]	; (8002570 <disp_draw_dashboard+0x270>)
 800231e:	2100      	movs	r1, #0
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff ff23 	bl	800216c <ssd1306_DrawBitmap>

	needle_angle_deg = 45;
 8002326:	4b93      	ldr	r3, [pc, #588]	; (8002574 <disp_draw_dashboard+0x274>)
 8002328:	222d      	movs	r2, #45	; 0x2d
 800232a:	601a      	str	r2, [r3, #0]
	needle_start_x = needle_radius_big * -sin(needle_angle_deg * 3.14 / 180) + needle_center_x;
 800232c:	4b92      	ldr	r3, [pc, #584]	; (8002578 <disp_draw_dashboard+0x278>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f85f 	bl	80003f4 <__aeabi_i2d>
 8002336:	4682      	mov	sl, r0
 8002338:	468b      	mov	fp, r1
 800233a:	4b8e      	ldr	r3, [pc, #568]	; (8002574 <disp_draw_dashboard+0x274>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe f858 	bl	80003f4 <__aeabi_i2d>
 8002344:	a388      	add	r3, pc, #544	; (adr r3, 8002568 <disp_draw_dashboard+0x268>)
 8002346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234a:	f7fe f8bd 	bl	80004c8 <__aeabi_dmul>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	4b88      	ldr	r3, [pc, #544]	; (800257c <disp_draw_dashboard+0x27c>)
 800235c:	f7fe f9de 	bl	800071c <__aeabi_ddiv>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f006 ffa4 	bl	80092b4 <sin>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4690      	mov	r8, r2
 8002372:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002376:	4642      	mov	r2, r8
 8002378:	464b      	mov	r3, r9
 800237a:	4650      	mov	r0, sl
 800237c:	4659      	mov	r1, fp
 800237e:	f7fe f8a3 	bl	80004c8 <__aeabi_dmul>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4690      	mov	r8, r2
 8002388:	4699      	mov	r9, r3
 800238a:	4b7d      	ldr	r3, [pc, #500]	; (8002580 <disp_draw_dashboard+0x280>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f830 	bl	80003f4 <__aeabi_i2d>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4640      	mov	r0, r8
 800239a:	4649      	mov	r1, r9
 800239c:	f7fd fede 	bl	800015c <__adddf3>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	f7fe fb50 	bl	8000a4c <__aeabi_d2uiz>
 80023ac:	4603      	mov	r3, r0
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b74      	ldr	r3, [pc, #464]	; (8002584 <disp_draw_dashboard+0x284>)
 80023b2:	801a      	strh	r2, [r3, #0]
	needle_start_y = needle_radius_big * cos(needle_angle_deg * 3.14/ 180) + needle_center_y;
 80023b4:	4b70      	ldr	r3, [pc, #448]	; (8002578 <disp_draw_dashboard+0x278>)
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f81b 	bl	80003f4 <__aeabi_i2d>
 80023be:	4680      	mov	r8, r0
 80023c0:	4689      	mov	r9, r1
 80023c2:	4b6c      	ldr	r3, [pc, #432]	; (8002574 <disp_draw_dashboard+0x274>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f814 	bl	80003f4 <__aeabi_i2d>
 80023cc:	a366      	add	r3, pc, #408	; (adr r3, 8002568 <disp_draw_dashboard+0x268>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fe f879 	bl	80004c8 <__aeabi_dmul>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	4b66      	ldr	r3, [pc, #408]	; (800257c <disp_draw_dashboard+0x27c>)
 80023e4:	f7fe f99a 	bl	800071c <__aeabi_ddiv>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	f006 ff2a 	bl	8009248 <cos>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4640      	mov	r0, r8
 80023fa:	4649      	mov	r1, r9
 80023fc:	f7fe f864 	bl	80004c8 <__aeabi_dmul>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4690      	mov	r8, r2
 8002406:	4699      	mov	r9, r3
 8002408:	4b5f      	ldr	r3, [pc, #380]	; (8002588 <disp_draw_dashboard+0x288>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fd fff1 	bl	80003f4 <__aeabi_i2d>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4640      	mov	r0, r8
 8002418:	4649      	mov	r1, r9
 800241a:	f7fd fe9f 	bl	800015c <__adddf3>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fb11 	bl	8000a4c <__aeabi_d2uiz>
 800242a:	4603      	mov	r3, r0
 800242c:	b29a      	uxth	r2, r3
 800242e:	4b57      	ldr	r3, [pc, #348]	; (800258c <disp_draw_dashboard+0x28c>)
 8002430:	801a      	strh	r2, [r3, #0]

	needle_end_x = needle_radius_small * -sin((needle_angle_deg + 180) * 3.14 / 180) + needle_center_x;
 8002432:	4b57      	ldr	r3, [pc, #348]	; (8002590 <disp_draw_dashboard+0x290>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fd ffdc 	bl	80003f4 <__aeabi_i2d>
 800243c:	4680      	mov	r8, r0
 800243e:	4689      	mov	r9, r1
 8002440:	4b4c      	ldr	r3, [pc, #304]	; (8002574 <disp_draw_dashboard+0x274>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	33b4      	adds	r3, #180	; 0xb4
 8002446:	4618      	mov	r0, r3
 8002448:	f7fd ffd4 	bl	80003f4 <__aeabi_i2d>
 800244c:	a346      	add	r3, pc, #280	; (adr r3, 8002568 <disp_draw_dashboard+0x268>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	f7fe f839 	bl	80004c8 <__aeabi_dmul>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	4b46      	ldr	r3, [pc, #280]	; (800257c <disp_draw_dashboard+0x27c>)
 8002464:	f7fe f95a 	bl	800071c <__aeabi_ddiv>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	f006 ff20 	bl	80092b4 <sin>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4614      	mov	r4, r2
 800247a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800247e:	4622      	mov	r2, r4
 8002480:	462b      	mov	r3, r5
 8002482:	4640      	mov	r0, r8
 8002484:	4649      	mov	r1, r9
 8002486:	f7fe f81f 	bl	80004c8 <__aeabi_dmul>
 800248a:	4603      	mov	r3, r0
 800248c:	460c      	mov	r4, r1
 800248e:	4625      	mov	r5, r4
 8002490:	461c      	mov	r4, r3
 8002492:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <disp_draw_dashboard+0x280>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fd ffac 	bl	80003f4 <__aeabi_i2d>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4620      	mov	r0, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	f7fd fe5a 	bl	800015c <__adddf3>
 80024a8:	4603      	mov	r3, r0
 80024aa:	460c      	mov	r4, r1
 80024ac:	4618      	mov	r0, r3
 80024ae:	4621      	mov	r1, r4
 80024b0:	f7fe facc 	bl	8000a4c <__aeabi_d2uiz>
 80024b4:	4603      	mov	r3, r0
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b36      	ldr	r3, [pc, #216]	; (8002594 <disp_draw_dashboard+0x294>)
 80024ba:	801a      	strh	r2, [r3, #0]
	needle_end_y = needle_radius_small * cos((needle_angle_deg + 180)* 3.14/ 180) + needle_center_y;
 80024bc:	4b34      	ldr	r3, [pc, #208]	; (8002590 <disp_draw_dashboard+0x290>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fd ff97 	bl	80003f4 <__aeabi_i2d>
 80024c6:	4604      	mov	r4, r0
 80024c8:	460d      	mov	r5, r1
 80024ca:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <disp_draw_dashboard+0x274>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	33b4      	adds	r3, #180	; 0xb4
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fd ff8f 	bl	80003f4 <__aeabi_i2d>
 80024d6:	a324      	add	r3, pc, #144	; (adr r3, 8002568 <disp_draw_dashboard+0x268>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fd fff4 	bl	80004c8 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	4b23      	ldr	r3, [pc, #140]	; (800257c <disp_draw_dashboard+0x27c>)
 80024ee:	f7fe f915 	bl	800071c <__aeabi_ddiv>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	f006 fea5 	bl	8009248 <cos>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4620      	mov	r0, r4
 8002504:	4629      	mov	r1, r5
 8002506:	f7fd ffdf 	bl	80004c8 <__aeabi_dmul>
 800250a:	4603      	mov	r3, r0
 800250c:	460c      	mov	r4, r1
 800250e:	4625      	mov	r5, r4
 8002510:	461c      	mov	r4, r3
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <disp_draw_dashboard+0x288>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd ff6c 	bl	80003f4 <__aeabi_i2d>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4620      	mov	r0, r4
 8002522:	4629      	mov	r1, r5
 8002524:	f7fd fe1a 	bl	800015c <__adddf3>
 8002528:	4603      	mov	r3, r0
 800252a:	460c      	mov	r4, r1
 800252c:	4618      	mov	r0, r3
 800252e:	4621      	mov	r1, r4
 8002530:	f7fe fa8c 	bl	8000a4c <__aeabi_d2uiz>
 8002534:	4603      	mov	r3, r0
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <disp_draw_dashboard+0x298>)
 800253a:	801a      	strh	r2, [r3, #0]
	ssd1306_Line(needle_start_x, needle_start_y, needle_end_x, 	needle_end_y, White);
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <disp_draw_dashboard+0x284>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b2d8      	uxtb	r0, r3
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <disp_draw_dashboard+0x28c>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b2d9      	uxtb	r1, r3
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <disp_draw_dashboard+0x294>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <disp_draw_dashboard+0x298>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b2dc      	uxtb	r4, r3
 8002554:	2301      	movs	r3, #1
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	4623      	mov	r3, r4
 800255a:	f7ff fd9b 	bl	8002094 <ssd1306_Line>
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002566:	bf00      	nop
 8002568:	51eb851f 	.word	0x51eb851f
 800256c:	40091eb8 	.word	0x40091eb8
 8002570:	0800b0d4 	.word	0x0800b0d4
 8002574:	20000008 	.word	0x20000008
 8002578:	20000010 	.word	0x20000010
 800257c:	40668000 	.word	0x40668000
 8002580:	2000000c 	.word	0x2000000c
 8002584:	2000070c 	.word	0x2000070c
 8002588:	2000000e 	.word	0x2000000e
 800258c:	2000070e 	.word	0x2000070e
 8002590:	20000012 	.word	0x20000012
 8002594:	20000710 	.word	0x20000710
 8002598:	20000712 	.word	0x20000712

0800259c <disp_toggle_turn_signal>:
		break;
	}
}

void disp_toggle_turn_signal (const unsigned char * bitmap)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	6078      	str	r0, [r7, #4]
	tmp_toggle = !tmp_toggle;
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <disp_toggle_turn_signal+0x44>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <disp_toggle_turn_signal+0x44>)
 80025b6:	701a      	strb	r2, [r3, #0]
	ssd1306_DrawBitmap(0, 0, bitmap, 128, 64, tmp_toggle ? White : Black);
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <disp_toggle_turn_signal+0x44>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	2340      	movs	r3, #64	; 0x40
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	2100      	movs	r1, #0
 80025d2:	2000      	movs	r0, #0
 80025d4:	f7ff fdca 	bl	800216c <ssd1306_DrawBitmap>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	2000070a 	.word	0x2000070a

080025e4 <disp_off_turn_signal>:

void disp_off_turn_signal ()
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af02      	add	r7, sp, #8
	ssd1306_DrawBitmap(0, 0, hazard_blinker , 128, 64, Black);
 80025ea:	2300      	movs	r3, #0
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	2340      	movs	r3, #64	; 0x40
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <disp_off_turn_signal+0x50>)
 80025f6:	2100      	movs	r1, #0
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7ff fdb7 	bl	800216c <ssd1306_DrawBitmap>
	ssd1306_DrawBitmap(0, 0, left_blinker , 128, 64, Black);
 80025fe:	2300      	movs	r3, #0
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	2340      	movs	r3, #64	; 0x40
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <disp_off_turn_signal+0x54>)
 800260a:	2100      	movs	r1, #0
 800260c:	2000      	movs	r0, #0
 800260e:	f7ff fdad 	bl	800216c <ssd1306_DrawBitmap>
	ssd1306_DrawBitmap(0, 0, right_blinker , 128, 64, Black);
 8002612:	2300      	movs	r3, #0
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	2340      	movs	r3, #64	; 0x40
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	4a07      	ldr	r2, [pc, #28]	; (800263c <disp_off_turn_signal+0x58>)
 800261e:	2100      	movs	r1, #0
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fda3 	bl	800216c <ssd1306_DrawBitmap>
	tmp_toggle = 0;
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <disp_off_turn_signal+0x5c>)
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	0800bcd4 	.word	0x0800bcd4
 8002638:	0800b4d4 	.word	0x0800b4d4
 800263c:	0800b8d4 	.word	0x0800b8d4
 8002640:	2000070a 	.word	0x2000070a
 8002644:	00000000 	.word	0x00000000

08002648 <disp_needle_speed>:

void disp_needle_speed (uint16_t speed)
{
 8002648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800264c:	b085      	sub	sp, #20
 800264e:	af02      	add	r7, sp, #8
 8002650:	4603      	mov	r3, r0
 8002652:	80fb      	strh	r3, [r7, #6]
	static uint16_t pre_speed = 0;
	if (abs(speed - pre_speed) > 2)
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	4aa6      	ldr	r2, [pc, #664]	; (80028f0 <disp_needle_speed+0x2a8>)
 8002658:	8812      	ldrh	r2, [r2, #0]
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	bfb8      	it	lt
 8002660:	425b      	neglt	r3, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	f340 813b 	ble.w	80028de <disp_needle_speed+0x296>
	{
		ssd1306_Line(needle_start_x, needle_start_y, needle_end_x, 	needle_end_y, Black);
 8002668:	4ba2      	ldr	r3, [pc, #648]	; (80028f4 <disp_needle_speed+0x2ac>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b2d8      	uxtb	r0, r3
 800266e:	4ba2      	ldr	r3, [pc, #648]	; (80028f8 <disp_needle_speed+0x2b0>)
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b2d9      	uxtb	r1, r3
 8002674:	4ba1      	ldr	r3, [pc, #644]	; (80028fc <disp_needle_speed+0x2b4>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4ba1      	ldr	r3, [pc, #644]	; (8002900 <disp_needle_speed+0x2b8>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b2de      	uxtb	r6, r3
 8002680:	2300      	movs	r3, #0
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	4633      	mov	r3, r6
 8002686:	f7ff fd05 	bl	8002094 <ssd1306_Line>
		needle_angle_deg = speed * 270/299 + 45;
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	4a9b      	ldr	r2, [pc, #620]	; (8002904 <disp_needle_speed+0x2bc>)
 8002696:	fb82 1203 	smull	r1, r2, r2, r3
 800269a:	11d2      	asrs	r2, r2, #7
 800269c:	17db      	asrs	r3, r3, #31
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	332d      	adds	r3, #45	; 0x2d
 80026a2:	4a99      	ldr	r2, [pc, #612]	; (8002908 <disp_needle_speed+0x2c0>)
 80026a4:	6013      	str	r3, [r2, #0]
		needle_start_x = needle_radius_big * -sin(needle_angle_deg * 3.14 / 180) + needle_center_x;
 80026a6:	4b99      	ldr	r3, [pc, #612]	; (800290c <disp_needle_speed+0x2c4>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd fea2 	bl	80003f4 <__aeabi_i2d>
 80026b0:	4682      	mov	sl, r0
 80026b2:	468b      	mov	fp, r1
 80026b4:	4b94      	ldr	r3, [pc, #592]	; (8002908 <disp_needle_speed+0x2c0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd fe9b 	bl	80003f4 <__aeabi_i2d>
 80026be:	a38a      	add	r3, pc, #552	; (adr r3, 80028e8 <disp_needle_speed+0x2a0>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fd ff00 	bl	80004c8 <__aeabi_dmul>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	4b8e      	ldr	r3, [pc, #568]	; (8002910 <disp_needle_speed+0x2c8>)
 80026d6:	f7fe f821 	bl	800071c <__aeabi_ddiv>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	f006 fde7 	bl	80092b4 <sin>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4690      	mov	r8, r2
 80026ec:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80026f0:	4642      	mov	r2, r8
 80026f2:	464b      	mov	r3, r9
 80026f4:	4650      	mov	r0, sl
 80026f6:	4659      	mov	r1, fp
 80026f8:	f7fd fee6 	bl	80004c8 <__aeabi_dmul>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4690      	mov	r8, r2
 8002702:	4699      	mov	r9, r3
 8002704:	4b83      	ldr	r3, [pc, #524]	; (8002914 <disp_needle_speed+0x2cc>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd fe73 	bl	80003f4 <__aeabi_i2d>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4640      	mov	r0, r8
 8002714:	4649      	mov	r1, r9
 8002716:	f7fd fd21 	bl	800015c <__adddf3>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f7fe f993 	bl	8000a4c <__aeabi_d2uiz>
 8002726:	4603      	mov	r3, r0
 8002728:	b29a      	uxth	r2, r3
 800272a:	4b72      	ldr	r3, [pc, #456]	; (80028f4 <disp_needle_speed+0x2ac>)
 800272c:	801a      	strh	r2, [r3, #0]
		needle_start_y = needle_radius_big * cos(needle_angle_deg * 3.14/ 180) + needle_center_y;
 800272e:	4b77      	ldr	r3, [pc, #476]	; (800290c <disp_needle_speed+0x2c4>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd fe5e 	bl	80003f4 <__aeabi_i2d>
 8002738:	4680      	mov	r8, r0
 800273a:	4689      	mov	r9, r1
 800273c:	4b72      	ldr	r3, [pc, #456]	; (8002908 <disp_needle_speed+0x2c0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd fe57 	bl	80003f4 <__aeabi_i2d>
 8002746:	a368      	add	r3, pc, #416	; (adr r3, 80028e8 <disp_needle_speed+0x2a0>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f7fd febc 	bl	80004c8 <__aeabi_dmul>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	4b6c      	ldr	r3, [pc, #432]	; (8002910 <disp_needle_speed+0x2c8>)
 800275e:	f7fd ffdd 	bl	800071c <__aeabi_ddiv>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f006 fd6d 	bl	8009248 <cos>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4640      	mov	r0, r8
 8002774:	4649      	mov	r1, r9
 8002776:	f7fd fea7 	bl	80004c8 <__aeabi_dmul>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4690      	mov	r8, r2
 8002780:	4699      	mov	r9, r3
 8002782:	4b65      	ldr	r3, [pc, #404]	; (8002918 <disp_needle_speed+0x2d0>)
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fe34 	bl	80003f4 <__aeabi_i2d>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4640      	mov	r0, r8
 8002792:	4649      	mov	r1, r9
 8002794:	f7fd fce2 	bl	800015c <__adddf3>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	f7fe f954 	bl	8000a4c <__aeabi_d2uiz>
 80027a4:	4603      	mov	r3, r0
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	4b53      	ldr	r3, [pc, #332]	; (80028f8 <disp_needle_speed+0x2b0>)
 80027aa:	801a      	strh	r2, [r3, #0]

		needle_end_x = needle_radius_small * -sin((needle_angle_deg + 180) * 3.14 / 180) + needle_center_x;
 80027ac:	4b5b      	ldr	r3, [pc, #364]	; (800291c <disp_needle_speed+0x2d4>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fe1f 	bl	80003f4 <__aeabi_i2d>
 80027b6:	4680      	mov	r8, r0
 80027b8:	4689      	mov	r9, r1
 80027ba:	4b53      	ldr	r3, [pc, #332]	; (8002908 <disp_needle_speed+0x2c0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	33b4      	adds	r3, #180	; 0xb4
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd fe17 	bl	80003f4 <__aeabi_i2d>
 80027c6:	a348      	add	r3, pc, #288	; (adr r3, 80028e8 <disp_needle_speed+0x2a0>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	f7fd fe7c 	bl	80004c8 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <disp_needle_speed+0x2c8>)
 80027de:	f7fd ff9d 	bl	800071c <__aeabi_ddiv>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	f006 fd63 	bl	80092b4 <sin>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4614      	mov	r4, r2
 80027f4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80027f8:	4622      	mov	r2, r4
 80027fa:	462b      	mov	r3, r5
 80027fc:	4640      	mov	r0, r8
 80027fe:	4649      	mov	r1, r9
 8002800:	f7fd fe62 	bl	80004c8 <__aeabi_dmul>
 8002804:	4603      	mov	r3, r0
 8002806:	460c      	mov	r4, r1
 8002808:	4625      	mov	r5, r4
 800280a:	461c      	mov	r4, r3
 800280c:	4b41      	ldr	r3, [pc, #260]	; (8002914 <disp_needle_speed+0x2cc>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fdef 	bl	80003f4 <__aeabi_i2d>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4620      	mov	r0, r4
 800281c:	4629      	mov	r1, r5
 800281e:	f7fd fc9d 	bl	800015c <__adddf3>
 8002822:	4603      	mov	r3, r0
 8002824:	460c      	mov	r4, r1
 8002826:	4618      	mov	r0, r3
 8002828:	4621      	mov	r1, r4
 800282a:	f7fe f90f 	bl	8000a4c <__aeabi_d2uiz>
 800282e:	4603      	mov	r3, r0
 8002830:	b29a      	uxth	r2, r3
 8002832:	4b32      	ldr	r3, [pc, #200]	; (80028fc <disp_needle_speed+0x2b4>)
 8002834:	801a      	strh	r2, [r3, #0]
		needle_end_y = needle_radius_small * cos((needle_angle_deg + 180)* 3.14/ 180) + needle_center_y;
 8002836:	4b39      	ldr	r3, [pc, #228]	; (800291c <disp_needle_speed+0x2d4>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd fdda 	bl	80003f4 <__aeabi_i2d>
 8002840:	4604      	mov	r4, r0
 8002842:	460d      	mov	r5, r1
 8002844:	4b30      	ldr	r3, [pc, #192]	; (8002908 <disp_needle_speed+0x2c0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	33b4      	adds	r3, #180	; 0xb4
 800284a:	4618      	mov	r0, r3
 800284c:	f7fd fdd2 	bl	80003f4 <__aeabi_i2d>
 8002850:	a325      	add	r3, pc, #148	; (adr r3, 80028e8 <disp_needle_speed+0x2a0>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f7fd fe37 	bl	80004c8 <__aeabi_dmul>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <disp_needle_speed+0x2c8>)
 8002868:	f7fd ff58 	bl	800071c <__aeabi_ddiv>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	f006 fce8 	bl	8009248 <cos>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4620      	mov	r0, r4
 800287e:	4629      	mov	r1, r5
 8002880:	f7fd fe22 	bl	80004c8 <__aeabi_dmul>
 8002884:	4603      	mov	r3, r0
 8002886:	460c      	mov	r4, r1
 8002888:	4625      	mov	r5, r4
 800288a:	461c      	mov	r4, r3
 800288c:	4b22      	ldr	r3, [pc, #136]	; (8002918 <disp_needle_speed+0x2d0>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7fd fdaf 	bl	80003f4 <__aeabi_i2d>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4620      	mov	r0, r4
 800289c:	4629      	mov	r1, r5
 800289e:	f7fd fc5d 	bl	800015c <__adddf3>
 80028a2:	4603      	mov	r3, r0
 80028a4:	460c      	mov	r4, r1
 80028a6:	4618      	mov	r0, r3
 80028a8:	4621      	mov	r1, r4
 80028aa:	f7fe f8cf 	bl	8000a4c <__aeabi_d2uiz>
 80028ae:	4603      	mov	r3, r0
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <disp_needle_speed+0x2b8>)
 80028b4:	801a      	strh	r2, [r3, #0]

		ssd1306_Line(needle_start_x, needle_start_y, needle_end_x, 	needle_end_y, White);
 80028b6:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <disp_needle_speed+0x2ac>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b2d8      	uxtb	r0, r3
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <disp_needle_speed+0x2b0>)
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b2d9      	uxtb	r1, r3
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <disp_needle_speed+0x2b4>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <disp_needle_speed+0x2b8>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b2dc      	uxtb	r4, r3
 80028ce:	2301      	movs	r3, #1
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	4623      	mov	r3, r4
 80028d4:	f7ff fbde 	bl	8002094 <ssd1306_Line>
		pre_speed = speed;
 80028d8:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <disp_needle_speed+0x2a8>)
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	8013      	strh	r3, [r2, #0]
	}
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028e8:	51eb851f 	.word	0x51eb851f
 80028ec:	40091eb8 	.word	0x40091eb8
 80028f0:	20000714 	.word	0x20000714
 80028f4:	2000070c 	.word	0x2000070c
 80028f8:	2000070e 	.word	0x2000070e
 80028fc:	20000710 	.word	0x20000710
 8002900:	20000712 	.word	0x20000712
 8002904:	6d978b8f 	.word	0x6d978b8f
 8002908:	20000008 	.word	0x20000008
 800290c:	20000010 	.word	0x20000010
 8002910:	40668000 	.word	0x40668000
 8002914:	2000000c 	.word	0x2000000c
 8002918:	2000000e 	.word	0x2000000e
 800291c:	20000012 	.word	0x20000012

08002920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_MspInit+0x68>)
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_MspInit+0x68>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6193      	str	r3, [r2, #24]
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_MspInit+0x68>)
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_MspInit+0x68>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	4a11      	ldr	r2, [pc, #68]	; (8002988 <HAL_MspInit+0x68>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002948:	61d3      	str	r3, [r2, #28]
 800294a:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <HAL_MspInit+0x68>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	210f      	movs	r1, #15
 800295a:	f06f 0001 	mvn.w	r0, #1
 800295e:	f001 fe10 	bl	8004582 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <HAL_MspInit+0x6c>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	4a04      	ldr	r2, [pc, #16]	; (800298c <HAL_MspInit+0x6c>)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	40010000 	.word	0x40010000

08002990 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a2c      	ldr	r2, [pc, #176]	; (8002a5c <HAL_ADC_MspInit+0xcc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d151      	bne.n	8002a54 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029b0:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <HAL_ADC_MspInit+0xd0>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4a2a      	ldr	r2, [pc, #168]	; (8002a60 <HAL_ADC_MspInit+0xd0>)
 80029b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <HAL_ADC_MspInit+0xd0>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c8:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <HAL_ADC_MspInit+0xd0>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4a24      	ldr	r2, [pc, #144]	; (8002a60 <HAL_ADC_MspInit+0xd0>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	6193      	str	r3, [r2, #24]
 80029d4:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <HAL_ADC_MspInit+0xd0>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029e0:	2303      	movs	r3, #3
 80029e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029e4:	2303      	movs	r3, #3
 80029e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	4619      	mov	r1, r3
 80029ee:	481d      	ldr	r0, [pc, #116]	; (8002a64 <HAL_ADC_MspInit+0xd4>)
 80029f0:	f001 ffec 	bl	80049cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <HAL_ADC_MspInit+0xd8>)
 80029f6:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <HAL_ADC_MspInit+0xdc>)
 80029f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029fa:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_ADC_MspInit+0xd8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_ADC_MspInit+0xd8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_ADC_MspInit+0xd8>)
 8002a08:	2280      	movs	r2, #128	; 0x80
 8002a0a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a0c:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_ADC_MspInit+0xd8>)
 8002a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_ADC_MspInit+0xd8>)
 8002a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_ADC_MspInit+0xd8>)
 8002a1e:	2220      	movs	r2, #32
 8002a20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_ADC_MspInit+0xd8>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a28:	480f      	ldr	r0, [pc, #60]	; (8002a68 <HAL_ADC_MspInit+0xd8>)
 8002a2a:	f001 fde1 	bl	80045f0 <HAL_DMA_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002a34:	f7ff f932 	bl	8001c9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <HAL_ADC_MspInit+0xd8>)
 8002a3c:	621a      	str	r2, [r3, #32]
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <HAL_ADC_MspInit+0xd8>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2105      	movs	r1, #5
 8002a48:	2012      	movs	r0, #18
 8002a4a:	f001 fd9a 	bl	8004582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002a4e:	2012      	movs	r0, #18
 8002a50:	f001 fdb3 	bl	80045ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a54:	bf00      	nop
 8002a56:	3720      	adds	r7, #32
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40012400 	.word	0x40012400
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40010800 	.word	0x40010800
 8002a68:	20001578 	.word	0x20001578
 8002a6c:	40020008 	.word	0x40020008

08002a70 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <HAL_CAN_MspInit+0x9c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d139      	bne.n	8002b04 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <HAL_CAN_MspInit+0xa0>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <HAL_CAN_MspInit+0xa0>)
 8002a96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	61d3      	str	r3, [r2, #28]
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <HAL_CAN_MspInit+0xa0>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_CAN_MspInit+0xa0>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <HAL_CAN_MspInit+0xa0>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	6193      	str	r3, [r2, #24]
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_CAN_MspInit+0xa0>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ac0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480f      	ldr	r0, [pc, #60]	; (8002b14 <HAL_CAN_MspInit+0xa4>)
 8002ad6:	f001 ff79 	bl	80049cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	4619      	mov	r1, r3
 8002aee:	4809      	ldr	r0, [pc, #36]	; (8002b14 <HAL_CAN_MspInit+0xa4>)
 8002af0:	f001 ff6c 	bl	80049cc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8002af4:	2200      	movs	r2, #0
 8002af6:	2105      	movs	r1, #5
 8002af8:	2014      	movs	r0, #20
 8002afa:	f001 fd42 	bl	8004582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002afe:	2014      	movs	r0, #20
 8002b00:	f001 fd5b 	bl	80045ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002b04:	bf00      	nop
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40006400 	.word	0x40006400
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40010800 	.word	0x40010800

08002b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a15      	ldr	r2, [pc, #84]	; (8002b88 <HAL_I2C_MspInit+0x70>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d123      	bne.n	8002b80 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b38:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_I2C_MspInit+0x74>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <HAL_I2C_MspInit+0x74>)
 8002b3e:	f043 0308 	orr.w	r3, r3, #8
 8002b42:	6193      	str	r3, [r2, #24]
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_I2C_MspInit+0x74>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b50:	23c0      	movs	r3, #192	; 0xc0
 8002b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b54:	2312      	movs	r3, #18
 8002b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5c:	f107 0310 	add.w	r3, r7, #16
 8002b60:	4619      	mov	r1, r3
 8002b62:	480b      	ldr	r0, [pc, #44]	; (8002b90 <HAL_I2C_MspInit+0x78>)
 8002b64:	f001 ff32 	bl	80049cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b68:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <HAL_I2C_MspInit+0x74>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	4a07      	ldr	r2, [pc, #28]	; (8002b8c <HAL_I2C_MspInit+0x74>)
 8002b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b72:	61d3      	str	r3, [r2, #28]
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_I2C_MspInit+0x74>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b80:	bf00      	nop
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40005400 	.word	0x40005400
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40010c00 	.word	0x40010c00

08002b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba4:	d113      	bne.n	8002bce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <HAL_TIM_Base_MspInit+0x44>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4a0b      	ldr	r2, [pc, #44]	; (8002bd8 <HAL_TIM_Base_MspInit+0x44>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	61d3      	str	r3, [r2, #28]
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_TIM_Base_MspInit+0x44>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2105      	movs	r1, #5
 8002bc2:	201c      	movs	r0, #28
 8002bc4:	f001 fcdd 	bl	8004582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bc8:	201c      	movs	r0, #28
 8002bca:	f001 fcf6 	bl	80045ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000

08002bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002be0:	e7fe      	b.n	8002be0 <NMI_Handler+0x4>

08002be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be6:	e7fe      	b.n	8002be6 <HardFault_Handler+0x4>

08002be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bec:	e7fe      	b.n	8002bec <MemManage_Handler+0x4>

08002bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf2:	e7fe      	b.n	8002bf2 <BusFault_Handler+0x4>

08002bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf8:	e7fe      	b.n	8002bf8 <UsageFault_Handler+0x4>

08002bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c0a:	f000 f8d9 	bl	8002dc0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002c0e:	f005 fa0d 	bl	800802c <xTaskGetSchedulerState>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d001      	beq.n	8002c1c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002c18:	f005 fc76 	bl	8008508 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c24:	4802      	ldr	r0, [pc, #8]	; (8002c30 <DMA1_Channel1_IRQHandler+0x10>)
 8002c26:	f001 fd9d 	bl	8004764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20001578 	.word	0x20001578

08002c34 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <ADC1_2_IRQHandler+0x10>)
 8002c3a:	f000 fab5 	bl	80031a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20001520 	.word	0x20001520

08002c48 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002c4e:	f001 f9a3 	bl	8003f98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	200014f0 	.word	0x200014f0

08002c5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <TIM2_IRQHandler+0x10>)
 8002c62:	f003 f998 	bl	8005f96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200015c8 	.word	0x200015c8

08002c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c78:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <_sbrk+0x5c>)
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <_sbrk+0x60>)
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <_sbrk+0x64>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <_sbrk+0x64>)
 8002c8e:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <_sbrk+0x68>)
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <_sbrk+0x64>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d207      	bcs.n	8002cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca0:	f005 fe84 	bl	80089ac <__errno>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	230c      	movs	r3, #12
 8002ca8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cae:	e009      	b.n	8002cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <_sbrk+0x64>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <_sbrk+0x64>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <_sbrk+0x64>)
 8002cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20005000 	.word	0x20005000
 8002cd0:	00000400 	.word	0x00000400
 8002cd4:	20000718 	.word	0x20000718
 8002cd8:	20001630 	.word	0x20001630

08002cdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ce8:	480c      	ldr	r0, [pc, #48]	; (8002d1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cea:	490d      	ldr	r1, [pc, #52]	; (8002d20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cec:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf0:	e002      	b.n	8002cf8 <LoopCopyDataInit>

08002cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cf6:	3304      	adds	r3, #4

08002cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cfc:	d3f9      	bcc.n	8002cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d00:	4c0a      	ldr	r4, [pc, #40]	; (8002d2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d04:	e001      	b.n	8002d0a <LoopFillZerobss>

08002d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d08:	3204      	adds	r2, #4

08002d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d0c:	d3fb      	bcc.n	8002d06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d0e:	f7ff ffe5 	bl	8002cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d12:	f005 fe51 	bl	80089b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d16:	f7fe fc45 	bl	80015a4 <main>
  bx lr
 8002d1a:	4770      	bx	lr
  ldr r0, =_sdata
 8002d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d20:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002d24:	0800c300 	.word	0x0800c300
  ldr r2, =_sbss
 8002d28:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002d2c:	20001630 	.word	0x20001630

08002d30 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d30:	e7fe      	b.n	8002d30 <CAN1_RX1_IRQHandler>
	...

08002d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_Init+0x28>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <HAL_Init+0x28>)
 8002d3e:	f043 0310 	orr.w	r3, r3, #16
 8002d42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d44:	2003      	movs	r0, #3
 8002d46:	f001 fc11 	bl	800456c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d4a:	200f      	movs	r0, #15
 8002d4c:	f000 f808 	bl	8002d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d50:	f7ff fde6 	bl	8002920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40022000 	.word	0x40022000

08002d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d68:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_InitTick+0x54>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_InitTick+0x58>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	4619      	mov	r1, r3
 8002d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f001 fc29 	bl	80045d6 <HAL_SYSTICK_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00e      	b.n	8002dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b0f      	cmp	r3, #15
 8002d92:	d80a      	bhi.n	8002daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d94:	2200      	movs	r2, #0
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	f001 fbf1 	bl	8004582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da0:	4a06      	ldr	r2, [pc, #24]	; (8002dbc <HAL_InitTick+0x5c>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e000      	b.n	8002dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000014 	.word	0x20000014
 8002db8:	2000001c 	.word	0x2000001c
 8002dbc:	20000018 	.word	0x20000018

08002dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_IncTick+0x1c>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_IncTick+0x20>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <HAL_IncTick+0x20>)
 8002dd2:	6013      	str	r3, [r2, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	2000001c 	.word	0x2000001c
 8002de0:	20001628 	.word	0x20001628

08002de4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return uwTick;
 8002de8:	4b02      	ldr	r3, [pc, #8]	; (8002df4 <HAL_GetTick+0x10>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	20001628 	.word	0x20001628

08002df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7ff fff0 	bl	8002de4 <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d005      	beq.n	8002e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_Delay+0x40>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e1e:	bf00      	nop
 8002e20:	f7ff ffe0 	bl	8002de4 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d8f7      	bhi.n	8002e20 <HAL_Delay+0x28>
  {
  }
}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	2000001c 	.word	0x2000001c

08002e3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0be      	b.n	8002fdc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff fd88 	bl	8002990 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fbc1 	bl	8003608 <ADC_ConversionStop_Disable>
 8002e86:	4603      	mov	r3, r0
 8002e88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 8099 	bne.w	8002fca <HAL_ADC_Init+0x18e>
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 8095 	bne.w	8002fca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ea8:	f023 0302 	bic.w	r3, r3, #2
 8002eac:	f043 0202 	orr.w	r2, r3, #2
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ebc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	7b1b      	ldrb	r3, [r3, #12]
 8002ec2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ec4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed4:	d003      	beq.n	8002ede <HAL_ADC_Init+0xa2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <HAL_ADC_Init+0xa8>
 8002ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ee2:	e000      	b.n	8002ee6 <HAL_ADC_Init+0xaa>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	7d1b      	ldrb	r3, [r3, #20]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d119      	bne.n	8002f28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7b1b      	ldrb	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	035a      	lsls	r2, r3, #13
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	e00b      	b.n	8002f28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	f043 0201 	orr.w	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <HAL_ADC_Init+0x1a8>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f58:	d003      	beq.n	8002f62 <HAL_ADC_Init+0x126>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d104      	bne.n	8002f6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	051b      	lsls	r3, r3, #20
 8002f6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <HAL_ADC_Init+0x1ac>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	f023 0303 	bic.w	r3, r3, #3
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fa6:	e018      	b.n	8002fda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	f023 0312 	bic.w	r3, r3, #18
 8002fb0:	f043 0210 	orr.w	r2, r3, #16
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fc8:	e007      	b.n	8002fda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	f043 0210 	orr.w	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	ffe1f7fd 	.word	0xffe1f7fd
 8002fe8:	ff1f0efe 	.word	0xff1f0efe

08002fec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a64      	ldr	r2, [pc, #400]	; (8003194 <HAL_ADC_Start_DMA+0x1a8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d004      	beq.n	8003010 <HAL_ADC_Start_DMA+0x24>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a63      	ldr	r2, [pc, #396]	; (8003198 <HAL_ADC_Start_DMA+0x1ac>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d106      	bne.n	800301e <HAL_ADC_Start_DMA+0x32>
 8003010:	4b60      	ldr	r3, [pc, #384]	; (8003194 <HAL_ADC_Start_DMA+0x1a8>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003018:	2b00      	cmp	r3, #0
 800301a:	f040 80b3 	bne.w	8003184 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_ADC_Start_DMA+0x40>
 8003028:	2302      	movs	r3, #2
 800302a:	e0ae      	b.n	800318a <HAL_ADC_Start_DMA+0x19e>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fa8d 	bl	8003554 <ADC_Enable>
 800303a:	4603      	mov	r3, r0
 800303c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b00      	cmp	r3, #0
 8003042:	f040 809a 	bne.w	800317a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a4e      	ldr	r2, [pc, #312]	; (8003198 <HAL_ADC_Start_DMA+0x1ac>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d105      	bne.n	8003070 <HAL_ADC_Start_DMA+0x84>
 8003064:	4b4b      	ldr	r3, [pc, #300]	; (8003194 <HAL_ADC_Start_DMA+0x1a8>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d115      	bne.n	800309c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003086:	2b00      	cmp	r3, #0
 8003088:	d026      	beq.n	80030d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003092:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800309a:	e01d      	b.n	80030d8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a39      	ldr	r2, [pc, #228]	; (8003194 <HAL_ADC_Start_DMA+0x1a8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d004      	beq.n	80030bc <HAL_ADC_Start_DMA+0xd0>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a38      	ldr	r2, [pc, #224]	; (8003198 <HAL_ADC_Start_DMA+0x1ac>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d10d      	bne.n	80030d8 <HAL_ADC_Start_DMA+0xec>
 80030bc:	4b35      	ldr	r3, [pc, #212]	; (8003194 <HAL_ADC_Start_DMA+0x1a8>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	f023 0206 	bic.w	r2, r3, #6
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80030f0:	e002      	b.n	80030f8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <HAL_ADC_Start_DMA+0x1b0>)
 8003106:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4a24      	ldr	r2, [pc, #144]	; (80031a0 <HAL_ADC_Start_DMA+0x1b4>)
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4a23      	ldr	r2, [pc, #140]	; (80031a4 <HAL_ADC_Start_DMA+0x1b8>)
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0202 	mvn.w	r2, #2
 8003120:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003130:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a18      	ldr	r0, [r3, #32]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	334c      	adds	r3, #76	; 0x4c
 800313c:	4619      	mov	r1, r3
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f001 faaf 	bl	80046a4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003150:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003154:	d108      	bne.n	8003168 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003164:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003166:	e00f      	b.n	8003188 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003176:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003178:	e006      	b.n	8003188 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003182:	e001      	b.n	8003188 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003188:	7dfb      	ldrb	r3, [r7, #23]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40012400 	.word	0x40012400
 8003198:	40012800 	.word	0x40012800
 800319c:	0800368b 	.word	0x0800368b
 80031a0:	08003707 	.word	0x08003707
 80031a4:	08003723 	.word	0x08003723

080031a8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d140      	bne.n	8003240 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d139      	bne.n	8003240 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031f2:	d11d      	bne.n	8003230 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d119      	bne.n	8003230 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0220 	bic.w	r2, r2, #32
 800320a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d105      	bne.n	8003230 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	f043 0201 	orr.w	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fe f87b 	bl	800132c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f06f 0212 	mvn.w	r2, #18
 800323e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324a:	2b80      	cmp	r3, #128	; 0x80
 800324c:	d14f      	bne.n	80032ee <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d148      	bne.n	80032ee <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800327e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003282:	d012      	beq.n	80032aa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800328e:	2b00      	cmp	r3, #0
 8003290:	d125      	bne.n	80032de <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800329c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032a0:	d11d      	bne.n	80032de <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d119      	bne.n	80032de <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d105      	bne.n	80032de <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	f043 0201 	orr.w	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fa39 	bl	8003756 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 020c 	mvn.w	r2, #12
 80032ec:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d114      	bne.n	8003326 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d10d      	bne.n	8003326 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f812 	bl	8003340 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0201 	mvn.w	r2, #1
 8003324:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x20>
 8003380:	2302      	movs	r3, #2
 8003382:	e0dc      	b.n	800353e <HAL_ADC_ConfigChannel+0x1da>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b06      	cmp	r3, #6
 8003392:	d81c      	bhi.n	80033ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	3b05      	subs	r3, #5
 80033a6:	221f      	movs	r2, #31
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	4019      	ands	r1, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	3b05      	subs	r3, #5
 80033c0:	fa00 f203 	lsl.w	r2, r0, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	635a      	str	r2, [r3, #52]	; 0x34
 80033cc:	e03c      	b.n	8003448 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d81c      	bhi.n	8003410 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	3b23      	subs	r3, #35	; 0x23
 80033e8:	221f      	movs	r2, #31
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	4019      	ands	r1, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	3b23      	subs	r3, #35	; 0x23
 8003402:	fa00 f203 	lsl.w	r2, r0, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
 800340e:	e01b      	b.n	8003448 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	3b41      	subs	r3, #65	; 0x41
 8003422:	221f      	movs	r2, #31
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	4019      	ands	r1, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	3b41      	subs	r3, #65	; 0x41
 800343c:	fa00 f203 	lsl.w	r2, r0, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b09      	cmp	r3, #9
 800344e:	d91c      	bls.n	800348a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68d9      	ldr	r1, [r3, #12]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	4613      	mov	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4413      	add	r3, r2
 8003460:	3b1e      	subs	r3, #30
 8003462:	2207      	movs	r2, #7
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	4019      	ands	r1, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6898      	ldr	r0, [r3, #8]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4413      	add	r3, r2
 800347a:	3b1e      	subs	r3, #30
 800347c:	fa00 f203 	lsl.w	r2, r0, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]
 8003488:	e019      	b.n	80034be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6919      	ldr	r1, [r3, #16]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	2207      	movs	r2, #7
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	4019      	ands	r1, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	6898      	ldr	r0, [r3, #8]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	fa00 f203 	lsl.w	r2, r0, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d003      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034ca:	2b11      	cmp	r3, #17
 80034cc:	d132      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <HAL_ADC_ConfigChannel+0x1e4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d125      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d126      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b10      	cmp	r3, #16
 80034fc:	d11a      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034fe:	4b13      	ldr	r3, [pc, #76]	; (800354c <HAL_ADC_ConfigChannel+0x1e8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a13      	ldr	r2, [pc, #76]	; (8003550 <HAL_ADC_ConfigChannel+0x1ec>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	0c9a      	lsrs	r2, r3, #18
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003514:	e002      	b.n	800351c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3b01      	subs	r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f9      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x1b2>
 8003522:	e007      	b.n	8003534 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800353c:	7bfb      	ldrb	r3, [r7, #15]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	40012400 	.word	0x40012400
 800354c:	20000014 	.word	0x20000014
 8003550:	431bde83 	.word	0x431bde83

08003554 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d040      	beq.n	80035f4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003582:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <ADC_Enable+0xac>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1f      	ldr	r2, [pc, #124]	; (8003604 <ADC_Enable+0xb0>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	0c9b      	lsrs	r3, r3, #18
 800358e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003590:	e002      	b.n	8003598 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3b01      	subs	r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f9      	bne.n	8003592 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800359e:	f7ff fc21 	bl	8002de4 <HAL_GetTick>
 80035a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035a4:	e01f      	b.n	80035e6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035a6:	f7ff fc1d 	bl	8002de4 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d918      	bls.n	80035e6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d011      	beq.n	80035e6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	f043 0210 	orr.w	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	f043 0201 	orr.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e007      	b.n	80035f6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d1d8      	bne.n	80035a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000014 	.word	0x20000014
 8003604:	431bde83 	.word	0x431bde83

08003608 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d12e      	bne.n	8003680 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003632:	f7ff fbd7 	bl	8002de4 <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003638:	e01b      	b.n	8003672 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800363a:	f7ff fbd3 	bl	8002de4 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d914      	bls.n	8003672 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10d      	bne.n	8003672 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	f043 0210 	orr.w	r2, r3, #16
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f043 0201 	orr.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e007      	b.n	8003682 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b01      	cmp	r3, #1
 800367e:	d0dc      	beq.n	800363a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d127      	bne.n	80036f4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80036ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80036be:	d115      	bne.n	80036ec <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d111      	bne.n	80036ec <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7fd fe1d 	bl	800132c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80036f2:	e004      	b.n	80036fe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f7ff fe0a 	bl	800332e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	f043 0204 	orr.w	r2, r3, #4
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff fe02 	bl	8003352 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0ed      	b.n	8003956 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff f972 	bl	8002a70 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800379c:	f7ff fb22 	bl	8002de4 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037a2:	e012      	b.n	80037ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037a4:	f7ff fb1e 	bl	8002de4 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b0a      	cmp	r3, #10
 80037b0:	d90b      	bls.n	80037ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2205      	movs	r2, #5
 80037c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e0c5      	b.n	8003956 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0e5      	beq.n	80037a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0202 	bic.w	r2, r2, #2
 80037e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037e8:	f7ff fafc 	bl	8002de4 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037ee:	e012      	b.n	8003816 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037f0:	f7ff faf8 	bl	8002de4 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b0a      	cmp	r3, #10
 80037fc:	d90b      	bls.n	8003816 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2205      	movs	r2, #5
 800380e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e09f      	b.n	8003956 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e5      	bne.n	80037f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	7e1b      	ldrb	r3, [r3, #24]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d108      	bne.n	800383e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	e007      	b.n	800384e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800384c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	7e5b      	ldrb	r3, [r3, #25]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d108      	bne.n	8003868 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e007      	b.n	8003878 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003876:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	7e9b      	ldrb	r3, [r3, #26]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d108      	bne.n	8003892 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0220 	orr.w	r2, r2, #32
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e007      	b.n	80038a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0220 	bic.w	r2, r2, #32
 80038a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	7edb      	ldrb	r3, [r3, #27]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d108      	bne.n	80038bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0210 	bic.w	r2, r2, #16
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e007      	b.n	80038cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0210 	orr.w	r2, r2, #16
 80038ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	7f1b      	ldrb	r3, [r3, #28]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d108      	bne.n	80038e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0208 	orr.w	r2, r2, #8
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e007      	b.n	80038f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0208 	bic.w	r2, r2, #8
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	7f5b      	ldrb	r3, [r3, #29]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d108      	bne.n	8003910 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0204 	orr.w	r2, r2, #4
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e007      	b.n	8003920 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0204 	bic.w	r2, r2, #4
 800391e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	ea42 0103 	orr.w	r1, r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	1e5a      	subs	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800395e:	b480      	push	{r7}
 8003960:	b087      	sub	sp, #28
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003974:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003976:	7cfb      	ldrb	r3, [r7, #19]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d003      	beq.n	8003984 <HAL_CAN_ConfigFilter+0x26>
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	2b02      	cmp	r3, #2
 8003980:	f040 80aa 	bne.w	8003ad8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800398a:	f043 0201 	orr.w	r2, r3, #1
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	2201      	movs	r2, #1
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	401a      	ands	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d123      	bne.n	8003a06 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	401a      	ands	r2, r3
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	3248      	adds	r2, #72	; 0x48
 80039e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039fc:	6979      	ldr	r1, [r7, #20]
 80039fe:	3348      	adds	r3, #72	; 0x48
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d122      	bne.n	8003a54 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	3248      	adds	r2, #72	; 0x48
 8003a34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a4a:	6979      	ldr	r1, [r7, #20]
 8003a4c:	3348      	adds	r3, #72	; 0x48
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	440b      	add	r3, r1
 8003a52:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	401a      	ands	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003a6e:	e007      	b.n	8003a80 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	401a      	ands	r2, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003a9a:	e007      	b.n	8003aac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d107      	bne.n	8003ac4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003aca:	f023 0201 	bic.w	r2, r3, #1
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e006      	b.n	8003ae6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d12e      	bne.n	8003b62 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b1c:	f7ff f962 	bl	8002de4 <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b22:	e012      	b.n	8003b4a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b24:	f7ff f95e 	bl	8002de4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b0a      	cmp	r3, #10
 8003b30:	d90b      	bls.n	8003b4a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2205      	movs	r2, #5
 8003b42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e012      	b.n	8003b70 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e5      	bne.n	8003b24 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e006      	b.n	8003b70 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
  }
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b089      	sub	sp, #36	; 0x24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b8c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b96:	7ffb      	ldrb	r3, [r7, #31]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d003      	beq.n	8003ba4 <HAL_CAN_AddTxMessage+0x2c>
 8003b9c:	7ffb      	ldrb	r3, [r7, #31]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	f040 80b8 	bne.w	8003d14 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80a0 	beq.w	8003d04 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	0e1b      	lsrs	r3, r3, #24
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d907      	bls.n	8003be4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e09e      	b.n	8003d22 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003be4:	2201      	movs	r2, #1
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	409a      	lsls	r2, r3
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c00:	68f9      	ldr	r1, [r7, #12]
 8003c02:	6809      	ldr	r1, [r1, #0]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	3318      	adds	r3, #24
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	440b      	add	r3, r1
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e00f      	b.n	8003c32 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c1c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c22:	68f9      	ldr	r1, [r7, #12]
 8003c24:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003c26:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	3318      	adds	r3, #24
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	440b      	add	r3, r1
 8003c30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6819      	ldr	r1, [r3, #0]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	3318      	adds	r3, #24
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	440b      	add	r3, r1
 8003c42:	3304      	adds	r3, #4
 8003c44:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	7d1b      	ldrb	r3, [r3, #20]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d111      	bne.n	8003c72 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	3318      	adds	r3, #24
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	4413      	add	r3, r2
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	6811      	ldr	r1, [r2, #0]
 8003c62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	3318      	adds	r3, #24
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	440b      	add	r3, r1
 8003c6e:	3304      	adds	r3, #4
 8003c70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3307      	adds	r3, #7
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	061a      	lsls	r2, r3, #24
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3306      	adds	r3, #6
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3305      	adds	r3, #5
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	3204      	adds	r2, #4
 8003c92:	7812      	ldrb	r2, [r2, #0]
 8003c94:	4610      	mov	r0, r2
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	6811      	ldr	r1, [r2, #0]
 8003c9a:	ea43 0200 	orr.w	r2, r3, r0
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	440b      	add	r3, r1
 8003ca4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003ca8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3303      	adds	r3, #3
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	061a      	lsls	r2, r3, #24
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	041b      	lsls	r3, r3, #16
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	4610      	mov	r0, r2
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	6811      	ldr	r1, [r2, #0]
 8003cd0:	ea43 0200 	orr.w	r2, r3, r0
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	440b      	add	r3, r1
 8003cda:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003cde:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	3318      	adds	r3, #24
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	4413      	add	r3, r2
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	6811      	ldr	r1, [r2, #0]
 8003cf2:	f043 0201 	orr.w	r2, r3, #1
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	3318      	adds	r3, #24
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	440b      	add	r3, r1
 8003cfe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e00e      	b.n	8003d22 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e006      	b.n	8003d22 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
  }
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3724      	adds	r7, #36	; 0x24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d40:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d003      	beq.n	8003d50 <HAL_CAN_GetRxMessage+0x24>
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	f040 80f3 	bne.w	8003f36 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10e      	bne.n	8003d74 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d116      	bne.n	8003d92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0e7      	b.n	8003f44 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d107      	bne.n	8003d92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e0d8      	b.n	8003f44 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	331b      	adds	r3, #27
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	4413      	add	r3, r2
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0204 	and.w	r2, r3, #4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10c      	bne.n	8003dca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	331b      	adds	r3, #27
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	4413      	add	r3, r2
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	0d5b      	lsrs	r3, r3, #21
 8003dc0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e00b      	b.n	8003de2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	331b      	adds	r3, #27
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	4413      	add	r3, r2
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	08db      	lsrs	r3, r3, #3
 8003dda:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	331b      	adds	r3, #27
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	4413      	add	r3, r2
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0202 	and.w	r2, r3, #2
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	331b      	adds	r3, #27
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	4413      	add	r3, r2
 8003e04:	3304      	adds	r3, #4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 020f 	and.w	r2, r3, #15
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	331b      	adds	r3, #27
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	0a1b      	lsrs	r3, r3, #8
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	331b      	adds	r3, #27
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	4413      	add	r3, r2
 8003e34:	3304      	adds	r3, #4
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	0a1a      	lsrs	r2, r3, #8
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	0c1a      	lsrs	r2, r3, #16
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	3302      	adds	r3, #2
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	0e1a      	lsrs	r2, r3, #24
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	3303      	adds	r3, #3
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	0a1a      	lsrs	r2, r3, #8
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	3305      	adds	r3, #5
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	0c1a      	lsrs	r2, r3, #16
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	3306      	adds	r3, #6
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	0e1a      	lsrs	r2, r3, #24
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	3307      	adds	r3, #7
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d108      	bne.n	8003f22 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0220 	orr.w	r2, r2, #32
 8003f1e:	60da      	str	r2, [r3, #12]
 8003f20:	e007      	b.n	8003f32 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0220 	orr.w	r2, r2, #32
 8003f30:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e006      	b.n	8003f44 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f5e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d002      	beq.n	8003f6c <HAL_CAN_ActivateNotification+0x1e>
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d109      	bne.n	8003f80 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6959      	ldr	r1, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e006      	b.n	8003f8e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
  }
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	; 0x28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d07c      	beq.n	80040d8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d023      	beq.n	8004030 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2201      	movs	r2, #1
 8003fee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f97d 	bl	80042fa <HAL_CAN_TxMailbox0CompleteCallback>
 8004000:	e016      	b.n	8004030 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
 8004014:	e00c      	b.n	8004030 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d004      	beq.n	800402a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
 8004028:	e002      	b.n	8004030 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f980 	bl	8004330 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d024      	beq.n	8004084 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004042:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f95c 	bl	800430c <HAL_CAN_TxMailbox1CompleteCallback>
 8004054:	e016      	b.n	8004084 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405c:	2b00      	cmp	r3, #0
 800405e:	d004      	beq.n	800406a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
 8004068:	e00c      	b.n	8004084 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
 800407c:	e002      	b.n	8004084 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f95f 	bl	8004342 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d024      	beq.n	80040d8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004096:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f93b 	bl	800431e <HAL_CAN_TxMailbox2CompleteCallback>
 80040a8:	e016      	b.n	80040d8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d004      	beq.n	80040be <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
 80040bc:	e00c      	b.n	80040d8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d004      	beq.n	80040d2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
 80040d0:	e002      	b.n	80040d8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f93e 	bl	8004354 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00c      	beq.n	80040fc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2210      	movs	r2, #16
 80040fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d006      	beq.n	800411e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2208      	movs	r2, #8
 8004116:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f924 	bl	8004366 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d009      	beq.n	800413c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fd f9da 	bl	80014f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00c      	beq.n	8004160 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004156:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2210      	movs	r2, #16
 800415e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d006      	beq.n	8004182 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2208      	movs	r2, #8
 800417a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f904 	bl	800438a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f8ec 	bl	8004378 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d006      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2210      	movs	r2, #16
 80041ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f8ed 	bl	800439c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d006      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2208      	movs	r2, #8
 80041dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8e5 	bl	80043ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d075      	beq.n	80042da <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d06c      	beq.n	80042d2 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	f043 0302 	orr.w	r3, r3, #2
 800422e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	f043 0304 	orr.w	r3, r3, #4
 800424a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004252:	2b00      	cmp	r3, #0
 8004254:	d03d      	beq.n	80042d2 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800425c:	2b00      	cmp	r3, #0
 800425e:	d038      	beq.n	80042d2 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004266:	2b30      	cmp	r3, #48	; 0x30
 8004268:	d017      	beq.n	800429a <HAL_CAN_IRQHandler+0x302>
 800426a:	2b30      	cmp	r3, #48	; 0x30
 800426c:	d804      	bhi.n	8004278 <HAL_CAN_IRQHandler+0x2e0>
 800426e:	2b10      	cmp	r3, #16
 8004270:	d009      	beq.n	8004286 <HAL_CAN_IRQHandler+0x2ee>
 8004272:	2b20      	cmp	r3, #32
 8004274:	d00c      	beq.n	8004290 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004276:	e024      	b.n	80042c2 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8004278:	2b50      	cmp	r3, #80	; 0x50
 800427a:	d018      	beq.n	80042ae <HAL_CAN_IRQHandler+0x316>
 800427c:	2b60      	cmp	r3, #96	; 0x60
 800427e:	d01b      	beq.n	80042b8 <HAL_CAN_IRQHandler+0x320>
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d00f      	beq.n	80042a4 <HAL_CAN_IRQHandler+0x30c>
            break;
 8004284:	e01d      	b.n	80042c2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	f043 0308 	orr.w	r3, r3, #8
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800428e:	e018      	b.n	80042c2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f043 0310 	orr.w	r3, r3, #16
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004298:	e013      	b.n	80042c2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	f043 0320 	orr.w	r3, r3, #32
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042a2:	e00e      	b.n	80042c2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042ac:	e009      	b.n	80042c2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042b6:	e004      	b.n	80042c2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80042d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2204      	movs	r2, #4
 80042d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f867 	bl	80043c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80042f2:	bf00      	nop
 80042f4:	3728      	adds	r7, #40	; 0x28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	4770      	bx	lr

0800431e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr

08004342 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr
	...

080043d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <__NVIC_SetPriorityGrouping+0x44>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043f0:	4013      	ands	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004406:	4a04      	ldr	r2, [pc, #16]	; (8004418 <__NVIC_SetPriorityGrouping+0x44>)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	60d3      	str	r3, [r2, #12]
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004420:	4b04      	ldr	r3, [pc, #16]	; (8004434 <__NVIC_GetPriorityGrouping+0x18>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	0a1b      	lsrs	r3, r3, #8
 8004426:	f003 0307 	and.w	r3, r3, #7
}
 800442a:	4618      	mov	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004446:	2b00      	cmp	r3, #0
 8004448:	db0b      	blt.n	8004462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	f003 021f 	and.w	r2, r3, #31
 8004450:	4906      	ldr	r1, [pc, #24]	; (800446c <__NVIC_EnableIRQ+0x34>)
 8004452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	2001      	movs	r0, #1
 800445a:	fa00 f202 	lsl.w	r2, r0, r2
 800445e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	e000e100 	.word	0xe000e100

08004470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	6039      	str	r1, [r7, #0]
 800447a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004480:	2b00      	cmp	r3, #0
 8004482:	db0a      	blt.n	800449a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	490c      	ldr	r1, [pc, #48]	; (80044bc <__NVIC_SetPriority+0x4c>)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	0112      	lsls	r2, r2, #4
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	440b      	add	r3, r1
 8004494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004498:	e00a      	b.n	80044b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4908      	ldr	r1, [pc, #32]	; (80044c0 <__NVIC_SetPriority+0x50>)
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	3b04      	subs	r3, #4
 80044a8:	0112      	lsls	r2, r2, #4
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	440b      	add	r3, r1
 80044ae:	761a      	strb	r2, [r3, #24]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	e000e100 	.word	0xe000e100
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f1c3 0307 	rsb	r3, r3, #7
 80044de:	2b04      	cmp	r3, #4
 80044e0:	bf28      	it	cs
 80044e2:	2304      	movcs	r3, #4
 80044e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3304      	adds	r3, #4
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d902      	bls.n	80044f4 <NVIC_EncodePriority+0x30>
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3b03      	subs	r3, #3
 80044f2:	e000      	b.n	80044f6 <NVIC_EncodePriority+0x32>
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f8:	f04f 32ff 	mov.w	r2, #4294967295
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43da      	mvns	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	401a      	ands	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800450c:	f04f 31ff 	mov.w	r1, #4294967295
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	fa01 f303 	lsl.w	r3, r1, r3
 8004516:	43d9      	mvns	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800451c:	4313      	orrs	r3, r2
         );
}
 800451e:	4618      	mov	r0, r3
 8004520:	3724      	adds	r7, #36	; 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3b01      	subs	r3, #1
 8004534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004538:	d301      	bcc.n	800453e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800453a:	2301      	movs	r3, #1
 800453c:	e00f      	b.n	800455e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800453e:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <SysTick_Config+0x40>)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3b01      	subs	r3, #1
 8004544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004546:	210f      	movs	r1, #15
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	f7ff ff90 	bl	8004470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <SysTick_Config+0x40>)
 8004552:	2200      	movs	r2, #0
 8004554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004556:	4b04      	ldr	r3, [pc, #16]	; (8004568 <SysTick_Config+0x40>)
 8004558:	2207      	movs	r2, #7
 800455a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	e000e010 	.word	0xe000e010

0800456c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff ff2d 	bl	80043d4 <__NVIC_SetPriorityGrouping>
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004582:	b580      	push	{r7, lr}
 8004584:	b086      	sub	sp, #24
 8004586:	af00      	add	r7, sp, #0
 8004588:	4603      	mov	r3, r0
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004594:	f7ff ff42 	bl	800441c <__NVIC_GetPriorityGrouping>
 8004598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	6978      	ldr	r0, [r7, #20]
 80045a0:	f7ff ff90 	bl	80044c4 <NVIC_EncodePriority>
 80045a4:	4602      	mov	r2, r0
 80045a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff ff5f 	bl	8004470 <__NVIC_SetPriority>
}
 80045b2:	bf00      	nop
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	4603      	mov	r3, r0
 80045c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff ff35 	bl	8004438 <__NVIC_EnableIRQ>
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff ffa2 	bl	8004528 <SysTick_Config>
 80045e4:	4603      	mov	r3, r0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e043      	b.n	800468e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	4b22      	ldr	r3, [pc, #136]	; (8004698 <HAL_DMA_Init+0xa8>)
 800460e:	4413      	add	r3, r2
 8004610:	4a22      	ldr	r2, [pc, #136]	; (800469c <HAL_DMA_Init+0xac>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	009a      	lsls	r2, r3, #2
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a1f      	ldr	r2, [pc, #124]	; (80046a0 <HAL_DMA_Init+0xb0>)
 8004622:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800463a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800463e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr
 8004698:	bffdfff8 	.word	0xbffdfff8
 800469c:	cccccccd 	.word	0xcccccccd
 80046a0:	40020000 	.word	0x40020000

080046a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_DMA_Start_IT+0x20>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e04a      	b.n	800475a <HAL_DMA_Start_IT+0xb6>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d13a      	bne.n	800474c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2202      	movs	r2, #2
 80046da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f938 	bl	8004970 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 020e 	orr.w	r2, r2, #14
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e00f      	b.n	800473a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0204 	bic.w	r2, r2, #4
 8004728:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 020a 	orr.w	r2, r2, #10
 8004738:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e005      	b.n	8004758 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004754:	2302      	movs	r3, #2
 8004756:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004758:	7dfb      	ldrb	r3, [r7, #23]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	2204      	movs	r2, #4
 8004782:	409a      	lsls	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d04f      	beq.n	800482c <HAL_DMA_IRQHandler+0xc8>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d04a      	beq.n	800482c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d107      	bne.n	80047b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0204 	bic.w	r2, r2, #4
 80047b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a66      	ldr	r2, [pc, #408]	; (8004954 <HAL_DMA_IRQHandler+0x1f0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d029      	beq.n	8004812 <HAL_DMA_IRQHandler+0xae>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a65      	ldr	r2, [pc, #404]	; (8004958 <HAL_DMA_IRQHandler+0x1f4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_DMA_IRQHandler+0xaa>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a63      	ldr	r2, [pc, #396]	; (800495c <HAL_DMA_IRQHandler+0x1f8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01a      	beq.n	8004808 <HAL_DMA_IRQHandler+0xa4>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a62      	ldr	r2, [pc, #392]	; (8004960 <HAL_DMA_IRQHandler+0x1fc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d012      	beq.n	8004802 <HAL_DMA_IRQHandler+0x9e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a60      	ldr	r2, [pc, #384]	; (8004964 <HAL_DMA_IRQHandler+0x200>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00a      	beq.n	80047fc <HAL_DMA_IRQHandler+0x98>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a5f      	ldr	r2, [pc, #380]	; (8004968 <HAL_DMA_IRQHandler+0x204>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d102      	bne.n	80047f6 <HAL_DMA_IRQHandler+0x92>
 80047f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047f4:	e00e      	b.n	8004814 <HAL_DMA_IRQHandler+0xb0>
 80047f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80047fa:	e00b      	b.n	8004814 <HAL_DMA_IRQHandler+0xb0>
 80047fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004800:	e008      	b.n	8004814 <HAL_DMA_IRQHandler+0xb0>
 8004802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004806:	e005      	b.n	8004814 <HAL_DMA_IRQHandler+0xb0>
 8004808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800480c:	e002      	b.n	8004814 <HAL_DMA_IRQHandler+0xb0>
 800480e:	2340      	movs	r3, #64	; 0x40
 8004810:	e000      	b.n	8004814 <HAL_DMA_IRQHandler+0xb0>
 8004812:	2304      	movs	r3, #4
 8004814:	4a55      	ldr	r2, [pc, #340]	; (800496c <HAL_DMA_IRQHandler+0x208>)
 8004816:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8094 	beq.w	800494a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800482a:	e08e      	b.n	800494a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	2202      	movs	r2, #2
 8004832:	409a      	lsls	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d056      	beq.n	80048ea <HAL_DMA_IRQHandler+0x186>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d051      	beq.n	80048ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10b      	bne.n	800486c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 020a 	bic.w	r2, r2, #10
 8004862:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a38      	ldr	r2, [pc, #224]	; (8004954 <HAL_DMA_IRQHandler+0x1f0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d029      	beq.n	80048ca <HAL_DMA_IRQHandler+0x166>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a37      	ldr	r2, [pc, #220]	; (8004958 <HAL_DMA_IRQHandler+0x1f4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d022      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x162>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a35      	ldr	r2, [pc, #212]	; (800495c <HAL_DMA_IRQHandler+0x1f8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01a      	beq.n	80048c0 <HAL_DMA_IRQHandler+0x15c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a34      	ldr	r2, [pc, #208]	; (8004960 <HAL_DMA_IRQHandler+0x1fc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d012      	beq.n	80048ba <HAL_DMA_IRQHandler+0x156>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a32      	ldr	r2, [pc, #200]	; (8004964 <HAL_DMA_IRQHandler+0x200>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00a      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x150>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a31      	ldr	r2, [pc, #196]	; (8004968 <HAL_DMA_IRQHandler+0x204>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d102      	bne.n	80048ae <HAL_DMA_IRQHandler+0x14a>
 80048a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048ac:	e00e      	b.n	80048cc <HAL_DMA_IRQHandler+0x168>
 80048ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048b2:	e00b      	b.n	80048cc <HAL_DMA_IRQHandler+0x168>
 80048b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048b8:	e008      	b.n	80048cc <HAL_DMA_IRQHandler+0x168>
 80048ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048be:	e005      	b.n	80048cc <HAL_DMA_IRQHandler+0x168>
 80048c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048c4:	e002      	b.n	80048cc <HAL_DMA_IRQHandler+0x168>
 80048c6:	2320      	movs	r3, #32
 80048c8:	e000      	b.n	80048cc <HAL_DMA_IRQHandler+0x168>
 80048ca:	2302      	movs	r3, #2
 80048cc:	4a27      	ldr	r2, [pc, #156]	; (800496c <HAL_DMA_IRQHandler+0x208>)
 80048ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d034      	beq.n	800494a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80048e8:	e02f      	b.n	800494a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	2208      	movs	r2, #8
 80048f0:	409a      	lsls	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d028      	beq.n	800494c <HAL_DMA_IRQHandler+0x1e8>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d023      	beq.n	800494c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 020e 	bic.w	r2, r2, #14
 8004912:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491c:	2101      	movs	r1, #1
 800491e:	fa01 f202 	lsl.w	r2, r1, r2
 8004922:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	2b00      	cmp	r3, #0
 8004940:	d004      	beq.n	800494c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
    }
  }
  return;
 800494a:	bf00      	nop
 800494c:	bf00      	nop
}
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40020008 	.word	0x40020008
 8004958:	4002001c 	.word	0x4002001c
 800495c:	40020030 	.word	0x40020030
 8004960:	40020044 	.word	0x40020044
 8004964:	40020058 	.word	0x40020058
 8004968:	4002006c 	.word	0x4002006c
 800496c:	40020000 	.word	0x40020000

08004970 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004986:	2101      	movs	r1, #1
 8004988:	fa01 f202 	lsl.w	r2, r1, r2
 800498c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b10      	cmp	r3, #16
 800499c:	d108      	bne.n	80049b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049ae:	e007      	b.n	80049c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	60da      	str	r2, [r3, #12]
}
 80049c0:	bf00      	nop
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr
	...

080049cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b08b      	sub	sp, #44	; 0x2c
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049d6:	2300      	movs	r3, #0
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049da:	2300      	movs	r3, #0
 80049dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049de:	e127      	b.n	8004c30 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049e0:	2201      	movs	r2, #1
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	4013      	ands	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	f040 8116 	bne.w	8004c2a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b12      	cmp	r3, #18
 8004a04:	d034      	beq.n	8004a70 <HAL_GPIO_Init+0xa4>
 8004a06:	2b12      	cmp	r3, #18
 8004a08:	d80d      	bhi.n	8004a26 <HAL_GPIO_Init+0x5a>
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d02b      	beq.n	8004a66 <HAL_GPIO_Init+0x9a>
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d804      	bhi.n	8004a1c <HAL_GPIO_Init+0x50>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d031      	beq.n	8004a7a <HAL_GPIO_Init+0xae>
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d01c      	beq.n	8004a54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a1a:	e048      	b.n	8004aae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d043      	beq.n	8004aa8 <HAL_GPIO_Init+0xdc>
 8004a20:	2b11      	cmp	r3, #17
 8004a22:	d01b      	beq.n	8004a5c <HAL_GPIO_Init+0x90>
          break;
 8004a24:	e043      	b.n	8004aae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a26:	4a89      	ldr	r2, [pc, #548]	; (8004c4c <HAL_GPIO_Init+0x280>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d026      	beq.n	8004a7a <HAL_GPIO_Init+0xae>
 8004a2c:	4a87      	ldr	r2, [pc, #540]	; (8004c4c <HAL_GPIO_Init+0x280>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d806      	bhi.n	8004a40 <HAL_GPIO_Init+0x74>
 8004a32:	4a87      	ldr	r2, [pc, #540]	; (8004c50 <HAL_GPIO_Init+0x284>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d020      	beq.n	8004a7a <HAL_GPIO_Init+0xae>
 8004a38:	4a86      	ldr	r2, [pc, #536]	; (8004c54 <HAL_GPIO_Init+0x288>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01d      	beq.n	8004a7a <HAL_GPIO_Init+0xae>
          break;
 8004a3e:	e036      	b.n	8004aae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a40:	4a85      	ldr	r2, [pc, #532]	; (8004c58 <HAL_GPIO_Init+0x28c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d019      	beq.n	8004a7a <HAL_GPIO_Init+0xae>
 8004a46:	4a85      	ldr	r2, [pc, #532]	; (8004c5c <HAL_GPIO_Init+0x290>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d016      	beq.n	8004a7a <HAL_GPIO_Init+0xae>
 8004a4c:	4a84      	ldr	r2, [pc, #528]	; (8004c60 <HAL_GPIO_Init+0x294>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <HAL_GPIO_Init+0xae>
          break;
 8004a52:	e02c      	b.n	8004aae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	623b      	str	r3, [r7, #32]
          break;
 8004a5a:	e028      	b.n	8004aae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	3304      	adds	r3, #4
 8004a62:	623b      	str	r3, [r7, #32]
          break;
 8004a64:	e023      	b.n	8004aae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	623b      	str	r3, [r7, #32]
          break;
 8004a6e:	e01e      	b.n	8004aae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	330c      	adds	r3, #12
 8004a76:	623b      	str	r3, [r7, #32]
          break;
 8004a78:	e019      	b.n	8004aae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a82:	2304      	movs	r3, #4
 8004a84:	623b      	str	r3, [r7, #32]
          break;
 8004a86:	e012      	b.n	8004aae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d105      	bne.n	8004a9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a90:	2308      	movs	r3, #8
 8004a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	611a      	str	r2, [r3, #16]
          break;
 8004a9a:	e008      	b.n	8004aae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	615a      	str	r2, [r3, #20]
          break;
 8004aa6:	e002      	b.n	8004aae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	623b      	str	r3, [r7, #32]
          break;
 8004aac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2bff      	cmp	r3, #255	; 0xff
 8004ab2:	d801      	bhi.n	8004ab8 <HAL_GPIO_Init+0xec>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	e001      	b.n	8004abc <HAL_GPIO_Init+0xf0>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2bff      	cmp	r3, #255	; 0xff
 8004ac2:	d802      	bhi.n	8004aca <HAL_GPIO_Init+0xfe>
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	e002      	b.n	8004ad0 <HAL_GPIO_Init+0x104>
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	3b08      	subs	r3, #8
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	210f      	movs	r1, #15
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	fa01 f303 	lsl.w	r3, r1, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	401a      	ands	r2, r3
 8004ae2:	6a39      	ldr	r1, [r7, #32]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aea:	431a      	orrs	r2, r3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8096 	beq.w	8004c2a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004afe:	4b59      	ldr	r3, [pc, #356]	; (8004c64 <HAL_GPIO_Init+0x298>)
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	4a58      	ldr	r2, [pc, #352]	; (8004c64 <HAL_GPIO_Init+0x298>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	6193      	str	r3, [r2, #24]
 8004b0a:	4b56      	ldr	r3, [pc, #344]	; (8004c64 <HAL_GPIO_Init+0x298>)
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b16:	4a54      	ldr	r2, [pc, #336]	; (8004c68 <HAL_GPIO_Init+0x29c>)
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	089b      	lsrs	r3, r3, #2
 8004b1c:	3302      	adds	r3, #2
 8004b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b22:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	220f      	movs	r2, #15
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4013      	ands	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a4b      	ldr	r2, [pc, #300]	; (8004c6c <HAL_GPIO_Init+0x2a0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d013      	beq.n	8004b6a <HAL_GPIO_Init+0x19e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a4a      	ldr	r2, [pc, #296]	; (8004c70 <HAL_GPIO_Init+0x2a4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00d      	beq.n	8004b66 <HAL_GPIO_Init+0x19a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a49      	ldr	r2, [pc, #292]	; (8004c74 <HAL_GPIO_Init+0x2a8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d007      	beq.n	8004b62 <HAL_GPIO_Init+0x196>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a48      	ldr	r2, [pc, #288]	; (8004c78 <HAL_GPIO_Init+0x2ac>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d101      	bne.n	8004b5e <HAL_GPIO_Init+0x192>
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e006      	b.n	8004b6c <HAL_GPIO_Init+0x1a0>
 8004b5e:	2304      	movs	r3, #4
 8004b60:	e004      	b.n	8004b6c <HAL_GPIO_Init+0x1a0>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e002      	b.n	8004b6c <HAL_GPIO_Init+0x1a0>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_GPIO_Init+0x1a0>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6e:	f002 0203 	and.w	r2, r2, #3
 8004b72:	0092      	lsls	r2, r2, #2
 8004b74:	4093      	lsls	r3, r2
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b7c:	493a      	ldr	r1, [pc, #232]	; (8004c68 <HAL_GPIO_Init+0x29c>)
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	3302      	adds	r3, #2
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d006      	beq.n	8004ba4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b96:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4938      	ldr	r1, [pc, #224]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]
 8004ba2:	e006      	b.n	8004bb2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ba4:	4b35      	ldr	r3, [pc, #212]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	43db      	mvns	r3, r3
 8004bac:	4933      	ldr	r1, [pc, #204]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d006      	beq.n	8004bcc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004bbe:	4b2f      	ldr	r3, [pc, #188]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	492e      	ldr	r1, [pc, #184]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	604b      	str	r3, [r1, #4]
 8004bca:	e006      	b.n	8004bda <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bcc:	4b2b      	ldr	r3, [pc, #172]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	4929      	ldr	r1, [pc, #164]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d006      	beq.n	8004bf4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004be6:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	4924      	ldr	r1, [pc, #144]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	608b      	str	r3, [r1, #8]
 8004bf2:	e006      	b.n	8004c02 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004bf4:	4b21      	ldr	r3, [pc, #132]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	491f      	ldr	r1, [pc, #124]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d006      	beq.n	8004c1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	491a      	ldr	r1, [pc, #104]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60cb      	str	r3, [r1, #12]
 8004c1a:	e006      	b.n	8004c2a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c1c:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	43db      	mvns	r3, r3
 8004c24:	4915      	ldr	r1, [pc, #84]	; (8004c7c <HAL_GPIO_Init+0x2b0>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f47f aed0 	bne.w	80049e0 <HAL_GPIO_Init+0x14>
  }
}
 8004c40:	bf00      	nop
 8004c42:	372c      	adds	r7, #44	; 0x2c
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc80      	pop	{r7}
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	10210000 	.word	0x10210000
 8004c50:	10110000 	.word	0x10110000
 8004c54:	10120000 	.word	0x10120000
 8004c58:	10310000 	.word	0x10310000
 8004c5c:	10320000 	.word	0x10320000
 8004c60:	10220000 	.word	0x10220000
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40010800 	.word	0x40010800
 8004c70:	40010c00 	.word	0x40010c00
 8004c74:	40011000 	.word	0x40011000
 8004c78:	40011400 	.word	0x40011400
 8004c7c:	40010400 	.word	0x40010400

08004c80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	887b      	ldrh	r3, [r7, #2]
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
 8004c9c:	e001      	b.n	8004ca2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr

08004cae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	807b      	strh	r3, [r7, #2]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cbe:	787b      	ldrb	r3, [r7, #1]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cc4:	887a      	ldrh	r2, [r7, #2]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cca:	e003      	b.n	8004cd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ccc:	887b      	ldrh	r3, [r7, #2]
 8004cce:	041a      	lsls	r2, r3, #16
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	611a      	str	r2, [r3, #16]
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e11f      	b.n	8004f32 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fd ff06 	bl	8002b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2224      	movs	r2, #36	; 0x24
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0201 	bic.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d44:	f000 fff0 	bl	8005d28 <HAL_RCC_GetPCLK1Freq>
 8004d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	4a7b      	ldr	r2, [pc, #492]	; (8004f3c <HAL_I2C_Init+0x25c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d807      	bhi.n	8004d64 <HAL_I2C_Init+0x84>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a7a      	ldr	r2, [pc, #488]	; (8004f40 <HAL_I2C_Init+0x260>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	bf94      	ite	ls
 8004d5c:	2301      	movls	r3, #1
 8004d5e:	2300      	movhi	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	e006      	b.n	8004d72 <HAL_I2C_Init+0x92>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4a77      	ldr	r2, [pc, #476]	; (8004f44 <HAL_I2C_Init+0x264>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	bf94      	ite	ls
 8004d6c:	2301      	movls	r3, #1
 8004d6e:	2300      	movhi	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e0db      	b.n	8004f32 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4a72      	ldr	r2, [pc, #456]	; (8004f48 <HAL_I2C_Init+0x268>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	0c9b      	lsrs	r3, r3, #18
 8004d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4a64      	ldr	r2, [pc, #400]	; (8004f3c <HAL_I2C_Init+0x25c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d802      	bhi.n	8004db4 <HAL_I2C_Init+0xd4>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	3301      	adds	r3, #1
 8004db2:	e009      	b.n	8004dc8 <HAL_I2C_Init+0xe8>
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dba:	fb02 f303 	mul.w	r3, r2, r3
 8004dbe:	4a63      	ldr	r2, [pc, #396]	; (8004f4c <HAL_I2C_Init+0x26c>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	099b      	lsrs	r3, r3, #6
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4956      	ldr	r1, [pc, #344]	; (8004f3c <HAL_I2C_Init+0x25c>)
 8004de4:	428b      	cmp	r3, r1
 8004de6:	d80d      	bhi.n	8004e04 <HAL_I2C_Init+0x124>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	1e59      	subs	r1, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004df6:	3301      	adds	r3, #1
 8004df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	bf38      	it	cc
 8004e00:	2304      	movcc	r3, #4
 8004e02:	e04f      	b.n	8004ea4 <HAL_I2C_Init+0x1c4>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d111      	bne.n	8004e30 <HAL_I2C_Init+0x150>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	1e58      	subs	r0, r3, #1
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6859      	ldr	r1, [r3, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	440b      	add	r3, r1
 8004e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e1e:	3301      	adds	r3, #1
 8004e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	e012      	b.n	8004e56 <HAL_I2C_Init+0x176>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	1e58      	subs	r0, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6859      	ldr	r1, [r3, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	0099      	lsls	r1, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e46:	3301      	adds	r3, #1
 8004e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf0c      	ite	eq
 8004e50:	2301      	moveq	r3, #1
 8004e52:	2300      	movne	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_I2C_Init+0x17e>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e022      	b.n	8004ea4 <HAL_I2C_Init+0x1c4>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10e      	bne.n	8004e84 <HAL_I2C_Init+0x1a4>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1e58      	subs	r0, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6859      	ldr	r1, [r3, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	440b      	add	r3, r1
 8004e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e78:	3301      	adds	r3, #1
 8004e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e82:	e00f      	b.n	8004ea4 <HAL_I2C_Init+0x1c4>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1e58      	subs	r0, r3, #1
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	0099      	lsls	r1, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	6809      	ldr	r1, [r1, #0]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69da      	ldr	r2, [r3, #28]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6911      	ldr	r1, [r2, #16]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68d2      	ldr	r2, [r2, #12]
 8004ede:	4311      	orrs	r1, r2
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	000186a0 	.word	0x000186a0
 8004f40:	001e847f 	.word	0x001e847f
 8004f44:	003d08ff 	.word	0x003d08ff
 8004f48:	431bde83 	.word	0x431bde83
 8004f4c:	10624dd3 	.word	0x10624dd3

08004f50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	4608      	mov	r0, r1
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4603      	mov	r3, r0
 8004f60:	817b      	strh	r3, [r7, #10]
 8004f62:	460b      	mov	r3, r1
 8004f64:	813b      	strh	r3, [r7, #8]
 8004f66:	4613      	mov	r3, r2
 8004f68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f6a:	f7fd ff3b 	bl	8002de4 <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	f040 80d9 	bne.w	8005130 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	2319      	movs	r3, #25
 8004f84:	2201      	movs	r2, #1
 8004f86:	496d      	ldr	r1, [pc, #436]	; (800513c <HAL_I2C_Mem_Write+0x1ec>)
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f971 	bl	8005270 <I2C_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f94:	2302      	movs	r3, #2
 8004f96:	e0cc      	b.n	8005132 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_I2C_Mem_Write+0x56>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e0c5      	b.n	8005132 <HAL_I2C_Mem_Write+0x1e2>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d007      	beq.n	8004fcc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0201 	orr.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2221      	movs	r2, #33	; 0x21
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2240      	movs	r2, #64	; 0x40
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a3a      	ldr	r2, [r7, #32]
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4a4d      	ldr	r2, [pc, #308]	; (8005140 <HAL_I2C_Mem_Write+0x1f0>)
 800500c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800500e:	88f8      	ldrh	r0, [r7, #6]
 8005010:	893a      	ldrh	r2, [r7, #8]
 8005012:	8979      	ldrh	r1, [r7, #10]
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	4603      	mov	r3, r0
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f890 	bl	8005144 <I2C_RequestMemoryWrite>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d052      	beq.n	80050d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e081      	b.n	8005132 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f9f2 	bl	800541c <I2C_WaitOnTXEFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00d      	beq.n	800505a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	2b04      	cmp	r3, #4
 8005044:	d107      	bne.n	8005056 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005054:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e06b      	b.n	8005132 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	781a      	ldrb	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d11b      	bne.n	80050d0 <HAL_I2C_Mem_Write+0x180>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509c:	2b00      	cmp	r3, #0
 800509e:	d017      	beq.n	80050d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	781a      	ldrb	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1aa      	bne.n	800502e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f9de 	bl	800549e <I2C_WaitOnBTFFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00d      	beq.n	8005104 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d107      	bne.n	8005100 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e016      	b.n	8005132 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	e000      	b.n	8005132 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005130:	2302      	movs	r3, #2
  }
}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	00100002 	.word	0x00100002
 8005140:	ffff0000 	.word	0xffff0000

08005144 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	4608      	mov	r0, r1
 800514e:	4611      	mov	r1, r2
 8005150:	461a      	mov	r2, r3
 8005152:	4603      	mov	r3, r0
 8005154:	817b      	strh	r3, [r7, #10]
 8005156:	460b      	mov	r3, r1
 8005158:	813b      	strh	r3, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	2200      	movs	r2, #0
 8005176:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 f878 	bl	8005270 <I2C_WaitOnFlagUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00d      	beq.n	80051a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005194:	d103      	bne.n	800519e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800519c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e05f      	b.n	8005262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051a2:	897b      	ldrh	r3, [r7, #10]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	6a3a      	ldr	r2, [r7, #32]
 80051b6:	492d      	ldr	r1, [pc, #180]	; (800526c <I2C_RequestMemoryWrite+0x128>)
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f8b0 	bl	800531e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e04c      	b.n	8005262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e0:	6a39      	ldr	r1, [r7, #32]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f91a 	bl	800541c <I2C_WaitOnTXEFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00d      	beq.n	800520a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d107      	bne.n	8005206 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e02b      	b.n	8005262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800520a:	88fb      	ldrh	r3, [r7, #6]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d105      	bne.n	800521c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005210:	893b      	ldrh	r3, [r7, #8]
 8005212:	b2da      	uxtb	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	611a      	str	r2, [r3, #16]
 800521a:	e021      	b.n	8005260 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800521c:	893b      	ldrh	r3, [r7, #8]
 800521e:	0a1b      	lsrs	r3, r3, #8
 8005220:	b29b      	uxth	r3, r3
 8005222:	b2da      	uxtb	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522c:	6a39      	ldr	r1, [r7, #32]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f8f4 	bl	800541c <I2C_WaitOnTXEFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00d      	beq.n	8005256 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	2b04      	cmp	r3, #4
 8005240:	d107      	bne.n	8005252 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005250:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e005      	b.n	8005262 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005256:	893b      	ldrh	r3, [r7, #8]
 8005258:	b2da      	uxtb	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	00010002 	.word	0x00010002

08005270 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005280:	e025      	b.n	80052ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d021      	beq.n	80052ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528a:	f7fd fdab 	bl	8002de4 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d302      	bcc.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d116      	bne.n	80052ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e023      	b.n	8005316 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	0c1b      	lsrs	r3, r3, #16
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d10d      	bne.n	80052f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	43da      	mvns	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4013      	ands	r3, r2
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bf0c      	ite	eq
 80052ea:	2301      	moveq	r3, #1
 80052ec:	2300      	movne	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	461a      	mov	r2, r3
 80052f2:	e00c      	b.n	800530e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	43da      	mvns	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4013      	ands	r3, r2
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	bf0c      	ite	eq
 8005306:	2301      	moveq	r3, #1
 8005308:	2300      	movne	r3, #0
 800530a:	b2db      	uxtb	r3, r3
 800530c:	461a      	mov	r2, r3
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	429a      	cmp	r2, r3
 8005312:	d0b6      	beq.n	8005282 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	607a      	str	r2, [r7, #4]
 800532a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800532c:	e051      	b.n	80053d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533c:	d123      	bne.n	8005386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005356:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f043 0204 	orr.w	r2, r3, #4
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e046      	b.n	8005414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d021      	beq.n	80053d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538e:	f7fd fd29 	bl	8002de4 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	d302      	bcc.n	80053a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d116      	bne.n	80053d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f043 0220 	orr.w	r2, r3, #32
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e020      	b.n	8005414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	0c1b      	lsrs	r3, r3, #16
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d10c      	bne.n	80053f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	43da      	mvns	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4013      	ands	r3, r2
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	bf14      	ite	ne
 80053ee:	2301      	movne	r3, #1
 80053f0:	2300      	moveq	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	e00b      	b.n	800540e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	43da      	mvns	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4013      	ands	r3, r2
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d18d      	bne.n	800532e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005428:	e02d      	b.n	8005486 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f878 	bl	8005520 <I2C_IsAcknowledgeFailed>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e02d      	b.n	8005496 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d021      	beq.n	8005486 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005442:	f7fd fccf 	bl	8002de4 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	429a      	cmp	r2, r3
 8005450:	d302      	bcc.n	8005458 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d116      	bne.n	8005486 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f043 0220 	orr.w	r2, r3, #32
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e007      	b.n	8005496 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005490:	2b80      	cmp	r3, #128	; 0x80
 8005492:	d1ca      	bne.n	800542a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054aa:	e02d      	b.n	8005508 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f837 	bl	8005520 <I2C_IsAcknowledgeFailed>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e02d      	b.n	8005518 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c2:	d021      	beq.n	8005508 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c4:	f7fd fc8e 	bl	8002de4 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d302      	bcc.n	80054da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d116      	bne.n	8005508 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	f043 0220 	orr.w	r2, r3, #32
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e007      	b.n	8005518 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b04      	cmp	r3, #4
 8005514:	d1ca      	bne.n	80054ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005536:	d11b      	bne.n	8005570 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005540:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	f043 0204 	orr.w	r2, r3, #4
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e26c      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 8087 	beq.w	80056aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800559c:	4b92      	ldr	r3, [pc, #584]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 030c 	and.w	r3, r3, #12
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d00c      	beq.n	80055c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055a8:	4b8f      	ldr	r3, [pc, #572]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 030c 	and.w	r3, r3, #12
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d112      	bne.n	80055da <HAL_RCC_OscConfig+0x5e>
 80055b4:	4b8c      	ldr	r3, [pc, #560]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c0:	d10b      	bne.n	80055da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c2:	4b89      	ldr	r3, [pc, #548]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d06c      	beq.n	80056a8 <HAL_RCC_OscConfig+0x12c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d168      	bne.n	80056a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e246      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e2:	d106      	bne.n	80055f2 <HAL_RCC_OscConfig+0x76>
 80055e4:	4b80      	ldr	r3, [pc, #512]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a7f      	ldr	r2, [pc, #508]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 80055ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	e02e      	b.n	8005650 <HAL_RCC_OscConfig+0xd4>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10c      	bne.n	8005614 <HAL_RCC_OscConfig+0x98>
 80055fa:	4b7b      	ldr	r3, [pc, #492]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a7a      	ldr	r2, [pc, #488]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 8005600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4b78      	ldr	r3, [pc, #480]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a77      	ldr	r2, [pc, #476]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 800560c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e01d      	b.n	8005650 <HAL_RCC_OscConfig+0xd4>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800561c:	d10c      	bne.n	8005638 <HAL_RCC_OscConfig+0xbc>
 800561e:	4b72      	ldr	r3, [pc, #456]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a71      	ldr	r2, [pc, #452]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 8005624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	4b6f      	ldr	r3, [pc, #444]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a6e      	ldr	r2, [pc, #440]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 8005630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	e00b      	b.n	8005650 <HAL_RCC_OscConfig+0xd4>
 8005638:	4b6b      	ldr	r3, [pc, #428]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a6a      	ldr	r2, [pc, #424]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 800563e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	4b68      	ldr	r3, [pc, #416]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a67      	ldr	r2, [pc, #412]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 800564a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800564e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d013      	beq.n	8005680 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005658:	f7fd fbc4 	bl	8002de4 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005660:	f7fd fbc0 	bl	8002de4 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b64      	cmp	r3, #100	; 0x64
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e1fa      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005672:	4b5d      	ldr	r3, [pc, #372]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0f0      	beq.n	8005660 <HAL_RCC_OscConfig+0xe4>
 800567e:	e014      	b.n	80056aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005680:	f7fd fbb0 	bl	8002de4 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005688:	f7fd fbac 	bl	8002de4 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b64      	cmp	r3, #100	; 0x64
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e1e6      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800569a:	4b53      	ldr	r3, [pc, #332]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x10c>
 80056a6:	e000      	b.n	80056aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d063      	beq.n	800577e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056b6:	4b4c      	ldr	r3, [pc, #304]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f003 030c 	and.w	r3, r3, #12
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00b      	beq.n	80056da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80056c2:	4b49      	ldr	r3, [pc, #292]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f003 030c 	and.w	r3, r3, #12
 80056ca:	2b08      	cmp	r3, #8
 80056cc:	d11c      	bne.n	8005708 <HAL_RCC_OscConfig+0x18c>
 80056ce:	4b46      	ldr	r3, [pc, #280]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d116      	bne.n	8005708 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056da:	4b43      	ldr	r3, [pc, #268]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d005      	beq.n	80056f2 <HAL_RCC_OscConfig+0x176>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d001      	beq.n	80056f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e1ba      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f2:	4b3d      	ldr	r3, [pc, #244]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	4939      	ldr	r1, [pc, #228]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 8005702:	4313      	orrs	r3, r2
 8005704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005706:	e03a      	b.n	800577e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d020      	beq.n	8005752 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005710:	4b36      	ldr	r3, [pc, #216]	; (80057ec <HAL_RCC_OscConfig+0x270>)
 8005712:	2201      	movs	r2, #1
 8005714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005716:	f7fd fb65 	bl	8002de4 <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800571c:	e008      	b.n	8005730 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800571e:	f7fd fb61 	bl	8002de4 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e19b      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005730:	4b2d      	ldr	r3, [pc, #180]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0f0      	beq.n	800571e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800573c:	4b2a      	ldr	r3, [pc, #168]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	4927      	ldr	r1, [pc, #156]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 800574c:	4313      	orrs	r3, r2
 800574e:	600b      	str	r3, [r1, #0]
 8005750:	e015      	b.n	800577e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005752:	4b26      	ldr	r3, [pc, #152]	; (80057ec <HAL_RCC_OscConfig+0x270>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005758:	f7fd fb44 	bl	8002de4 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005760:	f7fd fb40 	bl	8002de4 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e17a      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005772:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f0      	bne.n	8005760 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d03a      	beq.n	8005800 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d019      	beq.n	80057c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005792:	4b17      	ldr	r3, [pc, #92]	; (80057f0 <HAL_RCC_OscConfig+0x274>)
 8005794:	2201      	movs	r2, #1
 8005796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005798:	f7fd fb24 	bl	8002de4 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a0:	f7fd fb20 	bl	8002de4 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e15a      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057b2:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <HAL_RCC_OscConfig+0x26c>)
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80057be:	2001      	movs	r0, #1
 80057c0:	f000 fac6 	bl	8005d50 <RCC_Delay>
 80057c4:	e01c      	b.n	8005800 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057c6:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <HAL_RCC_OscConfig+0x274>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057cc:	f7fd fb0a 	bl	8002de4 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057d2:	e00f      	b.n	80057f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057d4:	f7fd fb06 	bl	8002de4 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d908      	bls.n	80057f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e140      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
 80057e6:	bf00      	nop
 80057e8:	40021000 	.word	0x40021000
 80057ec:	42420000 	.word	0x42420000
 80057f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f4:	4b9e      	ldr	r3, [pc, #632]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e9      	bne.n	80057d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 80a6 	beq.w	800595a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800580e:	2300      	movs	r3, #0
 8005810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005812:	4b97      	ldr	r3, [pc, #604]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10d      	bne.n	800583a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800581e:	4b94      	ldr	r3, [pc, #592]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	4a93      	ldr	r2, [pc, #588]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 8005824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005828:	61d3      	str	r3, [r2, #28]
 800582a:	4b91      	ldr	r3, [pc, #580]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005832:	60bb      	str	r3, [r7, #8]
 8005834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005836:	2301      	movs	r3, #1
 8005838:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583a:	4b8e      	ldr	r3, [pc, #568]	; (8005a74 <HAL_RCC_OscConfig+0x4f8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005842:	2b00      	cmp	r3, #0
 8005844:	d118      	bne.n	8005878 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005846:	4b8b      	ldr	r3, [pc, #556]	; (8005a74 <HAL_RCC_OscConfig+0x4f8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a8a      	ldr	r2, [pc, #552]	; (8005a74 <HAL_RCC_OscConfig+0x4f8>)
 800584c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005852:	f7fd fac7 	bl	8002de4 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800585a:	f7fd fac3 	bl	8002de4 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b64      	cmp	r3, #100	; 0x64
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e0fd      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800586c:	4b81      	ldr	r3, [pc, #516]	; (8005a74 <HAL_RCC_OscConfig+0x4f8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d106      	bne.n	800588e <HAL_RCC_OscConfig+0x312>
 8005880:	4b7b      	ldr	r3, [pc, #492]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	4a7a      	ldr	r2, [pc, #488]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 8005886:	f043 0301 	orr.w	r3, r3, #1
 800588a:	6213      	str	r3, [r2, #32]
 800588c:	e02d      	b.n	80058ea <HAL_RCC_OscConfig+0x36e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10c      	bne.n	80058b0 <HAL_RCC_OscConfig+0x334>
 8005896:	4b76      	ldr	r3, [pc, #472]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	4a75      	ldr	r2, [pc, #468]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 800589c:	f023 0301 	bic.w	r3, r3, #1
 80058a0:	6213      	str	r3, [r2, #32]
 80058a2:	4b73      	ldr	r3, [pc, #460]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	4a72      	ldr	r2, [pc, #456]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80058a8:	f023 0304 	bic.w	r3, r3, #4
 80058ac:	6213      	str	r3, [r2, #32]
 80058ae:	e01c      	b.n	80058ea <HAL_RCC_OscConfig+0x36e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2b05      	cmp	r3, #5
 80058b6:	d10c      	bne.n	80058d2 <HAL_RCC_OscConfig+0x356>
 80058b8:	4b6d      	ldr	r3, [pc, #436]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	4a6c      	ldr	r2, [pc, #432]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80058be:	f043 0304 	orr.w	r3, r3, #4
 80058c2:	6213      	str	r3, [r2, #32]
 80058c4:	4b6a      	ldr	r3, [pc, #424]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	4a69      	ldr	r2, [pc, #420]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	6213      	str	r3, [r2, #32]
 80058d0:	e00b      	b.n	80058ea <HAL_RCC_OscConfig+0x36e>
 80058d2:	4b67      	ldr	r3, [pc, #412]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	4a66      	ldr	r2, [pc, #408]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80058d8:	f023 0301 	bic.w	r3, r3, #1
 80058dc:	6213      	str	r3, [r2, #32]
 80058de:	4b64      	ldr	r3, [pc, #400]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	4a63      	ldr	r2, [pc, #396]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80058e4:	f023 0304 	bic.w	r3, r3, #4
 80058e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d015      	beq.n	800591e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f2:	f7fd fa77 	bl	8002de4 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fa:	f7fd fa73 	bl	8002de4 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f241 3288 	movw	r2, #5000	; 0x1388
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e0ab      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005910:	4b57      	ldr	r3, [pc, #348]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0ee      	beq.n	80058fa <HAL_RCC_OscConfig+0x37e>
 800591c:	e014      	b.n	8005948 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800591e:	f7fd fa61 	bl	8002de4 <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005924:	e00a      	b.n	800593c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005926:	f7fd fa5d 	bl	8002de4 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	f241 3288 	movw	r2, #5000	; 0x1388
 8005934:	4293      	cmp	r3, r2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e095      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800593c:	4b4c      	ldr	r3, [pc, #304]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1ee      	bne.n	8005926 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d105      	bne.n	800595a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800594e:	4b48      	ldr	r3, [pc, #288]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	4a47      	ldr	r2, [pc, #284]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 8005954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005958:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 8081 	beq.w	8005a66 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005964:	4b42      	ldr	r3, [pc, #264]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 030c 	and.w	r3, r3, #12
 800596c:	2b08      	cmp	r3, #8
 800596e:	d061      	beq.n	8005a34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d146      	bne.n	8005a06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005978:	4b3f      	ldr	r3, [pc, #252]	; (8005a78 <HAL_RCC_OscConfig+0x4fc>)
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597e:	f7fd fa31 	bl	8002de4 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005986:	f7fd fa2d 	bl	8002de4 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e067      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005998:	4b35      	ldr	r3, [pc, #212]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1f0      	bne.n	8005986 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ac:	d108      	bne.n	80059c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80059ae:	4b30      	ldr	r3, [pc, #192]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	492d      	ldr	r1, [pc, #180]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059c0:	4b2b      	ldr	r3, [pc, #172]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a19      	ldr	r1, [r3, #32]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	430b      	orrs	r3, r1
 80059d2:	4927      	ldr	r1, [pc, #156]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059d8:	4b27      	ldr	r3, [pc, #156]	; (8005a78 <HAL_RCC_OscConfig+0x4fc>)
 80059da:	2201      	movs	r2, #1
 80059dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059de:	f7fd fa01 	bl	8002de4 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e6:	f7fd f9fd 	bl	8002de4 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e037      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059f8:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0f0      	beq.n	80059e6 <HAL_RCC_OscConfig+0x46a>
 8005a04:	e02f      	b.n	8005a66 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a06:	4b1c      	ldr	r3, [pc, #112]	; (8005a78 <HAL_RCC_OscConfig+0x4fc>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0c:	f7fd f9ea 	bl	8002de4 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a14:	f7fd f9e6 	bl	8002de4 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e020      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a26:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x498>
 8005a32:	e018      	b.n	8005a66 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e013      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <HAL_RCC_OscConfig+0x4f4>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d106      	bne.n	8005a62 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d001      	beq.n	8005a66 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40007000 	.word	0x40007000
 8005a78:	42420060 	.word	0x42420060

08005a7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0d0      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a90:	4b6a      	ldr	r3, [pc, #424]	; (8005c3c <HAL_RCC_ClockConfig+0x1c0>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d910      	bls.n	8005ac0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9e:	4b67      	ldr	r3, [pc, #412]	; (8005c3c <HAL_RCC_ClockConfig+0x1c0>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f023 0207 	bic.w	r2, r3, #7
 8005aa6:	4965      	ldr	r1, [pc, #404]	; (8005c3c <HAL_RCC_ClockConfig+0x1c0>)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aae:	4b63      	ldr	r3, [pc, #396]	; (8005c3c <HAL_RCC_ClockConfig+0x1c0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d001      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e0b8      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d020      	beq.n	8005b0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d005      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ad8:	4b59      	ldr	r3, [pc, #356]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	4a58      	ldr	r2, [pc, #352]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005ade:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ae2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005af0:	4b53      	ldr	r3, [pc, #332]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	4a52      	ldr	r2, [pc, #328]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005af6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005afa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005afc:	4b50      	ldr	r3, [pc, #320]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	494d      	ldr	r1, [pc, #308]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d040      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d107      	bne.n	8005b32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b22:	4b47      	ldr	r3, [pc, #284]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d115      	bne.n	8005b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e07f      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d107      	bne.n	8005b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b3a:	4b41      	ldr	r3, [pc, #260]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e073      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b4a:	4b3d      	ldr	r3, [pc, #244]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e06b      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b5a:	4b39      	ldr	r3, [pc, #228]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f023 0203 	bic.w	r2, r3, #3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	4936      	ldr	r1, [pc, #216]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b6c:	f7fd f93a 	bl	8002de4 <HAL_GetTick>
 8005b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b72:	e00a      	b.n	8005b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b74:	f7fd f936 	bl	8002de4 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e053      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8a:	4b2d      	ldr	r3, [pc, #180]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 020c 	and.w	r2, r3, #12
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d1eb      	bne.n	8005b74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b9c:	4b27      	ldr	r3, [pc, #156]	; (8005c3c <HAL_RCC_ClockConfig+0x1c0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d210      	bcs.n	8005bcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005baa:	4b24      	ldr	r3, [pc, #144]	; (8005c3c <HAL_RCC_ClockConfig+0x1c0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f023 0207 	bic.w	r2, r3, #7
 8005bb2:	4922      	ldr	r1, [pc, #136]	; (8005c3c <HAL_RCC_ClockConfig+0x1c0>)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bba:	4b20      	ldr	r3, [pc, #128]	; (8005c3c <HAL_RCC_ClockConfig+0x1c0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d001      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e032      	b.n	8005c32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bd8:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	4916      	ldr	r1, [pc, #88]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bf6:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	490e      	ldr	r1, [pc, #56]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c0a:	f000 f821 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 8005c0e:	4601      	mov	r1, r0
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	091b      	lsrs	r3, r3, #4
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	4a0a      	ldr	r2, [pc, #40]	; (8005c44 <HAL_RCC_ClockConfig+0x1c8>)
 8005c1c:	5cd3      	ldrb	r3, [r2, r3]
 8005c1e:	fa21 f303 	lsr.w	r3, r1, r3
 8005c22:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <HAL_RCC_ClockConfig+0x1cc>)
 8005c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c26:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <HAL_RCC_ClockConfig+0x1d0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fd f898 	bl	8002d60 <HAL_InitTick>

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40022000 	.word	0x40022000
 8005c40:	40021000 	.word	0x40021000
 8005c44:	0800c0d4 	.word	0x0800c0d4
 8005c48:	20000014 	.word	0x20000014
 8005c4c:	20000018 	.word	0x20000018

08005c50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c50:	b490      	push	{r4, r7}
 8005c52:	b08a      	sub	sp, #40	; 0x28
 8005c54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005c56:	4b2a      	ldr	r3, [pc, #168]	; (8005d00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c58:	1d3c      	adds	r4, r7, #4
 8005c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005c60:	4b28      	ldr	r3, [pc, #160]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c7a:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d002      	beq.n	8005c90 <HAL_RCC_GetSysClockFreq+0x40>
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d003      	beq.n	8005c96 <HAL_RCC_GetSysClockFreq+0x46>
 8005c8e:	e02d      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c90:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c92:	623b      	str	r3, [r7, #32]
      break;
 8005c94:	e02d      	b.n	8005cf2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	0c9b      	lsrs	r3, r3, #18
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005ca8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d013      	beq.n	8005cdc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005cb4:	4b14      	ldr	r3, [pc, #80]	; (8005d08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	0c5b      	lsrs	r3, r3, #17
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005cc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4a0f      	ldr	r2, [pc, #60]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cce:	fb02 f203 	mul.w	r2, r2, r3
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cda:	e004      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	4a0c      	ldr	r2, [pc, #48]	; (8005d10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ce0:	fb02 f303 	mul.w	r3, r2, r3
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	623b      	str	r3, [r7, #32]
      break;
 8005cea:	e002      	b.n	8005cf2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005cec:	4b07      	ldr	r3, [pc, #28]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cee:	623b      	str	r3, [r7, #32]
      break;
 8005cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3728      	adds	r7, #40	; 0x28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc90      	pop	{r4, r7}
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	0800a35c 	.word	0x0800a35c
 8005d04:	0800a36c 	.word	0x0800a36c
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	007a1200 	.word	0x007a1200
 8005d10:	003d0900 	.word	0x003d0900

08005d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d18:	4b02      	ldr	r3, [pc, #8]	; (8005d24 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr
 8005d24:	20000014 	.word	0x20000014

08005d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d2c:	f7ff fff2 	bl	8005d14 <HAL_RCC_GetHCLKFreq>
 8005d30:	4601      	mov	r1, r0
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	0a1b      	lsrs	r3, r3, #8
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	4a03      	ldr	r2, [pc, #12]	; (8005d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d3e:	5cd3      	ldrb	r3, [r2, r3]
 8005d40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	0800c0e4 	.word	0x0800c0e4

08005d50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <RCC_Delay+0x34>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a0a      	ldr	r2, [pc, #40]	; (8005d88 <RCC_Delay+0x38>)
 8005d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d62:	0a5b      	lsrs	r3, r3, #9
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	fb02 f303 	mul.w	r3, r2, r3
 8005d6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d6c:	bf00      	nop
  }
  while (Delay --);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1e5a      	subs	r2, r3, #1
 8005d72:	60fa      	str	r2, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f9      	bne.n	8005d6c <RCC_Delay+0x1c>
}
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20000014 	.word	0x20000014
 8005d88:	10624dd3 	.word	0x10624dd3

08005d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d07d      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005da8:	2300      	movs	r3, #0
 8005daa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dac:	4b4f      	ldr	r3, [pc, #316]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10d      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005db8:	4b4c      	ldr	r3, [pc, #304]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	4a4b      	ldr	r2, [pc, #300]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc2:	61d3      	str	r3, [r2, #28]
 8005dc4:	4b49      	ldr	r3, [pc, #292]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dcc:	60bb      	str	r3, [r7, #8]
 8005dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd4:	4b46      	ldr	r3, [pc, #280]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d118      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005de0:	4b43      	ldr	r3, [pc, #268]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a42      	ldr	r2, [pc, #264]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dec:	f7fc fffa 	bl	8002de4 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df2:	e008      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df4:	f7fc fff6 	bl	8002de4 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b64      	cmp	r3, #100	; 0x64
 8005e00:	d901      	bls.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e06d      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e06:	4b3a      	ldr	r3, [pc, #232]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0f0      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e12:	4b36      	ldr	r3, [pc, #216]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d02e      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d027      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e30:	4b2e      	ldr	r3, [pc, #184]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e3a:	4b2e      	ldr	r3, [pc, #184]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e40:	4b2c      	ldr	r3, [pc, #176]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e46:	4a29      	ldr	r2, [pc, #164]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d014      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e56:	f7fc ffc5 	bl	8002de4 <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e5c:	e00a      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5e:	f7fc ffc1 	bl	8002de4 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e036      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e74:	4b1d      	ldr	r3, [pc, #116]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0ee      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e80:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	4917      	ldr	r1, [pc, #92]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e92:	7dfb      	ldrb	r3, [r7, #23]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d105      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e98:	4b14      	ldr	r3, [pc, #80]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	4a13      	ldr	r2, [pc, #76]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005eb0:	4b0e      	ldr	r3, [pc, #56]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	490b      	ldr	r1, [pc, #44]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0310 	and.w	r3, r3, #16
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ece:	4b07      	ldr	r3, [pc, #28]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	4904      	ldr	r1, [pc, #16]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	40007000 	.word	0x40007000
 8005ef4:	42420440 	.word	0x42420440

08005ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e041      	b.n	8005f8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fc fe38 	bl	8002b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4619      	mov	r1, r3
 8005f36:	4610      	mov	r0, r2
 8005f38:	f000 fa10 	bl	800635c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d122      	bne.n	8005ff2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d11b      	bne.n	8005ff2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f06f 0202 	mvn.w	r2, #2
 8005fc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f003 0303 	and.w	r3, r3, #3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f9a4 	bl	8006326 <HAL_TIM_IC_CaptureCallback>
 8005fde:	e005      	b.n	8005fec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f997 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f9a6 	bl	8006338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d122      	bne.n	8006046 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f003 0304 	and.w	r3, r3, #4
 800600a:	2b04      	cmp	r3, #4
 800600c:	d11b      	bne.n	8006046 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f06f 0204 	mvn.w	r2, #4
 8006016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f97a 	bl	8006326 <HAL_TIM_IC_CaptureCallback>
 8006032:	e005      	b.n	8006040 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f96d 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f97c 	bl	8006338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b08      	cmp	r3, #8
 8006052:	d122      	bne.n	800609a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	2b08      	cmp	r3, #8
 8006060:	d11b      	bne.n	800609a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f06f 0208 	mvn.w	r2, #8
 800606a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2204      	movs	r2, #4
 8006070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f950 	bl	8006326 <HAL_TIM_IC_CaptureCallback>
 8006086:	e005      	b.n	8006094 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f943 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f952 	bl	8006338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	d122      	bne.n	80060ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	d11b      	bne.n	80060ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f06f 0210 	mvn.w	r2, #16
 80060be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2208      	movs	r2, #8
 80060c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f926 	bl	8006326 <HAL_TIM_IC_CaptureCallback>
 80060da:	e005      	b.n	80060e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f919 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f928 	bl	8006338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d10e      	bne.n	800611a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b01      	cmp	r3, #1
 8006108:	d107      	bne.n	800611a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f06f 0201 	mvn.w	r2, #1
 8006112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7fb f9cb 	bl	80014b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006124:	2b80      	cmp	r3, #128	; 0x80
 8006126:	d10e      	bne.n	8006146 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d107      	bne.n	8006146 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800613e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fa6a 	bl	800661a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006150:	2b40      	cmp	r3, #64	; 0x40
 8006152:	d10e      	bne.n	8006172 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	d107      	bne.n	8006172 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800616a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f8ec 	bl	800634a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b20      	cmp	r3, #32
 800617e:	d10e      	bne.n	800619e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b20      	cmp	r3, #32
 800618c:	d107      	bne.n	800619e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f06f 0220 	mvn.w	r2, #32
 8006196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fa35 	bl	8006608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_TIM_ConfigClockSource+0x18>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e0a6      	b.n	800630c <HAL_TIM_ConfigClockSource+0x166>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061e4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b40      	cmp	r3, #64	; 0x40
 80061f4:	d067      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0x120>
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	d80b      	bhi.n	8006212 <HAL_TIM_ConfigClockSource+0x6c>
 80061fa:	2b10      	cmp	r3, #16
 80061fc:	d073      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x140>
 80061fe:	2b10      	cmp	r3, #16
 8006200:	d802      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x62>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d06f      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006206:	e078      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006208:	2b20      	cmp	r3, #32
 800620a:	d06c      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x140>
 800620c:	2b30      	cmp	r3, #48	; 0x30
 800620e:	d06a      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006210:	e073      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006212:	2b70      	cmp	r3, #112	; 0x70
 8006214:	d00d      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0x8c>
 8006216:	2b70      	cmp	r3, #112	; 0x70
 8006218:	d804      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x7e>
 800621a:	2b50      	cmp	r3, #80	; 0x50
 800621c:	d033      	beq.n	8006286 <HAL_TIM_ConfigClockSource+0xe0>
 800621e:	2b60      	cmp	r3, #96	; 0x60
 8006220:	d041      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006222:	e06a      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006228:	d066      	beq.n	80062f8 <HAL_TIM_ConfigClockSource+0x152>
 800622a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800622e:	d017      	beq.n	8006260 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006230:	e063      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6899      	ldr	r1, [r3, #8]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f000 f964 	bl	800650e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006254:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	609a      	str	r2, [r3, #8]
      break;
 800625e:	e04c      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	6899      	ldr	r1, [r3, #8]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f000 f94d 	bl	800650e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006282:	609a      	str	r2, [r3, #8]
      break;
 8006284:	e039      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6859      	ldr	r1, [r3, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	461a      	mov	r2, r3
 8006294:	f000 f8c4 	bl	8006420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2150      	movs	r1, #80	; 0x50
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f91b 	bl	80064da <TIM_ITRx_SetConfig>
      break;
 80062a4:	e029      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6859      	ldr	r1, [r3, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	461a      	mov	r2, r3
 80062b4:	f000 f8e2 	bl	800647c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2160      	movs	r1, #96	; 0x60
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f90b 	bl	80064da <TIM_ITRx_SetConfig>
      break;
 80062c4:	e019      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	6859      	ldr	r1, [r3, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	461a      	mov	r2, r3
 80062d4:	f000 f8a4 	bl	8006420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2140      	movs	r1, #64	; 0x40
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 f8fb 	bl	80064da <TIM_ITRx_SetConfig>
      break;
 80062e4:	e009      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f000 f8f2 	bl	80064da <TIM_ITRx_SetConfig>
        break;
 80062f6:	e000      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x154>
      break;
 80062f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	bc80      	pop	{r7}
 8006324:	4770      	bx	lr

08006326 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr

08006338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	bc80      	pop	{r7}
 8006348:	4770      	bx	lr

0800634a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a29      	ldr	r2, [pc, #164]	; (8006414 <TIM_Base_SetConfig+0xb8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00b      	beq.n	800638c <TIM_Base_SetConfig+0x30>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637a:	d007      	beq.n	800638c <TIM_Base_SetConfig+0x30>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a26      	ldr	r2, [pc, #152]	; (8006418 <TIM_Base_SetConfig+0xbc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_Base_SetConfig+0x30>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a25      	ldr	r2, [pc, #148]	; (800641c <TIM_Base_SetConfig+0xc0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d108      	bne.n	800639e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a1c      	ldr	r2, [pc, #112]	; (8006414 <TIM_Base_SetConfig+0xb8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00b      	beq.n	80063be <TIM_Base_SetConfig+0x62>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ac:	d007      	beq.n	80063be <TIM_Base_SetConfig+0x62>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a19      	ldr	r2, [pc, #100]	; (8006418 <TIM_Base_SetConfig+0xbc>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_Base_SetConfig+0x62>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a18      	ldr	r2, [pc, #96]	; (800641c <TIM_Base_SetConfig+0xc0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d108      	bne.n	80063d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a07      	ldr	r2, [pc, #28]	; (8006414 <TIM_Base_SetConfig+0xb8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d103      	bne.n	8006404 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	615a      	str	r2, [r3, #20]
}
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	bc80      	pop	{r7}
 8006412:	4770      	bx	lr
 8006414:	40012c00 	.word	0x40012c00
 8006418:	40000400 	.word	0x40000400
 800641c:	40000800 	.word	0x40000800

08006420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f023 0201 	bic.w	r2, r3, #1
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800644a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f023 030a 	bic.w	r3, r3, #10
 800645c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr

0800647c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	f023 0210 	bic.w	r2, r3, #16
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	031b      	lsls	r3, r3, #12
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	621a      	str	r2, [r3, #32]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr

080064da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064da:	b480      	push	{r7}
 80064dc:	b085      	sub	sp, #20
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f043 0307 	orr.w	r3, r3, #7
 80064fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	609a      	str	r2, [r3, #8]
}
 8006504:	bf00      	nop
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	bc80      	pop	{r7}
 800650c:	4770      	bx	lr

0800650e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800650e:	b480      	push	{r7}
 8006510:	b087      	sub	sp, #28
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
 800651a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006528:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	021a      	lsls	r2, r3, #8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	431a      	orrs	r2, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4313      	orrs	r3, r2
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	609a      	str	r2, [r3, #8]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr

0800654c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006560:	2302      	movs	r3, #2
 8006562:	e046      	b.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a16      	ldr	r2, [pc, #88]	; (80065fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d00e      	beq.n	80065c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b0:	d009      	beq.n	80065c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a12      	ldr	r2, [pc, #72]	; (8006600 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d004      	beq.n	80065c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a10      	ldr	r2, [pc, #64]	; (8006604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d10c      	bne.n	80065e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr
 80065fc:	40012c00 	.word	0x40012c00
 8006600:	40000400 	.word	0x40000400
 8006604:	40000800 	.word	0x40000800

08006608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr

0800661a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	4603      	mov	r3, r0
 8006634:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800663a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800663e:	2b84      	cmp	r3, #132	; 0x84
 8006640:	d005      	beq.n	800664e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006642:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	3303      	adds	r3, #3
 800664c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800664e:	68fb      	ldr	r3, [r7, #12]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	bc80      	pop	{r7}
 8006658:	4770      	bx	lr

0800665a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006660:	f3ef 8305 	mrs	r3, IPSR
 8006664:	607b      	str	r3, [r7, #4]
  return(result);
 8006666:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006668:	2b00      	cmp	r3, #0
 800666a:	bf14      	ite	ne
 800666c:	2301      	movne	r3, #1
 800666e:	2300      	moveq	r3, #0
 8006670:	b2db      	uxtb	r3, r3
}
 8006672:	4618      	mov	r0, r3
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr

0800667c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006680:	f001 f8d8 	bl	8007834 <vTaskStartScheduler>
  
  return osOK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	bd80      	pop	{r7, pc}

0800668a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800668a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800668c:	b089      	sub	sp, #36	; 0x24
 800668e:	af04      	add	r7, sp, #16
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d020      	beq.n	80066de <osThreadCreate+0x54>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01c      	beq.n	80066de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685c      	ldr	r4, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681d      	ldr	r5, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691e      	ldr	r6, [r3, #16]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff ffb8 	bl	800662c <makeFreeRtosPriority>
 80066bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066c6:	9202      	str	r2, [sp, #8]
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	9100      	str	r1, [sp, #0]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	4632      	mov	r2, r6
 80066d0:	4629      	mov	r1, r5
 80066d2:	4620      	mov	r0, r4
 80066d4:	f000 fef3 	bl	80074be <xTaskCreateStatic>
 80066d8:	4603      	mov	r3, r0
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	e01c      	b.n	8006718 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685c      	ldr	r4, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ea:	b29e      	uxth	r6, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7ff ff9a 	bl	800662c <makeFreeRtosPriority>
 80066f8:	4602      	mov	r2, r0
 80066fa:	f107 030c 	add.w	r3, r7, #12
 80066fe:	9301      	str	r3, [sp, #4]
 8006700:	9200      	str	r2, [sp, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	4632      	mov	r2, r6
 8006706:	4629      	mov	r1, r5
 8006708:	4620      	mov	r0, r4
 800670a:	f000 ff31 	bl	8007570 <xTaskCreate>
 800670e:	4603      	mov	r3, r0
 8006710:	2b01      	cmp	r3, #1
 8006712:	d001      	beq.n	8006718 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	e000      	b.n	800671a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006718:	68fb      	ldr	r3, [r7, #12]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006722 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <osDelay+0x16>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	e000      	b.n	800673a <osDelay+0x18>
 8006738:	2301      	movs	r3, #1
 800673a:	4618      	mov	r0, r3
 800673c:	f001 f846 	bl	80077cc <vTaskDelay>
  
  return osOK;
 8006740:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800674a:	b590      	push	{r4, r7, lr}
 800674c:	b085      	sub	sp, #20
 800674e:	af02      	add	r7, sp, #8
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d012      	beq.n	8006782 <osMessageCreate+0x38>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00e      	beq.n	8006782 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6859      	ldr	r1, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68dc      	ldr	r4, [r3, #12]
 8006774:	2300      	movs	r3, #0
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	4623      	mov	r3, r4
 800677a:	f000 f9db 	bl	8006b34 <xQueueGenericCreateStatic>
 800677e:	4603      	mov	r3, r0
 8006780:	e008      	b.n	8006794 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	4619      	mov	r1, r3
 800678e:	f000 fa43 	bl	8006c18 <xQueueGenericCreate>
 8006792:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006794:	4618      	mov	r0, r3
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	bd90      	pop	{r4, r7, pc}

0800679c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80067a8:	2300      	movs	r3, #0
 80067aa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <osMessagePut+0x1e>
    ticks = 1;
 80067b6:	2301      	movs	r3, #1
 80067b8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80067ba:	f7ff ff4e 	bl	800665a <inHandlerMode>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d018      	beq.n	80067f6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80067c4:	f107 0210 	add.w	r2, r7, #16
 80067c8:	f107 0108 	add.w	r1, r7, #8
 80067cc:	2300      	movs	r3, #0
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 fb78 	bl	8006ec4 <xQueueGenericSendFromISR>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d001      	beq.n	80067de <osMessagePut+0x42>
      return osErrorOS;
 80067da:	23ff      	movs	r3, #255	; 0xff
 80067dc:	e018      	b.n	8006810 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d014      	beq.n	800680e <osMessagePut+0x72>
 80067e4:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <osMessagePut+0x7c>)
 80067e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	e00b      	b.n	800680e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80067f6:	f107 0108 	add.w	r1, r7, #8
 80067fa:	2300      	movs	r3, #0
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fa66 	bl	8006cd0 <xQueueGenericSend>
 8006804:	4603      	mov	r3, r0
 8006806:	2b01      	cmp	r3, #1
 8006808:	d001      	beq.n	800680e <osMessagePut+0x72>
      return osErrorOS;
 800680a:	23ff      	movs	r3, #255	; 0xff
 800680c:	e000      	b.n	8006810 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800681c:	b590      	push	{r4, r7, lr}
 800681e:	b08b      	sub	sp, #44	; 0x2c
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10a      	bne.n	800684c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006836:	2380      	movs	r3, #128	; 0x80
 8006838:	617b      	str	r3, [r7, #20]
    return event;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	461c      	mov	r4, r3
 800683e:	f107 0314 	add.w	r3, r7, #20
 8006842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006846:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800684a:	e054      	b.n	80068f6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800684c:	2300      	movs	r3, #0
 800684e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d103      	bne.n	8006864 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800685c:	f04f 33ff 	mov.w	r3, #4294967295
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
 8006862:	e009      	b.n	8006878 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d006      	beq.n	8006878 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <osMessageGet+0x5c>
      ticks = 1;
 8006874:	2301      	movs	r3, #1
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006878:	f7ff feef 	bl	800665a <inHandlerMode>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01c      	beq.n	80068bc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006882:	f107 0220 	add.w	r2, r7, #32
 8006886:	f107 0314 	add.w	r3, r7, #20
 800688a:	3304      	adds	r3, #4
 800688c:	4619      	mov	r1, r3
 800688e:	68b8      	ldr	r0, [r7, #8]
 8006890:	f000 fc88 	bl	80071a4 <xQueueReceiveFromISR>
 8006894:	4603      	mov	r3, r0
 8006896:	2b01      	cmp	r3, #1
 8006898:	d102      	bne.n	80068a0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800689a:	2310      	movs	r3, #16
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	e001      	b.n	80068a4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d01d      	beq.n	80068e6 <osMessageGet+0xca>
 80068aa:	4b15      	ldr	r3, [pc, #84]	; (8006900 <osMessageGet+0xe4>)
 80068ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	e014      	b.n	80068e6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80068bc:	f107 0314 	add.w	r3, r7, #20
 80068c0:	3304      	adds	r3, #4
 80068c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c4:	4619      	mov	r1, r3
 80068c6:	68b8      	ldr	r0, [r7, #8]
 80068c8:	f000 fb90 	bl	8006fec <xQueueReceive>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d102      	bne.n	80068d8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80068d2:	2310      	movs	r3, #16
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	e006      	b.n	80068e6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <osMessageGet+0xc6>
 80068de:	2300      	movs	r3, #0
 80068e0:	e000      	b.n	80068e4 <osMessageGet+0xc8>
 80068e2:	2340      	movs	r3, #64	; 0x40
 80068e4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	461c      	mov	r4, r3
 80068ea:	f107 0314 	add.w	r3, r7, #20
 80068ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80068f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	372c      	adds	r7, #44	; 0x2c
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd90      	pop	{r4, r7, pc}
 80068fe:	bf00      	nop
 8006900:	e000ed04 	.word	0xe000ed04

08006904 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f103 0208 	add.w	r2, r3, #8
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f04f 32ff 	mov.w	r2, #4294967295
 800691c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f103 0208 	add.w	r2, r3, #8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f103 0208 	add.w	r2, r3, #8
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr

08006942 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr

0800695a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800695a:	b480      	push	{r7}
 800695c:	b085      	sub	sp, #20
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	601a      	str	r2, [r3, #0]
}
 8006996:	bf00      	nop
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b6:	d103      	bne.n	80069c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	e00c      	b.n	80069da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3308      	adds	r3, #8
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	e002      	b.n	80069ce <vListInsert+0x2e>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d2f6      	bcs.n	80069c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	601a      	str	r2, [r3, #0]
}
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr

08006a10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6892      	ldr	r2, [r2, #8]
 8006a26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6852      	ldr	r2, [r2, #4]
 8006a30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d103      	bne.n	8006a44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	1e5a      	subs	r2, r3, #1
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bc80      	pop	{r7}
 8006a60:	4770      	bx	lr
	...

08006a64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	60bb      	str	r3, [r7, #8]
 8006a8a:	e7fe      	b.n	8006a8a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006a8c:	f001 fcc4 	bl	8008418 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a98:	68f9      	ldr	r1, [r7, #12]
 8006a9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a9c:	fb01 f303 	mul.w	r3, r1, r3
 8006aa0:	441a      	add	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006abc:	3b01      	subs	r3, #1
 8006abe:	68f9      	ldr	r1, [r7, #12]
 8006ac0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ac2:	fb01 f303 	mul.w	r3, r1, r3
 8006ac6:	441a      	add	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	22ff      	movs	r2, #255	; 0xff
 8006ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	22ff      	movs	r2, #255	; 0xff
 8006ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d114      	bne.n	8006b0c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d01a      	beq.n	8006b20 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3310      	adds	r3, #16
 8006aee:	4618      	mov	r0, r3
 8006af0:	f001 f8e2 	bl	8007cb8 <xTaskRemoveFromEventList>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d012      	beq.n	8006b20 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006afa:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <xQueueGenericReset+0xcc>)
 8006afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	e009      	b.n	8006b20 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3310      	adds	r3, #16
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff fef7 	bl	8006904 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3324      	adds	r3, #36	; 0x24
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff fef2 	bl	8006904 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b20:	f001 fca8 	bl	8008474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b24:	2301      	movs	r3, #1
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	e000ed04 	.word	0xe000ed04

08006b34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08e      	sub	sp, #56	; 0x38
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d109      	bne.n	8006b5c <xQueueGenericCreateStatic+0x28>
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b5a:	e7fe      	b.n	8006b5a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <xQueueGenericCreateStatic+0x42>
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
 8006b74:	e7fe      	b.n	8006b74 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <xQueueGenericCreateStatic+0x4e>
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <xQueueGenericCreateStatic+0x52>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <xQueueGenericCreateStatic+0x54>
 8006b86:	2300      	movs	r3, #0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d109      	bne.n	8006ba0 <xQueueGenericCreateStatic+0x6c>
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	623b      	str	r3, [r7, #32]
 8006b9e:	e7fe      	b.n	8006b9e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <xQueueGenericCreateStatic+0x78>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <xQueueGenericCreateStatic+0x7c>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <xQueueGenericCreateStatic+0x7e>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <xQueueGenericCreateStatic+0x96>
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	e7fe      	b.n	8006bc8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bca:	2348      	movs	r3, #72	; 0x48
 8006bcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b48      	cmp	r3, #72	; 0x48
 8006bd2:	d009      	beq.n	8006be8 <xQueueGenericCreateStatic+0xb4>
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	e7fe      	b.n	8006be6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00d      	beq.n	8006c0e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bfa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	4613      	mov	r3, r2
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	68b9      	ldr	r1, [r7, #8]
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 f842 	bl	8006c92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3730      	adds	r7, #48	; 0x30
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08a      	sub	sp, #40	; 0x28
 8006c1c:	af02      	add	r7, sp, #8
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	4613      	mov	r3, r2
 8006c24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d109      	bne.n	8006c40 <xQueueGenericCreate+0x28>
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	e7fe      	b.n	8006c3e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d102      	bne.n	8006c4c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61fb      	str	r3, [r7, #28]
 8006c4a:	e004      	b.n	8006c56 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	fb02 f303 	mul.w	r3, r2, r3
 8006c54:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	3348      	adds	r3, #72	; 0x48
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 fcd2 	bl	8008604 <pvPortMalloc>
 8006c60:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00f      	beq.n	8006c88 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	3348      	adds	r3, #72	; 0x48
 8006c6c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c76:	79fa      	ldrb	r2, [r7, #7]
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f805 	bl	8006c92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006c88:	69bb      	ldr	r3, [r7, #24]
	}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	607a      	str	r2, [r7, #4]
 8006c9e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d103      	bne.n	8006cae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e002      	b.n	8006cb4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	69b8      	ldr	r0, [r7, #24]
 8006cc4:	f7ff fece 	bl	8006a64 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cc8:	bf00      	nop
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08e      	sub	sp, #56	; 0x38
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d109      	bne.n	8006d00 <xQueueGenericSend+0x30>
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cfe:	e7fe      	b.n	8006cfe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d103      	bne.n	8006d0e <xQueueGenericSend+0x3e>
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <xQueueGenericSend+0x42>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <xQueueGenericSend+0x44>
 8006d12:	2300      	movs	r3, #0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d109      	bne.n	8006d2c <xQueueGenericSend+0x5c>
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
 8006d2a:	e7fe      	b.n	8006d2a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d103      	bne.n	8006d3a <xQueueGenericSend+0x6a>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d101      	bne.n	8006d3e <xQueueGenericSend+0x6e>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <xQueueGenericSend+0x70>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d109      	bne.n	8006d58 <xQueueGenericSend+0x88>
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	623b      	str	r3, [r7, #32]
 8006d56:	e7fe      	b.n	8006d56 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d58:	f001 f968 	bl	800802c <xTaskGetSchedulerState>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d102      	bne.n	8006d68 <xQueueGenericSend+0x98>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <xQueueGenericSend+0x9c>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <xQueueGenericSend+0x9e>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d109      	bne.n	8006d86 <xQueueGenericSend+0xb6>
 8006d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	e7fe      	b.n	8006d84 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d86:	f001 fb47 	bl	8008418 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d302      	bcc.n	8006d9c <xQueueGenericSend+0xcc>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d129      	bne.n	8006df0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006da2:	f000 fa7c 	bl	800729e <prvCopyDataToQueue>
 8006da6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d010      	beq.n	8006dd2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	3324      	adds	r3, #36	; 0x24
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 ff7f 	bl	8007cb8 <xTaskRemoveFromEventList>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d013      	beq.n	8006de8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006dc0:	4b3f      	ldr	r3, [pc, #252]	; (8006ec0 <xQueueGenericSend+0x1f0>)
 8006dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	e00a      	b.n	8006de8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d007      	beq.n	8006de8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006dd8:	4b39      	ldr	r3, [pc, #228]	; (8006ec0 <xQueueGenericSend+0x1f0>)
 8006dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006de8:	f001 fb44 	bl	8008474 <vPortExitCritical>
				return pdPASS;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e063      	b.n	8006eb8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d103      	bne.n	8006dfe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006df6:	f001 fb3d 	bl	8008474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e05c      	b.n	8006eb8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d106      	bne.n	8006e12 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e04:	f107 0314 	add.w	r3, r7, #20
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 ffb7 	bl	8007d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e12:	f001 fb2f 	bl	8008474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e16:	f000 fd6b 	bl	80078f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e1a:	f001 fafd 	bl	8008418 <vPortEnterCritical>
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e24:	b25b      	sxtb	r3, r3
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2a:	d103      	bne.n	8006e34 <xQueueGenericSend+0x164>
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e3a:	b25b      	sxtb	r3, r3
 8006e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e40:	d103      	bne.n	8006e4a <xQueueGenericSend+0x17a>
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e4a:	f001 fb13 	bl	8008474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e4e:	1d3a      	adds	r2, r7, #4
 8006e50:	f107 0314 	add.w	r3, r7, #20
 8006e54:	4611      	mov	r1, r2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 ffa6 	bl	8007da8 <xTaskCheckForTimeOut>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d124      	bne.n	8006eac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e64:	f000 fb13 	bl	800748e <prvIsQueueFull>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d018      	beq.n	8006ea0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	3310      	adds	r3, #16
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	4611      	mov	r1, r2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fefa 	bl	8007c70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e7e:	f000 fa9e 	bl	80073be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e82:	f000 fd43 	bl	800790c <xTaskResumeAll>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f47f af7c 	bne.w	8006d86 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <xQueueGenericSend+0x1f0>)
 8006e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	e772      	b.n	8006d86 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ea2:	f000 fa8c 	bl	80073be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ea6:	f000 fd31 	bl	800790c <xTaskResumeAll>
 8006eaa:	e76c      	b.n	8006d86 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eae:	f000 fa86 	bl	80073be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eb2:	f000 fd2b 	bl	800790c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006eb6:	2300      	movs	r3, #0
		}
	}
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3738      	adds	r7, #56	; 0x38
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	e000ed04 	.word	0xe000ed04

08006ec4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08e      	sub	sp, #56	; 0x38
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d109      	bne.n	8006ef0 <xQueueGenericSendFromISR+0x2c>
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
 8006eee:	e7fe      	b.n	8006eee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d103      	bne.n	8006efe <xQueueGenericSendFromISR+0x3a>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <xQueueGenericSendFromISR+0x3e>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <xQueueGenericSendFromISR+0x40>
 8006f02:	2300      	movs	r3, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d109      	bne.n	8006f1c <xQueueGenericSendFromISR+0x58>
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	623b      	str	r3, [r7, #32]
 8006f1a:	e7fe      	b.n	8006f1a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d103      	bne.n	8006f2a <xQueueGenericSendFromISR+0x66>
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d101      	bne.n	8006f2e <xQueueGenericSendFromISR+0x6a>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <xQueueGenericSendFromISR+0x6c>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d109      	bne.n	8006f48 <xQueueGenericSendFromISR+0x84>
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	61fb      	str	r3, [r7, #28]
 8006f46:	e7fe      	b.n	8006f46 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f48:	f001 fb20 	bl	800858c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f4c:	f3ef 8211 	mrs	r2, BASEPRI
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	61ba      	str	r2, [r7, #24]
 8006f62:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f64:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f66:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d302      	bcc.n	8006f7a <xQueueGenericSendFromISR+0xb6>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d12c      	bne.n	8006fd4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f8a:	f000 f988 	bl	800729e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f8e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f96:	d112      	bne.n	8006fbe <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d016      	beq.n	8006fce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	3324      	adds	r3, #36	; 0x24
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fe87 	bl	8007cb8 <xTaskRemoveFromEventList>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00e      	beq.n	8006fce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00b      	beq.n	8006fce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	e007      	b.n	8006fce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	b25a      	sxtb	r2, r3
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006fd2:	e001      	b.n	8006fd8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fda:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3738      	adds	r7, #56	; 0x38
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08c      	sub	sp, #48	; 0x30
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	2b00      	cmp	r3, #0
 8007004:	d109      	bne.n	800701a <xQueueReceive+0x2e>
	__asm volatile
 8007006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	623b      	str	r3, [r7, #32]
 8007018:	e7fe      	b.n	8007018 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d103      	bne.n	8007028 <xQueueReceive+0x3c>
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <xQueueReceive+0x40>
 8007028:	2301      	movs	r3, #1
 800702a:	e000      	b.n	800702e <xQueueReceive+0x42>
 800702c:	2300      	movs	r3, #0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d109      	bne.n	8007046 <xQueueReceive+0x5a>
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	61fb      	str	r3, [r7, #28]
 8007044:	e7fe      	b.n	8007044 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007046:	f000 fff1 	bl	800802c <xTaskGetSchedulerState>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d102      	bne.n	8007056 <xQueueReceive+0x6a>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <xQueueReceive+0x6e>
 8007056:	2301      	movs	r3, #1
 8007058:	e000      	b.n	800705c <xQueueReceive+0x70>
 800705a:	2300      	movs	r3, #0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d109      	bne.n	8007074 <xQueueReceive+0x88>
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	e7fe      	b.n	8007072 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007074:	f001 f9d0 	bl	8008418 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01f      	beq.n	80070c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007088:	f000 f973 	bl	8007372 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	1e5a      	subs	r2, r3, #1
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00f      	beq.n	80070bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	3310      	adds	r3, #16
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 fe09 	bl	8007cb8 <xTaskRemoveFromEventList>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d007      	beq.n	80070bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070ac:	4b3c      	ldr	r3, [pc, #240]	; (80071a0 <xQueueReceive+0x1b4>)
 80070ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070bc:	f001 f9da 	bl	8008474 <vPortExitCritical>
				return pdPASS;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e069      	b.n	8007198 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d103      	bne.n	80070d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070ca:	f001 f9d3 	bl	8008474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070ce:	2300      	movs	r3, #0
 80070d0:	e062      	b.n	8007198 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070d8:	f107 0310 	add.w	r3, r7, #16
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fe4d 	bl	8007d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070e2:	2301      	movs	r3, #1
 80070e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070e6:	f001 f9c5 	bl	8008474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070ea:	f000 fc01 	bl	80078f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070ee:	f001 f993 	bl	8008418 <vPortEnterCritical>
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070f8:	b25b      	sxtb	r3, r3
 80070fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fe:	d103      	bne.n	8007108 <xQueueReceive+0x11c>
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800710e:	b25b      	sxtb	r3, r3
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d103      	bne.n	800711e <xQueueReceive+0x132>
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800711e:	f001 f9a9 	bl	8008474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007122:	1d3a      	adds	r2, r7, #4
 8007124:	f107 0310 	add.w	r3, r7, #16
 8007128:	4611      	mov	r1, r2
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fe3c 	bl	8007da8 <xTaskCheckForTimeOut>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d123      	bne.n	800717e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007138:	f000 f993 	bl	8007462 <prvIsQueueEmpty>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d017      	beq.n	8007172 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	3324      	adds	r3, #36	; 0x24
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	4611      	mov	r1, r2
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fd90 	bl	8007c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007152:	f000 f934 	bl	80073be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007156:	f000 fbd9 	bl	800790c <xTaskResumeAll>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d189      	bne.n	8007074 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007160:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <xQueueReceive+0x1b4>)
 8007162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	e780      	b.n	8007074 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007174:	f000 f923 	bl	80073be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007178:	f000 fbc8 	bl	800790c <xTaskResumeAll>
 800717c:	e77a      	b.n	8007074 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800717e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007180:	f000 f91d 	bl	80073be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007184:	f000 fbc2 	bl	800790c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718a:	f000 f96a 	bl	8007462 <prvIsQueueEmpty>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	f43f af6f 	beq.w	8007074 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007196:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007198:	4618      	mov	r0, r3
 800719a:	3730      	adds	r7, #48	; 0x30
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08e      	sub	sp, #56	; 0x38
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d109      	bne.n	80071ce <xQueueReceiveFromISR+0x2a>
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	623b      	str	r3, [r7, #32]
 80071cc:	e7fe      	b.n	80071cc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d103      	bne.n	80071dc <xQueueReceiveFromISR+0x38>
 80071d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <xQueueReceiveFromISR+0x3c>
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <xQueueReceiveFromISR+0x3e>
 80071e0:	2300      	movs	r3, #0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <xQueueReceiveFromISR+0x56>
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	e7fe      	b.n	80071f8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071fa:	f001 f9c7 	bl	800858c <vPortValidateInterruptPriority>
	__asm volatile
 80071fe:	f3ef 8211 	mrs	r2, BASEPRI
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	61ba      	str	r2, [r7, #24]
 8007214:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007216:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	2b00      	cmp	r3, #0
 8007224:	d02f      	beq.n	8007286 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800722c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007234:	f000 f89d 	bl	8007372 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	1e5a      	subs	r2, r3, #1
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007240:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d112      	bne.n	8007270 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d016      	beq.n	8007280 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	3310      	adds	r3, #16
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fd2e 	bl	8007cb8 <xTaskRemoveFromEventList>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00e      	beq.n	8007280 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00b      	beq.n	8007280 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	e007      	b.n	8007280 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007274:	3301      	adds	r3, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	b25a      	sxtb	r2, r3
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007280:	2301      	movs	r3, #1
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
 8007284:	e001      	b.n	800728a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007286:	2300      	movs	r3, #0
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007296:	4618      	mov	r0, r3
 8007298:	3738      	adds	r7, #56	; 0x38
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b086      	sub	sp, #24
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	60f8      	str	r0, [r7, #12]
 80072a6:	60b9      	str	r1, [r7, #8]
 80072a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10d      	bne.n	80072d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d14d      	bne.n	8007360 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 fecd 	bl	8008068 <xTaskPriorityDisinherit>
 80072ce:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	605a      	str	r2, [r3, #4]
 80072d6:	e043      	b.n	8007360 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d119      	bne.n	8007312 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6898      	ldr	r0, [r3, #8]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	461a      	mov	r2, r3
 80072e8:	68b9      	ldr	r1, [r7, #8]
 80072ea:	f001 fb91 	bl	8008a10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	441a      	add	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	429a      	cmp	r2, r3
 8007306:	d32b      	bcc.n	8007360 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	609a      	str	r2, [r3, #8]
 8007310:	e026      	b.n	8007360 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	68d8      	ldr	r0, [r3, #12]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	461a      	mov	r2, r3
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	f001 fb77 	bl	8008a10 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	425b      	negs	r3, r3
 800732c:	441a      	add	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	429a      	cmp	r2, r3
 800733c:	d207      	bcs.n	800734e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	425b      	negs	r3, r3
 8007348:	441a      	add	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b02      	cmp	r3, #2
 8007352:	d105      	bne.n	8007360 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	3b01      	subs	r3, #1
 800735e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007368:	697b      	ldr	r3, [r7, #20]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b082      	sub	sp, #8
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	2b00      	cmp	r3, #0
 8007382:	d018      	beq.n	80073b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	441a      	add	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	429a      	cmp	r2, r3
 800739c:	d303      	bcc.n	80073a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68d9      	ldr	r1, [r3, #12]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	461a      	mov	r2, r3
 80073b0:	6838      	ldr	r0, [r7, #0]
 80073b2:	f001 fb2d 	bl	8008a10 <memcpy>
	}
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073c6:	f001 f827 	bl	8008418 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073d2:	e011      	b.n	80073f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d012      	beq.n	8007402 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3324      	adds	r3, #36	; 0x24
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fc69 	bl	8007cb8 <xTaskRemoveFromEventList>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073ec:	f000 fd3c 	bl	8007e68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dce9      	bgt.n	80073d4 <prvUnlockQueue+0x16>
 8007400:	e000      	b.n	8007404 <prvUnlockQueue+0x46>
					break;
 8007402:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	22ff      	movs	r2, #255	; 0xff
 8007408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800740c:	f001 f832 	bl	8008474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007410:	f001 f802 	bl	8008418 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800741a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800741c:	e011      	b.n	8007442 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d012      	beq.n	800744c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3310      	adds	r3, #16
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fc44 	bl	8007cb8 <xTaskRemoveFromEventList>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007436:	f000 fd17 	bl	8007e68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	3b01      	subs	r3, #1
 800743e:	b2db      	uxtb	r3, r3
 8007440:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007446:	2b00      	cmp	r3, #0
 8007448:	dce9      	bgt.n	800741e <prvUnlockQueue+0x60>
 800744a:	e000      	b.n	800744e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800744c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	22ff      	movs	r2, #255	; 0xff
 8007452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007456:	f001 f80d 	bl	8008474 <vPortExitCritical>
}
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800746a:	f000 ffd5 	bl	8008418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	2b00      	cmp	r3, #0
 8007474:	d102      	bne.n	800747c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007476:	2301      	movs	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]
 800747a:	e001      	b.n	8007480 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007480:	f000 fff8 	bl	8008474 <vPortExitCritical>

	return xReturn;
 8007484:	68fb      	ldr	r3, [r7, #12]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007496:	f000 ffbf 	bl	8008418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d102      	bne.n	80074ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074a6:	2301      	movs	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]
 80074aa:	e001      	b.n	80074b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074b0:	f000 ffe0 	bl	8008474 <vPortExitCritical>

	return xReturn;
 80074b4:	68fb      	ldr	r3, [r7, #12]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b08e      	sub	sp, #56	; 0x38
 80074c2:	af04      	add	r7, sp, #16
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	607a      	str	r2, [r7, #4]
 80074ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <xTaskCreateStatic+0x28>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	623b      	str	r3, [r7, #32]
 80074e4:	e7fe      	b.n	80074e4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d109      	bne.n	8007500 <xTaskCreateStatic+0x42>
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	61fb      	str	r3, [r7, #28]
 80074fe:	e7fe      	b.n	80074fe <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007500:	2354      	movs	r3, #84	; 0x54
 8007502:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	2b54      	cmp	r3, #84	; 0x54
 8007508:	d009      	beq.n	800751e <xTaskCreateStatic+0x60>
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	61bb      	str	r3, [r7, #24]
 800751c:	e7fe      	b.n	800751c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01e      	beq.n	8007562 <xTaskCreateStatic+0xa4>
 8007524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007526:	2b00      	cmp	r3, #0
 8007528:	d01b      	beq.n	8007562 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007532:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	2202      	movs	r2, #2
 8007538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800753c:	2300      	movs	r3, #0
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	9302      	str	r3, [sp, #8]
 8007544:	f107 0314 	add.w	r3, r7, #20
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 f850 	bl	80075fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800755a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800755c:	f000 f8cc 	bl	80076f8 <prvAddNewTaskToReadyList>
 8007560:	e001      	b.n	8007566 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007566:	697b      	ldr	r3, [r7, #20]
	}
 8007568:	4618      	mov	r0, r3
 800756a:	3728      	adds	r7, #40	; 0x28
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08c      	sub	sp, #48	; 0x30
 8007574:	af04      	add	r7, sp, #16
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	4613      	mov	r3, r2
 800757e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007580:	88fb      	ldrh	r3, [r7, #6]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4618      	mov	r0, r3
 8007586:	f001 f83d 	bl	8008604 <pvPortMalloc>
 800758a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00e      	beq.n	80075b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007592:	2054      	movs	r0, #84	; 0x54
 8007594:	f001 f836 	bl	8008604 <pvPortMalloc>
 8007598:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	631a      	str	r2, [r3, #48]	; 0x30
 80075a6:	e005      	b.n	80075b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075a8:	6978      	ldr	r0, [r7, #20]
 80075aa:	f001 f8ed 	bl	8008788 <vPortFree>
 80075ae:	e001      	b.n	80075b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d017      	beq.n	80075ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075c2:	88fa      	ldrh	r2, [r7, #6]
 80075c4:	2300      	movs	r3, #0
 80075c6:	9303      	str	r3, [sp, #12]
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	9302      	str	r3, [sp, #8]
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 f80e 	bl	80075fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075de:	69f8      	ldr	r0, [r7, #28]
 80075e0:	f000 f88a 	bl	80076f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075e4:	2301      	movs	r3, #1
 80075e6:	61bb      	str	r3, [r7, #24]
 80075e8:	e002      	b.n	80075f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075ea:	f04f 33ff 	mov.w	r3, #4294967295
 80075ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075f0:	69bb      	ldr	r3, [r7, #24]
	}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3720      	adds	r7, #32
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b088      	sub	sp, #32
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
 8007606:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007612:	3b01      	subs	r3, #1
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	f023 0307 	bic.w	r3, r3, #7
 8007620:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	2b00      	cmp	r3, #0
 800762a:	d009      	beq.n	8007640 <prvInitialiseNewTask+0x46>
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	e7fe      	b.n	800763e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007640:	2300      	movs	r3, #0
 8007642:	61fb      	str	r3, [r7, #28]
 8007644:	e012      	b.n	800766c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	7819      	ldrb	r1, [r3, #0]
 800764e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	4413      	add	r3, r2
 8007654:	3334      	adds	r3, #52	; 0x34
 8007656:	460a      	mov	r2, r1
 8007658:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	4413      	add	r3, r2
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d006      	beq.n	8007674 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3301      	adds	r3, #1
 800766a:	61fb      	str	r3, [r7, #28]
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	2b0f      	cmp	r3, #15
 8007670:	d9e9      	bls.n	8007646 <prvInitialiseNewTask+0x4c>
 8007672:	e000      	b.n	8007676 <prvInitialiseNewTask+0x7c>
		{
			break;
 8007674:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	2b06      	cmp	r3, #6
 8007682:	d901      	bls.n	8007688 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007684:	2306      	movs	r3, #6
 8007686:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800768c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007692:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	2200      	movs	r2, #0
 8007698:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	3304      	adds	r3, #4
 800769e:	4618      	mov	r0, r3
 80076a0:	f7ff f94f 	bl	8006942 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a6:	3318      	adds	r3, #24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff f94a 	bl	8006942 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b6:	f1c3 0207 	rsb	r2, r3, #7
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	2200      	movs	r2, #0
 80076c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	68f9      	ldr	r1, [r7, #12]
 80076d6:	69b8      	ldr	r0, [r7, #24]
 80076d8:	f000 fdb0 	bl	800823c <pxPortInitialiseStack>
 80076dc:	4602      	mov	r2, r0
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076ee:	bf00      	nop
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007700:	f000 fe8a 	bl	8008418 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007704:	4b2a      	ldr	r3, [pc, #168]	; (80077b0 <prvAddNewTaskToReadyList+0xb8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3301      	adds	r3, #1
 800770a:	4a29      	ldr	r2, [pc, #164]	; (80077b0 <prvAddNewTaskToReadyList+0xb8>)
 800770c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800770e:	4b29      	ldr	r3, [pc, #164]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007716:	4a27      	ldr	r2, [pc, #156]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800771c:	4b24      	ldr	r3, [pc, #144]	; (80077b0 <prvAddNewTaskToReadyList+0xb8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d110      	bne.n	8007746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007724:	f000 fbc4 	bl	8007eb0 <prvInitialiseTaskLists>
 8007728:	e00d      	b.n	8007746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800772a:	4b23      	ldr	r3, [pc, #140]	; (80077b8 <prvAddNewTaskToReadyList+0xc0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007732:	4b20      	ldr	r3, [pc, #128]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	429a      	cmp	r2, r3
 800773e:	d802      	bhi.n	8007746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007740:	4a1c      	ldr	r2, [pc, #112]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007746:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <prvAddNewTaskToReadyList+0xc4>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3301      	adds	r3, #1
 800774c:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <prvAddNewTaskToReadyList+0xc4>)
 800774e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	2201      	movs	r2, #1
 8007756:	409a      	lsls	r2, r3
 8007758:	4b19      	ldr	r3, [pc, #100]	; (80077c0 <prvAddNewTaskToReadyList+0xc8>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4313      	orrs	r3, r2
 800775e:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <prvAddNewTaskToReadyList+0xc8>)
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4a15      	ldr	r2, [pc, #84]	; (80077c4 <prvAddNewTaskToReadyList+0xcc>)
 8007770:	441a      	add	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3304      	adds	r3, #4
 8007776:	4619      	mov	r1, r3
 8007778:	4610      	mov	r0, r2
 800777a:	f7ff f8ee 	bl	800695a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800777e:	f000 fe79 	bl	8008474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007782:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <prvAddNewTaskToReadyList+0xc0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00e      	beq.n	80077a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800778a:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	429a      	cmp	r2, r3
 8007796:	d207      	bcs.n	80077a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007798:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <prvAddNewTaskToReadyList+0xd0>)
 800779a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	2000081c 	.word	0x2000081c
 80077b4:	2000071c 	.word	0x2000071c
 80077b8:	20000828 	.word	0x20000828
 80077bc:	20000838 	.word	0x20000838
 80077c0:	20000824 	.word	0x20000824
 80077c4:	20000720 	.word	0x20000720
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d016      	beq.n	800780c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077de:	4b13      	ldr	r3, [pc, #76]	; (800782c <vTaskDelay+0x60>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d009      	beq.n	80077fa <vTaskDelay+0x2e>
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60bb      	str	r3, [r7, #8]
 80077f8:	e7fe      	b.n	80077f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80077fa:	f000 f879 	bl	80078f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077fe:	2100      	movs	r1, #0
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fcb5 	bl	8008170 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007806:	f000 f881 	bl	800790c <xTaskResumeAll>
 800780a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d107      	bne.n	8007822 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007812:	4b07      	ldr	r3, [pc, #28]	; (8007830 <vTaskDelay+0x64>)
 8007814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20000844 	.word	0x20000844
 8007830:	e000ed04 	.word	0xe000ed04

08007834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08a      	sub	sp, #40	; 0x28
 8007838:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007842:	463a      	mov	r2, r7
 8007844:	1d39      	adds	r1, r7, #4
 8007846:	f107 0308 	add.w	r3, r7, #8
 800784a:	4618      	mov	r0, r3
 800784c:	f7f9 fb9c 	bl	8000f88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	9202      	str	r2, [sp, #8]
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	2300      	movs	r3, #0
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	2300      	movs	r3, #0
 8007860:	460a      	mov	r2, r1
 8007862:	491d      	ldr	r1, [pc, #116]	; (80078d8 <vTaskStartScheduler+0xa4>)
 8007864:	481d      	ldr	r0, [pc, #116]	; (80078dc <vTaskStartScheduler+0xa8>)
 8007866:	f7ff fe2a 	bl	80074be <xTaskCreateStatic>
 800786a:	4602      	mov	r2, r0
 800786c:	4b1c      	ldr	r3, [pc, #112]	; (80078e0 <vTaskStartScheduler+0xac>)
 800786e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007870:	4b1b      	ldr	r3, [pc, #108]	; (80078e0 <vTaskStartScheduler+0xac>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007878:	2301      	movs	r3, #1
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	e001      	b.n	8007882 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d115      	bne.n	80078b4 <vTaskStartScheduler+0x80>
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800789a:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <vTaskStartScheduler+0xb0>)
 800789c:	f04f 32ff 	mov.w	r2, #4294967295
 80078a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078a2:	4b11      	ldr	r3, [pc, #68]	; (80078e8 <vTaskStartScheduler+0xb4>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80078a8:	4b10      	ldr	r3, [pc, #64]	; (80078ec <vTaskStartScheduler+0xb8>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078ae:	f000 fd43 	bl	8008338 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078b2:	e00d      	b.n	80078d0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ba:	d109      	bne.n	80078d0 <vTaskStartScheduler+0x9c>
 80078bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	e7fe      	b.n	80078ce <vTaskStartScheduler+0x9a>
}
 80078d0:	bf00      	nop
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	0800a370 	.word	0x0800a370
 80078dc:	08007e81 	.word	0x08007e81
 80078e0:	20000840 	.word	0x20000840
 80078e4:	2000083c 	.word	0x2000083c
 80078e8:	20000828 	.word	0x20000828
 80078ec:	20000820 	.word	0x20000820

080078f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078f0:	b480      	push	{r7}
 80078f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80078f4:	4b04      	ldr	r3, [pc, #16]	; (8007908 <vTaskSuspendAll+0x18>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	4a03      	ldr	r2, [pc, #12]	; (8007908 <vTaskSuspendAll+0x18>)
 80078fc:	6013      	str	r3, [r2, #0]
}
 80078fe:	bf00      	nop
 8007900:	46bd      	mov	sp, r7
 8007902:	bc80      	pop	{r7}
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	20000844 	.word	0x20000844

0800790c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007916:	2300      	movs	r3, #0
 8007918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800791a:	4b41      	ldr	r3, [pc, #260]	; (8007a20 <xTaskResumeAll+0x114>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d109      	bne.n	8007936 <xTaskResumeAll+0x2a>
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	e7fe      	b.n	8007934 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007936:	f000 fd6f 	bl	8008418 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800793a:	4b39      	ldr	r3, [pc, #228]	; (8007a20 <xTaskResumeAll+0x114>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3b01      	subs	r3, #1
 8007940:	4a37      	ldr	r2, [pc, #220]	; (8007a20 <xTaskResumeAll+0x114>)
 8007942:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007944:	4b36      	ldr	r3, [pc, #216]	; (8007a20 <xTaskResumeAll+0x114>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d161      	bne.n	8007a10 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800794c:	4b35      	ldr	r3, [pc, #212]	; (8007a24 <xTaskResumeAll+0x118>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d05d      	beq.n	8007a10 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007954:	e02e      	b.n	80079b4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007956:	4b34      	ldr	r3, [pc, #208]	; (8007a28 <xTaskResumeAll+0x11c>)
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3318      	adds	r3, #24
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff f854 	bl	8006a10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3304      	adds	r3, #4
 800796c:	4618      	mov	r0, r3
 800796e:	f7ff f84f 	bl	8006a10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007976:	2201      	movs	r2, #1
 8007978:	409a      	lsls	r2, r3
 800797a:	4b2c      	ldr	r3, [pc, #176]	; (8007a2c <xTaskResumeAll+0x120>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4313      	orrs	r3, r2
 8007980:	4a2a      	ldr	r2, [pc, #168]	; (8007a2c <xTaskResumeAll+0x120>)
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4a27      	ldr	r2, [pc, #156]	; (8007a30 <xTaskResumeAll+0x124>)
 8007992:	441a      	add	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f7fe ffdd 	bl	800695a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a4:	4b23      	ldr	r3, [pc, #140]	; (8007a34 <xTaskResumeAll+0x128>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d302      	bcc.n	80079b4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80079ae:	4b22      	ldr	r3, [pc, #136]	; (8007a38 <xTaskResumeAll+0x12c>)
 80079b0:	2201      	movs	r2, #1
 80079b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079b4:	4b1c      	ldr	r3, [pc, #112]	; (8007a28 <xTaskResumeAll+0x11c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1cc      	bne.n	8007956 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079c2:	f000 fb0f 	bl	8007fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80079c6:	4b1d      	ldr	r3, [pc, #116]	; (8007a3c <xTaskResumeAll+0x130>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d010      	beq.n	80079f4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079d2:	f000 f837 	bl	8007a44 <xTaskIncrementTick>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80079dc:	4b16      	ldr	r3, [pc, #88]	; (8007a38 <xTaskResumeAll+0x12c>)
 80079de:	2201      	movs	r2, #1
 80079e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1f1      	bne.n	80079d2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80079ee:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <xTaskResumeAll+0x130>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079f4:	4b10      	ldr	r3, [pc, #64]	; (8007a38 <xTaskResumeAll+0x12c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d009      	beq.n	8007a10 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079fc:	2301      	movs	r3, #1
 80079fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a00:	4b0f      	ldr	r3, [pc, #60]	; (8007a40 <xTaskResumeAll+0x134>)
 8007a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a10:	f000 fd30 	bl	8008474 <vPortExitCritical>

	return xAlreadyYielded;
 8007a14:	68bb      	ldr	r3, [r7, #8]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000844 	.word	0x20000844
 8007a24:	2000081c 	.word	0x2000081c
 8007a28:	200007dc 	.word	0x200007dc
 8007a2c:	20000824 	.word	0x20000824
 8007a30:	20000720 	.word	0x20000720
 8007a34:	2000071c 	.word	0x2000071c
 8007a38:	20000830 	.word	0x20000830
 8007a3c:	2000082c 	.word	0x2000082c
 8007a40:	e000ed04 	.word	0xe000ed04

08007a44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a4e:	4b50      	ldr	r3, [pc, #320]	; (8007b90 <xTaskIncrementTick+0x14c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f040 808c 	bne.w	8007b70 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a58:	4b4e      	ldr	r3, [pc, #312]	; (8007b94 <xTaskIncrementTick+0x150>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a60:	4a4c      	ldr	r2, [pc, #304]	; (8007b94 <xTaskIncrementTick+0x150>)
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d11f      	bne.n	8007aac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a6c:	4b4a      	ldr	r3, [pc, #296]	; (8007b98 <xTaskIncrementTick+0x154>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <xTaskIncrementTick+0x46>
 8007a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	e7fe      	b.n	8007a88 <xTaskIncrementTick+0x44>
 8007a8a:	4b43      	ldr	r3, [pc, #268]	; (8007b98 <xTaskIncrementTick+0x154>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	4b42      	ldr	r3, [pc, #264]	; (8007b9c <xTaskIncrementTick+0x158>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a40      	ldr	r2, [pc, #256]	; (8007b98 <xTaskIncrementTick+0x154>)
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	4a40      	ldr	r2, [pc, #256]	; (8007b9c <xTaskIncrementTick+0x158>)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	4b40      	ldr	r3, [pc, #256]	; (8007ba0 <xTaskIncrementTick+0x15c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	4a3e      	ldr	r2, [pc, #248]	; (8007ba0 <xTaskIncrementTick+0x15c>)
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	f000 fa9c 	bl	8007fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007aac:	4b3d      	ldr	r3, [pc, #244]	; (8007ba4 <xTaskIncrementTick+0x160>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d34d      	bcc.n	8007b52 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ab6:	4b38      	ldr	r3, [pc, #224]	; (8007b98 <xTaskIncrementTick+0x154>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <xTaskIncrementTick+0x80>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e000      	b.n	8007ac6 <xTaskIncrementTick+0x82>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d004      	beq.n	8007ad4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aca:	4b36      	ldr	r3, [pc, #216]	; (8007ba4 <xTaskIncrementTick+0x160>)
 8007acc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad0:	601a      	str	r2, [r3, #0]
					break;
 8007ad2:	e03e      	b.n	8007b52 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ad4:	4b30      	ldr	r3, [pc, #192]	; (8007b98 <xTaskIncrementTick+0x154>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d203      	bcs.n	8007af4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007aec:	4a2d      	ldr	r2, [pc, #180]	; (8007ba4 <xTaskIncrementTick+0x160>)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6013      	str	r3, [r2, #0]
						break;
 8007af2:	e02e      	b.n	8007b52 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	3304      	adds	r3, #4
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe ff89 	bl	8006a10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	3318      	adds	r3, #24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe ff80 	bl	8006a10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	2201      	movs	r2, #1
 8007b16:	409a      	lsls	r2, r3
 8007b18:	4b23      	ldr	r3, [pc, #140]	; (8007ba8 <xTaskIncrementTick+0x164>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	4a22      	ldr	r2, [pc, #136]	; (8007ba8 <xTaskIncrementTick+0x164>)
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b26:	4613      	mov	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4a1f      	ldr	r2, [pc, #124]	; (8007bac <xTaskIncrementTick+0x168>)
 8007b30:	441a      	add	r2, r3
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4619      	mov	r1, r3
 8007b38:	4610      	mov	r0, r2
 8007b3a:	f7fe ff0e 	bl	800695a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b42:	4b1b      	ldr	r3, [pc, #108]	; (8007bb0 <xTaskIncrementTick+0x16c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d3b4      	bcc.n	8007ab6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b50:	e7b1      	b.n	8007ab6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b52:	4b17      	ldr	r3, [pc, #92]	; (8007bb0 <xTaskIncrementTick+0x16c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b58:	4914      	ldr	r1, [pc, #80]	; (8007bac <xTaskIncrementTick+0x168>)
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d907      	bls.n	8007b7a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	e004      	b.n	8007b7a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007b70:	4b10      	ldr	r3, [pc, #64]	; (8007bb4 <xTaskIncrementTick+0x170>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3301      	adds	r3, #1
 8007b76:	4a0f      	ldr	r2, [pc, #60]	; (8007bb4 <xTaskIncrementTick+0x170>)
 8007b78:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007b7a:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <xTaskIncrementTick+0x174>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007b82:	2301      	movs	r3, #1
 8007b84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007b86:	697b      	ldr	r3, [r7, #20]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20000844 	.word	0x20000844
 8007b94:	20000820 	.word	0x20000820
 8007b98:	200007d4 	.word	0x200007d4
 8007b9c:	200007d8 	.word	0x200007d8
 8007ba0:	20000834 	.word	0x20000834
 8007ba4:	2000083c 	.word	0x2000083c
 8007ba8:	20000824 	.word	0x20000824
 8007bac:	20000720 	.word	0x20000720
 8007bb0:	2000071c 	.word	0x2000071c
 8007bb4:	2000082c 	.word	0x2000082c
 8007bb8:	20000830 	.word	0x20000830

08007bbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bc2:	4b26      	ldr	r3, [pc, #152]	; (8007c5c <vTaskSwitchContext+0xa0>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bca:	4b25      	ldr	r3, [pc, #148]	; (8007c60 <vTaskSwitchContext+0xa4>)
 8007bcc:	2201      	movs	r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bd0:	e03e      	b.n	8007c50 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007bd2:	4b23      	ldr	r3, [pc, #140]	; (8007c60 <vTaskSwitchContext+0xa4>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007bd8:	4b22      	ldr	r3, [pc, #136]	; (8007c64 <vTaskSwitchContext+0xa8>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	fab3 f383 	clz	r3, r3
 8007be4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007be6:	7afb      	ldrb	r3, [r7, #11]
 8007be8:	f1c3 031f 	rsb	r3, r3, #31
 8007bec:	617b      	str	r3, [r7, #20]
 8007bee:	491e      	ldr	r1, [pc, #120]	; (8007c68 <vTaskSwitchContext+0xac>)
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d109      	bne.n	8007c16 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	607b      	str	r3, [r7, #4]
 8007c14:	e7fe      	b.n	8007c14 <vTaskSwitchContext+0x58>
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4a11      	ldr	r2, [pc, #68]	; (8007c68 <vTaskSwitchContext+0xac>)
 8007c22:	4413      	add	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	605a      	str	r2, [r3, #4]
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	3308      	adds	r3, #8
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d104      	bne.n	8007c46 <vTaskSwitchContext+0x8a>
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	605a      	str	r2, [r3, #4]
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	4a07      	ldr	r2, [pc, #28]	; (8007c6c <vTaskSwitchContext+0xb0>)
 8007c4e:	6013      	str	r3, [r2, #0]
}
 8007c50:	bf00      	nop
 8007c52:	371c      	adds	r7, #28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	20000844 	.word	0x20000844
 8007c60:	20000830 	.word	0x20000830
 8007c64:	20000824 	.word	0x20000824
 8007c68:	20000720 	.word	0x20000720
 8007c6c:	2000071c 	.word	0x2000071c

08007c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d109      	bne.n	8007c94 <vTaskPlaceOnEventList+0x24>
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	e7fe      	b.n	8007c92 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c94:	4b07      	ldr	r3, [pc, #28]	; (8007cb4 <vTaskPlaceOnEventList+0x44>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3318      	adds	r3, #24
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7fe fe7f 	bl	80069a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	6838      	ldr	r0, [r7, #0]
 8007ca6:	f000 fa63 	bl	8008170 <prvAddCurrentTaskToDelayedList>
}
 8007caa:	bf00      	nop
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	2000071c 	.word	0x2000071c

08007cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d109      	bne.n	8007ce2 <xTaskRemoveFromEventList+0x2a>
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	e7fe      	b.n	8007ce0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	3318      	adds	r3, #24
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fe92 	bl	8006a10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cec:	4b1d      	ldr	r3, [pc, #116]	; (8007d64 <xTaskRemoveFromEventList+0xac>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d11c      	bne.n	8007d2e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fe fe89 	bl	8006a10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	2201      	movs	r2, #1
 8007d04:	409a      	lsls	r2, r3
 8007d06:	4b18      	ldr	r3, [pc, #96]	; (8007d68 <xTaskRemoveFromEventList+0xb0>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	4a16      	ldr	r2, [pc, #88]	; (8007d68 <xTaskRemoveFromEventList+0xb0>)
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4a13      	ldr	r2, [pc, #76]	; (8007d6c <xTaskRemoveFromEventList+0xb4>)
 8007d1e:	441a      	add	r2, r3
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f7fe fe17 	bl	800695a <vListInsertEnd>
 8007d2c:	e005      	b.n	8007d3a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	3318      	adds	r3, #24
 8007d32:	4619      	mov	r1, r3
 8007d34:	480e      	ldr	r0, [pc, #56]	; (8007d70 <xTaskRemoveFromEventList+0xb8>)
 8007d36:	f7fe fe10 	bl	800695a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3e:	4b0d      	ldr	r3, [pc, #52]	; (8007d74 <xTaskRemoveFromEventList+0xbc>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d905      	bls.n	8007d54 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <xTaskRemoveFromEventList+0xc0>)
 8007d4e:	2201      	movs	r2, #1
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	e001      	b.n	8007d58 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007d54:	2300      	movs	r3, #0
 8007d56:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007d58:	697b      	ldr	r3, [r7, #20]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20000844 	.word	0x20000844
 8007d68:	20000824 	.word	0x20000824
 8007d6c:	20000720 	.word	0x20000720
 8007d70:	200007dc 	.word	0x200007dc
 8007d74:	2000071c 	.word	0x2000071c
 8007d78:	20000830 	.word	0x20000830

08007d7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d84:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <vTaskInternalSetTimeOutState+0x24>)
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d8c:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <vTaskInternalSetTimeOutState+0x28>)
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	605a      	str	r2, [r3, #4]
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bc80      	pop	{r7}
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000834 	.word	0x20000834
 8007da4:	20000820 	.word	0x20000820

08007da8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d109      	bne.n	8007dcc <xTaskCheckForTimeOut+0x24>
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	613b      	str	r3, [r7, #16]
 8007dca:	e7fe      	b.n	8007dca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <xTaskCheckForTimeOut+0x3e>
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	e7fe      	b.n	8007de4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007de6:	f000 fb17 	bl	8008418 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dea:	4b1d      	ldr	r3, [pc, #116]	; (8007e60 <xTaskCheckForTimeOut+0xb8>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e02:	d102      	bne.n	8007e0a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61fb      	str	r3, [r7, #28]
 8007e08:	e023      	b.n	8007e52 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	4b15      	ldr	r3, [pc, #84]	; (8007e64 <xTaskCheckForTimeOut+0xbc>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d007      	beq.n	8007e26 <xTaskCheckForTimeOut+0x7e>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d302      	bcc.n	8007e26 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e20:	2301      	movs	r3, #1
 8007e22:	61fb      	str	r3, [r7, #28]
 8007e24:	e015      	b.n	8007e52 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d20b      	bcs.n	8007e48 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	1ad2      	subs	r2, r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7ff ff9d 	bl	8007d7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e42:	2300      	movs	r3, #0
 8007e44:	61fb      	str	r3, [r7, #28]
 8007e46:	e004      	b.n	8007e52 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e52:	f000 fb0f 	bl	8008474 <vPortExitCritical>

	return xReturn;
 8007e56:	69fb      	ldr	r3, [r7, #28]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3720      	adds	r7, #32
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20000820 	.word	0x20000820
 8007e64:	20000834 	.word	0x20000834

08007e68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e6c:	4b03      	ldr	r3, [pc, #12]	; (8007e7c <vTaskMissedYield+0x14>)
 8007e6e:	2201      	movs	r2, #1
 8007e70:	601a      	str	r2, [r3, #0]
}
 8007e72:	bf00      	nop
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	20000830 	.word	0x20000830

08007e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e88:	f000 f852 	bl	8007f30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e8c:	4b06      	ldr	r3, [pc, #24]	; (8007ea8 <prvIdleTask+0x28>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d9f9      	bls.n	8007e88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <prvIdleTask+0x2c>)
 8007e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ea4:	e7f0      	b.n	8007e88 <prvIdleTask+0x8>
 8007ea6:	bf00      	nop
 8007ea8:	20000720 	.word	0x20000720
 8007eac:	e000ed04 	.word	0xe000ed04

08007eb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	607b      	str	r3, [r7, #4]
 8007eba:	e00c      	b.n	8007ed6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4a12      	ldr	r2, [pc, #72]	; (8007f10 <prvInitialiseTaskLists+0x60>)
 8007ec8:	4413      	add	r3, r2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fd1a 	bl	8006904 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	607b      	str	r3, [r7, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b06      	cmp	r3, #6
 8007eda:	d9ef      	bls.n	8007ebc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007edc:	480d      	ldr	r0, [pc, #52]	; (8007f14 <prvInitialiseTaskLists+0x64>)
 8007ede:	f7fe fd11 	bl	8006904 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ee2:	480d      	ldr	r0, [pc, #52]	; (8007f18 <prvInitialiseTaskLists+0x68>)
 8007ee4:	f7fe fd0e 	bl	8006904 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ee8:	480c      	ldr	r0, [pc, #48]	; (8007f1c <prvInitialiseTaskLists+0x6c>)
 8007eea:	f7fe fd0b 	bl	8006904 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007eee:	480c      	ldr	r0, [pc, #48]	; (8007f20 <prvInitialiseTaskLists+0x70>)
 8007ef0:	f7fe fd08 	bl	8006904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ef4:	480b      	ldr	r0, [pc, #44]	; (8007f24 <prvInitialiseTaskLists+0x74>)
 8007ef6:	f7fe fd05 	bl	8006904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007efa:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <prvInitialiseTaskLists+0x78>)
 8007efc:	4a05      	ldr	r2, [pc, #20]	; (8007f14 <prvInitialiseTaskLists+0x64>)
 8007efe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f00:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <prvInitialiseTaskLists+0x7c>)
 8007f02:	4a05      	ldr	r2, [pc, #20]	; (8007f18 <prvInitialiseTaskLists+0x68>)
 8007f04:	601a      	str	r2, [r3, #0]
}
 8007f06:	bf00      	nop
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000720 	.word	0x20000720
 8007f14:	200007ac 	.word	0x200007ac
 8007f18:	200007c0 	.word	0x200007c0
 8007f1c:	200007dc 	.word	0x200007dc
 8007f20:	200007f0 	.word	0x200007f0
 8007f24:	20000808 	.word	0x20000808
 8007f28:	200007d4 	.word	0x200007d4
 8007f2c:	200007d8 	.word	0x200007d8

08007f30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f36:	e019      	b.n	8007f6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f38:	f000 fa6e 	bl	8008418 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007f3c:	4b0f      	ldr	r3, [pc, #60]	; (8007f7c <prvCheckTasksWaitingTermination+0x4c>)
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3304      	adds	r3, #4
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fe fd61 	bl	8006a10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f4e:	4b0c      	ldr	r3, [pc, #48]	; (8007f80 <prvCheckTasksWaitingTermination+0x50>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	4a0a      	ldr	r2, [pc, #40]	; (8007f80 <prvCheckTasksWaitingTermination+0x50>)
 8007f56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f58:	4b0a      	ldr	r3, [pc, #40]	; (8007f84 <prvCheckTasksWaitingTermination+0x54>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	4a09      	ldr	r2, [pc, #36]	; (8007f84 <prvCheckTasksWaitingTermination+0x54>)
 8007f60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f62:	f000 fa87 	bl	8008474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f80e 	bl	8007f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f6c:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <prvCheckTasksWaitingTermination+0x54>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e1      	bne.n	8007f38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f74:	bf00      	nop
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	200007f0 	.word	0x200007f0
 8007f80:	2000081c 	.word	0x2000081c
 8007f84:	20000804 	.word	0x20000804

08007f88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d108      	bne.n	8007fac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fbf2 	bl	8008788 <vPortFree>
				vPortFree( pxTCB );
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fbef 	bl	8008788 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007faa:	e017      	b.n	8007fdc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d103      	bne.n	8007fbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fbe6 	bl	8008788 <vPortFree>
	}
 8007fbc:	e00e      	b.n	8007fdc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d009      	beq.n	8007fdc <prvDeleteTCB+0x54>
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	60fb      	str	r3, [r7, #12]
 8007fda:	e7fe      	b.n	8007fda <prvDeleteTCB+0x52>
	}
 8007fdc:	bf00      	nop
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fea:	4b0e      	ldr	r3, [pc, #56]	; (8008024 <prvResetNextTaskUnblockTime+0x40>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <prvResetNextTaskUnblockTime+0x14>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e000      	b.n	8007ffa <prvResetNextTaskUnblockTime+0x16>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d004      	beq.n	8008008 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ffe:	4b0a      	ldr	r3, [pc, #40]	; (8008028 <prvResetNextTaskUnblockTime+0x44>)
 8008000:	f04f 32ff 	mov.w	r2, #4294967295
 8008004:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008006:	e008      	b.n	800801a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008008:	4b06      	ldr	r3, [pc, #24]	; (8008024 <prvResetNextTaskUnblockTime+0x40>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	4a04      	ldr	r2, [pc, #16]	; (8008028 <prvResetNextTaskUnblockTime+0x44>)
 8008018:	6013      	str	r3, [r2, #0]
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	bc80      	pop	{r7}
 8008022:	4770      	bx	lr
 8008024:	200007d4 	.word	0x200007d4
 8008028:	2000083c 	.word	0x2000083c

0800802c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008032:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <xTaskGetSchedulerState+0x34>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d102      	bne.n	8008040 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800803a:	2301      	movs	r3, #1
 800803c:	607b      	str	r3, [r7, #4]
 800803e:	e008      	b.n	8008052 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008040:	4b08      	ldr	r3, [pc, #32]	; (8008064 <xTaskGetSchedulerState+0x38>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d102      	bne.n	800804e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008048:	2302      	movs	r3, #2
 800804a:	607b      	str	r3, [r7, #4]
 800804c:	e001      	b.n	8008052 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800804e:	2300      	movs	r3, #0
 8008050:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008052:	687b      	ldr	r3, [r7, #4]
	}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	20000828 	.word	0x20000828
 8008064:	20000844 	.word	0x20000844

08008068 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d06c      	beq.n	8008158 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800807e:	4b39      	ldr	r3, [pc, #228]	; (8008164 <xTaskPriorityDisinherit+0xfc>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	429a      	cmp	r2, r3
 8008086:	d009      	beq.n	800809c <xTaskPriorityDisinherit+0x34>
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	e7fe      	b.n	800809a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d109      	bne.n	80080b8 <xTaskPriorityDisinherit+0x50>
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	60bb      	str	r3, [r7, #8]
 80080b6:	e7fe      	b.n	80080b6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080bc:	1e5a      	subs	r2, r3, #1
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d044      	beq.n	8008158 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d140      	bne.n	8008158 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	3304      	adds	r3, #4
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe fc98 	bl	8006a10 <uxListRemove>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d115      	bne.n	8008112 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ea:	491f      	ldr	r1, [pc, #124]	; (8008168 <xTaskPriorityDisinherit+0x100>)
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	440b      	add	r3, r1
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10a      	bne.n	8008112 <xTaskPriorityDisinherit+0xaa>
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	2201      	movs	r2, #1
 8008102:	fa02 f303 	lsl.w	r3, r2, r3
 8008106:	43da      	mvns	r2, r3
 8008108:	4b18      	ldr	r3, [pc, #96]	; (800816c <xTaskPriorityDisinherit+0x104>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4013      	ands	r3, r2
 800810e:	4a17      	ldr	r2, [pc, #92]	; (800816c <xTaskPriorityDisinherit+0x104>)
 8008110:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811e:	f1c3 0207 	rsb	r2, r3, #7
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	2201      	movs	r2, #1
 800812c:	409a      	lsls	r2, r3
 800812e:	4b0f      	ldr	r3, [pc, #60]	; (800816c <xTaskPriorityDisinherit+0x104>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4313      	orrs	r3, r2
 8008134:	4a0d      	ldr	r2, [pc, #52]	; (800816c <xTaskPriorityDisinherit+0x104>)
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4a08      	ldr	r2, [pc, #32]	; (8008168 <xTaskPriorityDisinherit+0x100>)
 8008146:	441a      	add	r2, r3
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	3304      	adds	r3, #4
 800814c:	4619      	mov	r1, r3
 800814e:	4610      	mov	r0, r2
 8008150:	f7fe fc03 	bl	800695a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008154:	2301      	movs	r3, #1
 8008156:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008158:	697b      	ldr	r3, [r7, #20]
	}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	2000071c 	.word	0x2000071c
 8008168:	20000720 	.word	0x20000720
 800816c:	20000824 	.word	0x20000824

08008170 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800817a:	4b29      	ldr	r3, [pc, #164]	; (8008220 <prvAddCurrentTaskToDelayedList+0xb0>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008180:	4b28      	ldr	r3, [pc, #160]	; (8008224 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3304      	adds	r3, #4
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe fc42 	bl	8006a10 <uxListRemove>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10b      	bne.n	80081aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008192:	4b24      	ldr	r3, [pc, #144]	; (8008224 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	2201      	movs	r2, #1
 800819a:	fa02 f303 	lsl.w	r3, r2, r3
 800819e:	43da      	mvns	r2, r3
 80081a0:	4b21      	ldr	r3, [pc, #132]	; (8008228 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4013      	ands	r3, r2
 80081a6:	4a20      	ldr	r2, [pc, #128]	; (8008228 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b0:	d10a      	bne.n	80081c8 <prvAddCurrentTaskToDelayedList+0x58>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d007      	beq.n	80081c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081b8:	4b1a      	ldr	r3, [pc, #104]	; (8008224 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3304      	adds	r3, #4
 80081be:	4619      	mov	r1, r3
 80081c0:	481a      	ldr	r0, [pc, #104]	; (800822c <prvAddCurrentTaskToDelayedList+0xbc>)
 80081c2:	f7fe fbca 	bl	800695a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081c6:	e026      	b.n	8008216 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4413      	add	r3, r2
 80081ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081d0:	4b14      	ldr	r3, [pc, #80]	; (8008224 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d209      	bcs.n	80081f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081e0:	4b13      	ldr	r3, [pc, #76]	; (8008230 <prvAddCurrentTaskToDelayedList+0xc0>)
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	4b0f      	ldr	r3, [pc, #60]	; (8008224 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3304      	adds	r3, #4
 80081ea:	4619      	mov	r1, r3
 80081ec:	4610      	mov	r0, r2
 80081ee:	f7fe fbd7 	bl	80069a0 <vListInsert>
}
 80081f2:	e010      	b.n	8008216 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081f4:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <prvAddCurrentTaskToDelayedList+0xc4>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	4b0a      	ldr	r3, [pc, #40]	; (8008224 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3304      	adds	r3, #4
 80081fe:	4619      	mov	r1, r3
 8008200:	4610      	mov	r0, r2
 8008202:	f7fe fbcd 	bl	80069a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008206:	4b0c      	ldr	r3, [pc, #48]	; (8008238 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	429a      	cmp	r2, r3
 800820e:	d202      	bcs.n	8008216 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008210:	4a09      	ldr	r2, [pc, #36]	; (8008238 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	6013      	str	r3, [r2, #0]
}
 8008216:	bf00      	nop
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	20000820 	.word	0x20000820
 8008224:	2000071c 	.word	0x2000071c
 8008228:	20000824 	.word	0x20000824
 800822c:	20000808 	.word	0x20000808
 8008230:	200007d8 	.word	0x200007d8
 8008234:	200007d4 	.word	0x200007d4
 8008238:	2000083c 	.word	0x2000083c

0800823c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3b04      	subs	r3, #4
 800824c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3b04      	subs	r3, #4
 800825a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f023 0201 	bic.w	r2, r3, #1
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3b04      	subs	r3, #4
 800826a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800826c:	4a08      	ldr	r2, [pc, #32]	; (8008290 <pxPortInitialiseStack+0x54>)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3b14      	subs	r3, #20
 8008276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3b20      	subs	r3, #32
 8008282:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008284:	68fb      	ldr	r3, [r7, #12]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	bc80      	pop	{r7}
 800828e:	4770      	bx	lr
 8008290:	08008295 	.word	0x08008295

08008294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800829a:	2300      	movs	r3, #0
 800829c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800829e:	4b10      	ldr	r3, [pc, #64]	; (80082e0 <prvTaskExitError+0x4c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a6:	d009      	beq.n	80082bc <prvTaskExitError+0x28>
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	60fb      	str	r3, [r7, #12]
 80082ba:	e7fe      	b.n	80082ba <prvTaskExitError+0x26>
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082ce:	bf00      	nop
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d0fc      	beq.n	80082d0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082d6:	bf00      	nop
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	bc80      	pop	{r7}
 80082de:	4770      	bx	lr
 80082e0:	20000020 	.word	0x20000020
	...

080082f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082f0:	4b07      	ldr	r3, [pc, #28]	; (8008310 <pxCurrentTCBConst2>)
 80082f2:	6819      	ldr	r1, [r3, #0]
 80082f4:	6808      	ldr	r0, [r1, #0]
 80082f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80082fa:	f380 8809 	msr	PSP, r0
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f04f 0000 	mov.w	r0, #0
 8008306:	f380 8811 	msr	BASEPRI, r0
 800830a:	f04e 0e0d 	orr.w	lr, lr, #13
 800830e:	4770      	bx	lr

08008310 <pxCurrentTCBConst2>:
 8008310:	2000071c 	.word	0x2000071c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop

08008318 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008318:	4806      	ldr	r0, [pc, #24]	; (8008334 <prvPortStartFirstTask+0x1c>)
 800831a:	6800      	ldr	r0, [r0, #0]
 800831c:	6800      	ldr	r0, [r0, #0]
 800831e:	f380 8808 	msr	MSP, r0
 8008322:	b662      	cpsie	i
 8008324:	b661      	cpsie	f
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	df00      	svc	0
 8008330:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008332:	bf00      	nop
 8008334:	e000ed08 	.word	0xe000ed08

08008338 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800833e:	4b31      	ldr	r3, [pc, #196]	; (8008404 <xPortStartScheduler+0xcc>)
 8008340:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	b2db      	uxtb	r3, r3
 8008348:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	22ff      	movs	r2, #255	; 0xff
 800834e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008358:	78fb      	ldrb	r3, [r7, #3]
 800835a:	b2db      	uxtb	r3, r3
 800835c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008360:	b2da      	uxtb	r2, r3
 8008362:	4b29      	ldr	r3, [pc, #164]	; (8008408 <xPortStartScheduler+0xd0>)
 8008364:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008366:	4b29      	ldr	r3, [pc, #164]	; (800840c <xPortStartScheduler+0xd4>)
 8008368:	2207      	movs	r2, #7
 800836a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800836c:	e009      	b.n	8008382 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800836e:	4b27      	ldr	r3, [pc, #156]	; (800840c <xPortStartScheduler+0xd4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3b01      	subs	r3, #1
 8008374:	4a25      	ldr	r2, [pc, #148]	; (800840c <xPortStartScheduler+0xd4>)
 8008376:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008378:	78fb      	ldrb	r3, [r7, #3]
 800837a:	b2db      	uxtb	r3, r3
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	b2db      	uxtb	r3, r3
 8008380:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	b2db      	uxtb	r3, r3
 8008386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800838a:	2b80      	cmp	r3, #128	; 0x80
 800838c:	d0ef      	beq.n	800836e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800838e:	4b1f      	ldr	r3, [pc, #124]	; (800840c <xPortStartScheduler+0xd4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f1c3 0307 	rsb	r3, r3, #7
 8008396:	2b04      	cmp	r3, #4
 8008398:	d009      	beq.n	80083ae <xPortStartScheduler+0x76>
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	60bb      	str	r3, [r7, #8]
 80083ac:	e7fe      	b.n	80083ac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083ae:	4b17      	ldr	r3, [pc, #92]	; (800840c <xPortStartScheduler+0xd4>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	4a15      	ldr	r2, [pc, #84]	; (800840c <xPortStartScheduler+0xd4>)
 80083b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083b8:	4b14      	ldr	r3, [pc, #80]	; (800840c <xPortStartScheduler+0xd4>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083c0:	4a12      	ldr	r2, [pc, #72]	; (800840c <xPortStartScheduler+0xd4>)
 80083c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083cc:	4b10      	ldr	r3, [pc, #64]	; (8008410 <xPortStartScheduler+0xd8>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a0f      	ldr	r2, [pc, #60]	; (8008410 <xPortStartScheduler+0xd8>)
 80083d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083d8:	4b0d      	ldr	r3, [pc, #52]	; (8008410 <xPortStartScheduler+0xd8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a0c      	ldr	r2, [pc, #48]	; (8008410 <xPortStartScheduler+0xd8>)
 80083de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80083e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083e4:	f000 f8b0 	bl	8008548 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083e8:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <xPortStartScheduler+0xdc>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083ee:	f7ff ff93 	bl	8008318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083f2:	f7ff fbe3 	bl	8007bbc <vTaskSwitchContext>
	prvTaskExitError();
 80083f6:	f7ff ff4d 	bl	8008294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	e000e400 	.word	0xe000e400
 8008408:	20000848 	.word	0x20000848
 800840c:	2000084c 	.word	0x2000084c
 8008410:	e000ed20 	.word	0xe000ed20
 8008414:	20000020 	.word	0x20000020

08008418 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008430:	4b0e      	ldr	r3, [pc, #56]	; (800846c <vPortEnterCritical+0x54>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3301      	adds	r3, #1
 8008436:	4a0d      	ldr	r2, [pc, #52]	; (800846c <vPortEnterCritical+0x54>)
 8008438:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800843a:	4b0c      	ldr	r3, [pc, #48]	; (800846c <vPortEnterCritical+0x54>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d10e      	bne.n	8008460 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008442:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <vPortEnterCritical+0x58>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d009      	beq.n	8008460 <vPortEnterCritical+0x48>
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	603b      	str	r3, [r7, #0]
 800845e:	e7fe      	b.n	800845e <vPortEnterCritical+0x46>
	}
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	20000020 	.word	0x20000020
 8008470:	e000ed04 	.word	0xe000ed04

08008474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800847a:	4b10      	ldr	r3, [pc, #64]	; (80084bc <vPortExitCritical+0x48>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d109      	bne.n	8008496 <vPortExitCritical+0x22>
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	607b      	str	r3, [r7, #4]
 8008494:	e7fe      	b.n	8008494 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008496:	4b09      	ldr	r3, [pc, #36]	; (80084bc <vPortExitCritical+0x48>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3b01      	subs	r3, #1
 800849c:	4a07      	ldr	r2, [pc, #28]	; (80084bc <vPortExitCritical+0x48>)
 800849e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084a0:	4b06      	ldr	r3, [pc, #24]	; (80084bc <vPortExitCritical+0x48>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d104      	bne.n	80084b2 <vPortExitCritical+0x3e>
 80084a8:	2300      	movs	r3, #0
 80084aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80084b2:	bf00      	nop
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bc80      	pop	{r7}
 80084ba:	4770      	bx	lr
 80084bc:	20000020 	.word	0x20000020

080084c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084c0:	f3ef 8009 	mrs	r0, PSP
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	4b0d      	ldr	r3, [pc, #52]	; (8008500 <pxCurrentTCBConst>)
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084d0:	6010      	str	r0, [r2, #0]
 80084d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80084d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80084da:	f380 8811 	msr	BASEPRI, r0
 80084de:	f7ff fb6d 	bl	8007bbc <vTaskSwitchContext>
 80084e2:	f04f 0000 	mov.w	r0, #0
 80084e6:	f380 8811 	msr	BASEPRI, r0
 80084ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80084ee:	6819      	ldr	r1, [r3, #0]
 80084f0:	6808      	ldr	r0, [r1, #0]
 80084f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084f6:	f380 8809 	msr	PSP, r0
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	4770      	bx	lr

08008500 <pxCurrentTCBConst>:
 8008500:	2000071c 	.word	0x2000071c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop

08008508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008520:	f7ff fa90 	bl	8007a44 <xTaskIncrementTick>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800852a:	4b06      	ldr	r3, [pc, #24]	; (8008544 <xPortSysTickHandler+0x3c>)
 800852c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	2300      	movs	r3, #0
 8008534:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	e000ed04 	.word	0xe000ed04

08008548 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800854c:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <vPortSetupTimerInterrupt+0x30>)
 800854e:	2200      	movs	r2, #0
 8008550:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008552:	4b0a      	ldr	r3, [pc, #40]	; (800857c <vPortSetupTimerInterrupt+0x34>)
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008558:	4b09      	ldr	r3, [pc, #36]	; (8008580 <vPortSetupTimerInterrupt+0x38>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a09      	ldr	r2, [pc, #36]	; (8008584 <vPortSetupTimerInterrupt+0x3c>)
 800855e:	fba2 2303 	umull	r2, r3, r2, r3
 8008562:	099b      	lsrs	r3, r3, #6
 8008564:	4a08      	ldr	r2, [pc, #32]	; (8008588 <vPortSetupTimerInterrupt+0x40>)
 8008566:	3b01      	subs	r3, #1
 8008568:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800856a:	4b03      	ldr	r3, [pc, #12]	; (8008578 <vPortSetupTimerInterrupt+0x30>)
 800856c:	2207      	movs	r2, #7
 800856e:	601a      	str	r2, [r3, #0]
}
 8008570:	bf00      	nop
 8008572:	46bd      	mov	sp, r7
 8008574:	bc80      	pop	{r7}
 8008576:	4770      	bx	lr
 8008578:	e000e010 	.word	0xe000e010
 800857c:	e000e018 	.word	0xe000e018
 8008580:	20000014 	.word	0x20000014
 8008584:	10624dd3 	.word	0x10624dd3
 8008588:	e000e014 	.word	0xe000e014

0800858c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008592:	f3ef 8305 	mrs	r3, IPSR
 8008596:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2b0f      	cmp	r3, #15
 800859c:	d913      	bls.n	80085c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800859e:	4a15      	ldr	r2, [pc, #84]	; (80085f4 <vPortValidateInterruptPriority+0x68>)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80085a8:	4b13      	ldr	r3, [pc, #76]	; (80085f8 <vPortValidateInterruptPriority+0x6c>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	7afa      	ldrb	r2, [r7, #11]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d209      	bcs.n	80085c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	607b      	str	r3, [r7, #4]
 80085c4:	e7fe      	b.n	80085c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085c6:	4b0d      	ldr	r3, [pc, #52]	; (80085fc <vPortValidateInterruptPriority+0x70>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085ce:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <vPortValidateInterruptPriority+0x74>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d909      	bls.n	80085ea <vPortValidateInterruptPriority+0x5e>
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	603b      	str	r3, [r7, #0]
 80085e8:	e7fe      	b.n	80085e8 <vPortValidateInterruptPriority+0x5c>
	}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc80      	pop	{r7}
 80085f2:	4770      	bx	lr
 80085f4:	e000e3f0 	.word	0xe000e3f0
 80085f8:	20000848 	.word	0x20000848
 80085fc:	e000ed0c 	.word	0xe000ed0c
 8008600:	2000084c 	.word	0x2000084c

08008604 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b08a      	sub	sp, #40	; 0x28
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800860c:	2300      	movs	r3, #0
 800860e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008610:	f7ff f96e 	bl	80078f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008614:	4b57      	ldr	r3, [pc, #348]	; (8008774 <pvPortMalloc+0x170>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800861c:	f000 f90c 	bl	8008838 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008620:	4b55      	ldr	r3, [pc, #340]	; (8008778 <pvPortMalloc+0x174>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4013      	ands	r3, r2
 8008628:	2b00      	cmp	r3, #0
 800862a:	f040 808c 	bne.w	8008746 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01c      	beq.n	800866e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008634:	2208      	movs	r2, #8
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4413      	add	r3, r2
 800863a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f003 0307 	and.w	r3, r3, #7
 8008642:	2b00      	cmp	r3, #0
 8008644:	d013      	beq.n	800866e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f023 0307 	bic.w	r3, r3, #7
 800864c:	3308      	adds	r3, #8
 800864e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f003 0307 	and.w	r3, r3, #7
 8008656:	2b00      	cmp	r3, #0
 8008658:	d009      	beq.n	800866e <pvPortMalloc+0x6a>
 800865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	e7fe      	b.n	800866c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d068      	beq.n	8008746 <pvPortMalloc+0x142>
 8008674:	4b41      	ldr	r3, [pc, #260]	; (800877c <pvPortMalloc+0x178>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	429a      	cmp	r2, r3
 800867c:	d863      	bhi.n	8008746 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800867e:	4b40      	ldr	r3, [pc, #256]	; (8008780 <pvPortMalloc+0x17c>)
 8008680:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008682:	4b3f      	ldr	r3, [pc, #252]	; (8008780 <pvPortMalloc+0x17c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008688:	e004      	b.n	8008694 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	429a      	cmp	r2, r3
 800869c:	d903      	bls.n	80086a6 <pvPortMalloc+0xa2>
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1f1      	bne.n	800868a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086a6:	4b33      	ldr	r3, [pc, #204]	; (8008774 <pvPortMalloc+0x170>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d04a      	beq.n	8008746 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2208      	movs	r2, #8
 80086b6:	4413      	add	r3, r2
 80086b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	1ad2      	subs	r2, r2, r3
 80086ca:	2308      	movs	r3, #8
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d91e      	bls.n	8008710 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4413      	add	r3, r2
 80086d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d009      	beq.n	80086f8 <pvPortMalloc+0xf4>
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	613b      	str	r3, [r7, #16]
 80086f6:	e7fe      	b.n	80086f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	1ad2      	subs	r2, r2, r3
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800870a:	69b8      	ldr	r0, [r7, #24]
 800870c:	f000 f8f6 	bl	80088fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008710:	4b1a      	ldr	r3, [pc, #104]	; (800877c <pvPortMalloc+0x178>)
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	4a18      	ldr	r2, [pc, #96]	; (800877c <pvPortMalloc+0x178>)
 800871c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800871e:	4b17      	ldr	r3, [pc, #92]	; (800877c <pvPortMalloc+0x178>)
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	4b18      	ldr	r3, [pc, #96]	; (8008784 <pvPortMalloc+0x180>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d203      	bcs.n	8008732 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800872a:	4b14      	ldr	r3, [pc, #80]	; (800877c <pvPortMalloc+0x178>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a15      	ldr	r2, [pc, #84]	; (8008784 <pvPortMalloc+0x180>)
 8008730:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	4b10      	ldr	r3, [pc, #64]	; (8008778 <pvPortMalloc+0x174>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	431a      	orrs	r2, r3
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008746:	f7ff f8e1 	bl	800790c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	f003 0307 	and.w	r3, r3, #7
 8008750:	2b00      	cmp	r3, #0
 8008752:	d009      	beq.n	8008768 <pvPortMalloc+0x164>
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	e7fe      	b.n	8008766 <pvPortMalloc+0x162>
	return pvReturn;
 8008768:	69fb      	ldr	r3, [r7, #28]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3728      	adds	r7, #40	; 0x28
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20001458 	.word	0x20001458
 8008778:	20001464 	.word	0x20001464
 800877c:	2000145c 	.word	0x2000145c
 8008780:	20001450 	.word	0x20001450
 8008784:	20001460 	.word	0x20001460

08008788 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d046      	beq.n	8008828 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800879a:	2308      	movs	r3, #8
 800879c:	425b      	negs	r3, r3
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	4413      	add	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	4b20      	ldr	r3, [pc, #128]	; (8008830 <vPortFree+0xa8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4013      	ands	r3, r2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <vPortFree+0x42>
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	e7fe      	b.n	80087c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d009      	beq.n	80087e6 <vPortFree+0x5e>
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60bb      	str	r3, [r7, #8]
 80087e4:	e7fe      	b.n	80087e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	4b11      	ldr	r3, [pc, #68]	; (8008830 <vPortFree+0xa8>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4013      	ands	r3, r2
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d019      	beq.n	8008828 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d115      	bne.n	8008828 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	4b0b      	ldr	r3, [pc, #44]	; (8008830 <vPortFree+0xa8>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	43db      	mvns	r3, r3
 8008806:	401a      	ands	r2, r3
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800880c:	f7ff f870 	bl	80078f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	4b07      	ldr	r3, [pc, #28]	; (8008834 <vPortFree+0xac>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4413      	add	r3, r2
 800881a:	4a06      	ldr	r2, [pc, #24]	; (8008834 <vPortFree+0xac>)
 800881c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800881e:	6938      	ldr	r0, [r7, #16]
 8008820:	f000 f86c 	bl	80088fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008824:	f7ff f872 	bl	800790c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008828:	bf00      	nop
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	20001464 	.word	0x20001464
 8008834:	2000145c 	.word	0x2000145c

08008838 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800883e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008842:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008844:	4b27      	ldr	r3, [pc, #156]	; (80088e4 <prvHeapInit+0xac>)
 8008846:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00c      	beq.n	800886c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3307      	adds	r3, #7
 8008856:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0307 	bic.w	r3, r3, #7
 800885e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	4a1f      	ldr	r2, [pc, #124]	; (80088e4 <prvHeapInit+0xac>)
 8008868:	4413      	add	r3, r2
 800886a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008870:	4a1d      	ldr	r2, [pc, #116]	; (80088e8 <prvHeapInit+0xb0>)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008876:	4b1c      	ldr	r3, [pc, #112]	; (80088e8 <prvHeapInit+0xb0>)
 8008878:	2200      	movs	r2, #0
 800887a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	4413      	add	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008884:	2208      	movs	r2, #8
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	1a9b      	subs	r3, r3, r2
 800888a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f023 0307 	bic.w	r3, r3, #7
 8008892:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4a15      	ldr	r2, [pc, #84]	; (80088ec <prvHeapInit+0xb4>)
 8008898:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800889a:	4b14      	ldr	r3, [pc, #80]	; (80088ec <prvHeapInit+0xb4>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2200      	movs	r2, #0
 80088a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088a2:	4b12      	ldr	r3, [pc, #72]	; (80088ec <prvHeapInit+0xb4>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2200      	movs	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	1ad2      	subs	r2, r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088b8:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <prvHeapInit+0xb4>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	4a0a      	ldr	r2, [pc, #40]	; (80088f0 <prvHeapInit+0xb8>)
 80088c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	4a09      	ldr	r2, [pc, #36]	; (80088f4 <prvHeapInit+0xbc>)
 80088ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088d0:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <prvHeapInit+0xc0>)
 80088d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80088d6:	601a      	str	r2, [r3, #0]
}
 80088d8:	bf00      	nop
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	20000850 	.word	0x20000850
 80088e8:	20001450 	.word	0x20001450
 80088ec:	20001458 	.word	0x20001458
 80088f0:	20001460 	.word	0x20001460
 80088f4:	2000145c 	.word	0x2000145c
 80088f8:	20001464 	.word	0x20001464

080088fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008904:	4b27      	ldr	r3, [pc, #156]	; (80089a4 <prvInsertBlockIntoFreeList+0xa8>)
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	e002      	b.n	8008910 <prvInsertBlockIntoFreeList+0x14>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	429a      	cmp	r2, r3
 8008918:	d8f7      	bhi.n	800890a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	4413      	add	r3, r2
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	429a      	cmp	r2, r3
 800892a:	d108      	bne.n	800893e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	441a      	add	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	441a      	add	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	429a      	cmp	r2, r3
 8008950:	d118      	bne.n	8008984 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <prvInsertBlockIntoFreeList+0xac>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	d00d      	beq.n	800897a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	441a      	add	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	e008      	b.n	800898c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800897a:	4b0b      	ldr	r3, [pc, #44]	; (80089a8 <prvInsertBlockIntoFreeList+0xac>)
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	e003      	b.n	800898c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	d002      	beq.n	800899a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800899a:	bf00      	nop
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	bc80      	pop	{r7}
 80089a2:	4770      	bx	lr
 80089a4:	20001450 	.word	0x20001450
 80089a8:	20001458 	.word	0x20001458

080089ac <__errno>:
 80089ac:	4b01      	ldr	r3, [pc, #4]	; (80089b4 <__errno+0x8>)
 80089ae:	6818      	ldr	r0, [r3, #0]
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20000024 	.word	0x20000024

080089b8 <__libc_init_array>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	2500      	movs	r5, #0
 80089bc:	4e0c      	ldr	r6, [pc, #48]	; (80089f0 <__libc_init_array+0x38>)
 80089be:	4c0d      	ldr	r4, [pc, #52]	; (80089f4 <__libc_init_array+0x3c>)
 80089c0:	1ba4      	subs	r4, r4, r6
 80089c2:	10a4      	asrs	r4, r4, #2
 80089c4:	42a5      	cmp	r5, r4
 80089c6:	d109      	bne.n	80089dc <__libc_init_array+0x24>
 80089c8:	f001 fc5e 	bl	800a288 <_init>
 80089cc:	2500      	movs	r5, #0
 80089ce:	4e0a      	ldr	r6, [pc, #40]	; (80089f8 <__libc_init_array+0x40>)
 80089d0:	4c0a      	ldr	r4, [pc, #40]	; (80089fc <__libc_init_array+0x44>)
 80089d2:	1ba4      	subs	r4, r4, r6
 80089d4:	10a4      	asrs	r4, r4, #2
 80089d6:	42a5      	cmp	r5, r4
 80089d8:	d105      	bne.n	80089e6 <__libc_init_array+0x2e>
 80089da:	bd70      	pop	{r4, r5, r6, pc}
 80089dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089e0:	4798      	blx	r3
 80089e2:	3501      	adds	r5, #1
 80089e4:	e7ee      	b.n	80089c4 <__libc_init_array+0xc>
 80089e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089ea:	4798      	blx	r3
 80089ec:	3501      	adds	r5, #1
 80089ee:	e7f2      	b.n	80089d6 <__libc_init_array+0x1e>
 80089f0:	0800c2f8 	.word	0x0800c2f8
 80089f4:	0800c2f8 	.word	0x0800c2f8
 80089f8:	0800c2f8 	.word	0x0800c2f8
 80089fc:	0800c2fc 	.word	0x0800c2fc

08008a00 <malloc>:
 8008a00:	4b02      	ldr	r3, [pc, #8]	; (8008a0c <malloc+0xc>)
 8008a02:	4601      	mov	r1, r0
 8008a04:	6818      	ldr	r0, [r3, #0]
 8008a06:	f000 b863 	b.w	8008ad0 <_malloc_r>
 8008a0a:	bf00      	nop
 8008a0c:	20000024 	.word	0x20000024

08008a10 <memcpy>:
 8008a10:	b510      	push	{r4, lr}
 8008a12:	1e43      	subs	r3, r0, #1
 8008a14:	440a      	add	r2, r1
 8008a16:	4291      	cmp	r1, r2
 8008a18:	d100      	bne.n	8008a1c <memcpy+0xc>
 8008a1a:	bd10      	pop	{r4, pc}
 8008a1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a24:	e7f7      	b.n	8008a16 <memcpy+0x6>

08008a26 <memset>:
 8008a26:	4603      	mov	r3, r0
 8008a28:	4402      	add	r2, r0
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d100      	bne.n	8008a30 <memset+0xa>
 8008a2e:	4770      	bx	lr
 8008a30:	f803 1b01 	strb.w	r1, [r3], #1
 8008a34:	e7f9      	b.n	8008a2a <memset+0x4>
	...

08008a38 <_free_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	2900      	cmp	r1, #0
 8008a3e:	d043      	beq.n	8008ac8 <_free_r+0x90>
 8008a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a44:	1f0c      	subs	r4, r1, #4
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	bfb8      	it	lt
 8008a4a:	18e4      	addlt	r4, r4, r3
 8008a4c:	f000 f8ca 	bl	8008be4 <__malloc_lock>
 8008a50:	4a1e      	ldr	r2, [pc, #120]	; (8008acc <_free_r+0x94>)
 8008a52:	6813      	ldr	r3, [r2, #0]
 8008a54:	4610      	mov	r0, r2
 8008a56:	b933      	cbnz	r3, 8008a66 <_free_r+0x2e>
 8008a58:	6063      	str	r3, [r4, #4]
 8008a5a:	6014      	str	r4, [r2, #0]
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a62:	f000 b8c0 	b.w	8008be6 <__malloc_unlock>
 8008a66:	42a3      	cmp	r3, r4
 8008a68:	d90b      	bls.n	8008a82 <_free_r+0x4a>
 8008a6a:	6821      	ldr	r1, [r4, #0]
 8008a6c:	1862      	adds	r2, r4, r1
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	bf01      	itttt	eq
 8008a72:	681a      	ldreq	r2, [r3, #0]
 8008a74:	685b      	ldreq	r3, [r3, #4]
 8008a76:	1852      	addeq	r2, r2, r1
 8008a78:	6022      	streq	r2, [r4, #0]
 8008a7a:	6063      	str	r3, [r4, #4]
 8008a7c:	6004      	str	r4, [r0, #0]
 8008a7e:	e7ed      	b.n	8008a5c <_free_r+0x24>
 8008a80:	4613      	mov	r3, r2
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	b10a      	cbz	r2, 8008a8a <_free_r+0x52>
 8008a86:	42a2      	cmp	r2, r4
 8008a88:	d9fa      	bls.n	8008a80 <_free_r+0x48>
 8008a8a:	6819      	ldr	r1, [r3, #0]
 8008a8c:	1858      	adds	r0, r3, r1
 8008a8e:	42a0      	cmp	r0, r4
 8008a90:	d10b      	bne.n	8008aaa <_free_r+0x72>
 8008a92:	6820      	ldr	r0, [r4, #0]
 8008a94:	4401      	add	r1, r0
 8008a96:	1858      	adds	r0, r3, r1
 8008a98:	4282      	cmp	r2, r0
 8008a9a:	6019      	str	r1, [r3, #0]
 8008a9c:	d1de      	bne.n	8008a5c <_free_r+0x24>
 8008a9e:	6810      	ldr	r0, [r2, #0]
 8008aa0:	6852      	ldr	r2, [r2, #4]
 8008aa2:	4401      	add	r1, r0
 8008aa4:	6019      	str	r1, [r3, #0]
 8008aa6:	605a      	str	r2, [r3, #4]
 8008aa8:	e7d8      	b.n	8008a5c <_free_r+0x24>
 8008aaa:	d902      	bls.n	8008ab2 <_free_r+0x7a>
 8008aac:	230c      	movs	r3, #12
 8008aae:	602b      	str	r3, [r5, #0]
 8008ab0:	e7d4      	b.n	8008a5c <_free_r+0x24>
 8008ab2:	6820      	ldr	r0, [r4, #0]
 8008ab4:	1821      	adds	r1, r4, r0
 8008ab6:	428a      	cmp	r2, r1
 8008ab8:	bf01      	itttt	eq
 8008aba:	6811      	ldreq	r1, [r2, #0]
 8008abc:	6852      	ldreq	r2, [r2, #4]
 8008abe:	1809      	addeq	r1, r1, r0
 8008ac0:	6021      	streq	r1, [r4, #0]
 8008ac2:	6062      	str	r2, [r4, #4]
 8008ac4:	605c      	str	r4, [r3, #4]
 8008ac6:	e7c9      	b.n	8008a5c <_free_r+0x24>
 8008ac8:	bd38      	pop	{r3, r4, r5, pc}
 8008aca:	bf00      	nop
 8008acc:	20001468 	.word	0x20001468

08008ad0 <_malloc_r>:
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	1ccd      	adds	r5, r1, #3
 8008ad4:	f025 0503 	bic.w	r5, r5, #3
 8008ad8:	3508      	adds	r5, #8
 8008ada:	2d0c      	cmp	r5, #12
 8008adc:	bf38      	it	cc
 8008ade:	250c      	movcc	r5, #12
 8008ae0:	2d00      	cmp	r5, #0
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	db01      	blt.n	8008aea <_malloc_r+0x1a>
 8008ae6:	42a9      	cmp	r1, r5
 8008ae8:	d903      	bls.n	8008af2 <_malloc_r+0x22>
 8008aea:	230c      	movs	r3, #12
 8008aec:	6033      	str	r3, [r6, #0]
 8008aee:	2000      	movs	r0, #0
 8008af0:	bd70      	pop	{r4, r5, r6, pc}
 8008af2:	f000 f877 	bl	8008be4 <__malloc_lock>
 8008af6:	4a21      	ldr	r2, [pc, #132]	; (8008b7c <_malloc_r+0xac>)
 8008af8:	6814      	ldr	r4, [r2, #0]
 8008afa:	4621      	mov	r1, r4
 8008afc:	b991      	cbnz	r1, 8008b24 <_malloc_r+0x54>
 8008afe:	4c20      	ldr	r4, [pc, #128]	; (8008b80 <_malloc_r+0xb0>)
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	b91b      	cbnz	r3, 8008b0c <_malloc_r+0x3c>
 8008b04:	4630      	mov	r0, r6
 8008b06:	f000 f83d 	bl	8008b84 <_sbrk_r>
 8008b0a:	6020      	str	r0, [r4, #0]
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f000 f838 	bl	8008b84 <_sbrk_r>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d124      	bne.n	8008b62 <_malloc_r+0x92>
 8008b18:	230c      	movs	r3, #12
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	6033      	str	r3, [r6, #0]
 8008b1e:	f000 f862 	bl	8008be6 <__malloc_unlock>
 8008b22:	e7e4      	b.n	8008aee <_malloc_r+0x1e>
 8008b24:	680b      	ldr	r3, [r1, #0]
 8008b26:	1b5b      	subs	r3, r3, r5
 8008b28:	d418      	bmi.n	8008b5c <_malloc_r+0x8c>
 8008b2a:	2b0b      	cmp	r3, #11
 8008b2c:	d90f      	bls.n	8008b4e <_malloc_r+0x7e>
 8008b2e:	600b      	str	r3, [r1, #0]
 8008b30:	18cc      	adds	r4, r1, r3
 8008b32:	50cd      	str	r5, [r1, r3]
 8008b34:	4630      	mov	r0, r6
 8008b36:	f000 f856 	bl	8008be6 <__malloc_unlock>
 8008b3a:	f104 000b 	add.w	r0, r4, #11
 8008b3e:	1d23      	adds	r3, r4, #4
 8008b40:	f020 0007 	bic.w	r0, r0, #7
 8008b44:	1ac3      	subs	r3, r0, r3
 8008b46:	d0d3      	beq.n	8008af0 <_malloc_r+0x20>
 8008b48:	425a      	negs	r2, r3
 8008b4a:	50e2      	str	r2, [r4, r3]
 8008b4c:	e7d0      	b.n	8008af0 <_malloc_r+0x20>
 8008b4e:	684b      	ldr	r3, [r1, #4]
 8008b50:	428c      	cmp	r4, r1
 8008b52:	bf16      	itet	ne
 8008b54:	6063      	strne	r3, [r4, #4]
 8008b56:	6013      	streq	r3, [r2, #0]
 8008b58:	460c      	movne	r4, r1
 8008b5a:	e7eb      	b.n	8008b34 <_malloc_r+0x64>
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	6849      	ldr	r1, [r1, #4]
 8008b60:	e7cc      	b.n	8008afc <_malloc_r+0x2c>
 8008b62:	1cc4      	adds	r4, r0, #3
 8008b64:	f024 0403 	bic.w	r4, r4, #3
 8008b68:	42a0      	cmp	r0, r4
 8008b6a:	d005      	beq.n	8008b78 <_malloc_r+0xa8>
 8008b6c:	1a21      	subs	r1, r4, r0
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f000 f808 	bl	8008b84 <_sbrk_r>
 8008b74:	3001      	adds	r0, #1
 8008b76:	d0cf      	beq.n	8008b18 <_malloc_r+0x48>
 8008b78:	6025      	str	r5, [r4, #0]
 8008b7a:	e7db      	b.n	8008b34 <_malloc_r+0x64>
 8008b7c:	20001468 	.word	0x20001468
 8008b80:	2000146c 	.word	0x2000146c

08008b84 <_sbrk_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	2300      	movs	r3, #0
 8008b88:	4c05      	ldr	r4, [pc, #20]	; (8008ba0 <_sbrk_r+0x1c>)
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	6023      	str	r3, [r4, #0]
 8008b90:	f7fa f86e 	bl	8002c70 <_sbrk>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_sbrk_r+0x1a>
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_sbrk_r+0x1a>
 8008b9c:	602b      	str	r3, [r5, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	2000162c 	.word	0x2000162c

08008ba4 <siprintf>:
 8008ba4:	b40e      	push	{r1, r2, r3}
 8008ba6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008baa:	b500      	push	{lr}
 8008bac:	b09c      	sub	sp, #112	; 0x70
 8008bae:	ab1d      	add	r3, sp, #116	; 0x74
 8008bb0:	9002      	str	r0, [sp, #8]
 8008bb2:	9006      	str	r0, [sp, #24]
 8008bb4:	9107      	str	r1, [sp, #28]
 8008bb6:	9104      	str	r1, [sp, #16]
 8008bb8:	4808      	ldr	r0, [pc, #32]	; (8008bdc <siprintf+0x38>)
 8008bba:	4909      	ldr	r1, [pc, #36]	; (8008be0 <siprintf+0x3c>)
 8008bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bc0:	9105      	str	r1, [sp, #20]
 8008bc2:	6800      	ldr	r0, [r0, #0]
 8008bc4:	a902      	add	r1, sp, #8
 8008bc6:	9301      	str	r3, [sp, #4]
 8008bc8:	f000 f868 	bl	8008c9c <_svfiprintf_r>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	9b02      	ldr	r3, [sp, #8]
 8008bd0:	701a      	strb	r2, [r3, #0]
 8008bd2:	b01c      	add	sp, #112	; 0x70
 8008bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bd8:	b003      	add	sp, #12
 8008bda:	4770      	bx	lr
 8008bdc:	20000024 	.word	0x20000024
 8008be0:	ffff0208 	.word	0xffff0208

08008be4 <__malloc_lock>:
 8008be4:	4770      	bx	lr

08008be6 <__malloc_unlock>:
 8008be6:	4770      	bx	lr

08008be8 <__ssputs_r>:
 8008be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bec:	688e      	ldr	r6, [r1, #8]
 8008bee:	4682      	mov	sl, r0
 8008bf0:	429e      	cmp	r6, r3
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	4690      	mov	r8, r2
 8008bf6:	4699      	mov	r9, r3
 8008bf8:	d837      	bhi.n	8008c6a <__ssputs_r+0x82>
 8008bfa:	898a      	ldrh	r2, [r1, #12]
 8008bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c00:	d031      	beq.n	8008c66 <__ssputs_r+0x7e>
 8008c02:	2302      	movs	r3, #2
 8008c04:	6825      	ldr	r5, [r4, #0]
 8008c06:	6909      	ldr	r1, [r1, #16]
 8008c08:	1a6f      	subs	r7, r5, r1
 8008c0a:	6965      	ldr	r5, [r4, #20]
 8008c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c10:	fb95 f5f3 	sdiv	r5, r5, r3
 8008c14:	f109 0301 	add.w	r3, r9, #1
 8008c18:	443b      	add	r3, r7
 8008c1a:	429d      	cmp	r5, r3
 8008c1c:	bf38      	it	cc
 8008c1e:	461d      	movcc	r5, r3
 8008c20:	0553      	lsls	r3, r2, #21
 8008c22:	d530      	bpl.n	8008c86 <__ssputs_r+0x9e>
 8008c24:	4629      	mov	r1, r5
 8008c26:	f7ff ff53 	bl	8008ad0 <_malloc_r>
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	b950      	cbnz	r0, 8008c44 <__ssputs_r+0x5c>
 8008c2e:	230c      	movs	r3, #12
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	f8ca 3000 	str.w	r3, [sl]
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c44:	463a      	mov	r2, r7
 8008c46:	6921      	ldr	r1, [r4, #16]
 8008c48:	f7ff fee2 	bl	8008a10 <memcpy>
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c56:	81a3      	strh	r3, [r4, #12]
 8008c58:	6126      	str	r6, [r4, #16]
 8008c5a:	443e      	add	r6, r7
 8008c5c:	6026      	str	r6, [r4, #0]
 8008c5e:	464e      	mov	r6, r9
 8008c60:	6165      	str	r5, [r4, #20]
 8008c62:	1bed      	subs	r5, r5, r7
 8008c64:	60a5      	str	r5, [r4, #8]
 8008c66:	454e      	cmp	r6, r9
 8008c68:	d900      	bls.n	8008c6c <__ssputs_r+0x84>
 8008c6a:	464e      	mov	r6, r9
 8008c6c:	4632      	mov	r2, r6
 8008c6e:	4641      	mov	r1, r8
 8008c70:	6820      	ldr	r0, [r4, #0]
 8008c72:	f000 faa1 	bl	80091b8 <memmove>
 8008c76:	68a3      	ldr	r3, [r4, #8]
 8008c78:	2000      	movs	r0, #0
 8008c7a:	1b9b      	subs	r3, r3, r6
 8008c7c:	60a3      	str	r3, [r4, #8]
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	441e      	add	r6, r3
 8008c82:	6026      	str	r6, [r4, #0]
 8008c84:	e7dc      	b.n	8008c40 <__ssputs_r+0x58>
 8008c86:	462a      	mov	r2, r5
 8008c88:	f000 faaf 	bl	80091ea <_realloc_r>
 8008c8c:	4606      	mov	r6, r0
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d1e2      	bne.n	8008c58 <__ssputs_r+0x70>
 8008c92:	6921      	ldr	r1, [r4, #16]
 8008c94:	4650      	mov	r0, sl
 8008c96:	f7ff fecf 	bl	8008a38 <_free_r>
 8008c9a:	e7c8      	b.n	8008c2e <__ssputs_r+0x46>

08008c9c <_svfiprintf_r>:
 8008c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca0:	461d      	mov	r5, r3
 8008ca2:	898b      	ldrh	r3, [r1, #12]
 8008ca4:	b09d      	sub	sp, #116	; 0x74
 8008ca6:	061f      	lsls	r7, r3, #24
 8008ca8:	4680      	mov	r8, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	4616      	mov	r6, r2
 8008cae:	d50f      	bpl.n	8008cd0 <_svfiprintf_r+0x34>
 8008cb0:	690b      	ldr	r3, [r1, #16]
 8008cb2:	b96b      	cbnz	r3, 8008cd0 <_svfiprintf_r+0x34>
 8008cb4:	2140      	movs	r1, #64	; 0x40
 8008cb6:	f7ff ff0b 	bl	8008ad0 <_malloc_r>
 8008cba:	6020      	str	r0, [r4, #0]
 8008cbc:	6120      	str	r0, [r4, #16]
 8008cbe:	b928      	cbnz	r0, 8008ccc <_svfiprintf_r+0x30>
 8008cc0:	230c      	movs	r3, #12
 8008cc2:	f8c8 3000 	str.w	r3, [r8]
 8008cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cca:	e0c8      	b.n	8008e5e <_svfiprintf_r+0x1c2>
 8008ccc:	2340      	movs	r3, #64	; 0x40
 8008cce:	6163      	str	r3, [r4, #20]
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cda:	2330      	movs	r3, #48	; 0x30
 8008cdc:	f04f 0b01 	mov.w	fp, #1
 8008ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ce4:	9503      	str	r5, [sp, #12]
 8008ce6:	4637      	mov	r7, r6
 8008ce8:	463d      	mov	r5, r7
 8008cea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008cee:	b10b      	cbz	r3, 8008cf4 <_svfiprintf_r+0x58>
 8008cf0:	2b25      	cmp	r3, #37	; 0x25
 8008cf2:	d13e      	bne.n	8008d72 <_svfiprintf_r+0xd6>
 8008cf4:	ebb7 0a06 	subs.w	sl, r7, r6
 8008cf8:	d00b      	beq.n	8008d12 <_svfiprintf_r+0x76>
 8008cfa:	4653      	mov	r3, sl
 8008cfc:	4632      	mov	r2, r6
 8008cfe:	4621      	mov	r1, r4
 8008d00:	4640      	mov	r0, r8
 8008d02:	f7ff ff71 	bl	8008be8 <__ssputs_r>
 8008d06:	3001      	adds	r0, #1
 8008d08:	f000 80a4 	beq.w	8008e54 <_svfiprintf_r+0x1b8>
 8008d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0e:	4453      	add	r3, sl
 8008d10:	9309      	str	r3, [sp, #36]	; 0x24
 8008d12:	783b      	ldrb	r3, [r7, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 809d 	beq.w	8008e54 <_svfiprintf_r+0x1b8>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d24:	9304      	str	r3, [sp, #16]
 8008d26:	9307      	str	r3, [sp, #28]
 8008d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8008d2e:	462f      	mov	r7, r5
 8008d30:	2205      	movs	r2, #5
 8008d32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008d36:	4850      	ldr	r0, [pc, #320]	; (8008e78 <_svfiprintf_r+0x1dc>)
 8008d38:	f000 fa30 	bl	800919c <memchr>
 8008d3c:	9b04      	ldr	r3, [sp, #16]
 8008d3e:	b9d0      	cbnz	r0, 8008d76 <_svfiprintf_r+0xda>
 8008d40:	06d9      	lsls	r1, r3, #27
 8008d42:	bf44      	itt	mi
 8008d44:	2220      	movmi	r2, #32
 8008d46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d4a:	071a      	lsls	r2, r3, #28
 8008d4c:	bf44      	itt	mi
 8008d4e:	222b      	movmi	r2, #43	; 0x2b
 8008d50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d54:	782a      	ldrb	r2, [r5, #0]
 8008d56:	2a2a      	cmp	r2, #42	; 0x2a
 8008d58:	d015      	beq.n	8008d86 <_svfiprintf_r+0xea>
 8008d5a:	462f      	mov	r7, r5
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	250a      	movs	r5, #10
 8008d60:	9a07      	ldr	r2, [sp, #28]
 8008d62:	4639      	mov	r1, r7
 8008d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d68:	3b30      	subs	r3, #48	; 0x30
 8008d6a:	2b09      	cmp	r3, #9
 8008d6c:	d94d      	bls.n	8008e0a <_svfiprintf_r+0x16e>
 8008d6e:	b1b8      	cbz	r0, 8008da0 <_svfiprintf_r+0x104>
 8008d70:	e00f      	b.n	8008d92 <_svfiprintf_r+0xf6>
 8008d72:	462f      	mov	r7, r5
 8008d74:	e7b8      	b.n	8008ce8 <_svfiprintf_r+0x4c>
 8008d76:	4a40      	ldr	r2, [pc, #256]	; (8008e78 <_svfiprintf_r+0x1dc>)
 8008d78:	463d      	mov	r5, r7
 8008d7a:	1a80      	subs	r0, r0, r2
 8008d7c:	fa0b f000 	lsl.w	r0, fp, r0
 8008d80:	4318      	orrs	r0, r3
 8008d82:	9004      	str	r0, [sp, #16]
 8008d84:	e7d3      	b.n	8008d2e <_svfiprintf_r+0x92>
 8008d86:	9a03      	ldr	r2, [sp, #12]
 8008d88:	1d11      	adds	r1, r2, #4
 8008d8a:	6812      	ldr	r2, [r2, #0]
 8008d8c:	9103      	str	r1, [sp, #12]
 8008d8e:	2a00      	cmp	r2, #0
 8008d90:	db01      	blt.n	8008d96 <_svfiprintf_r+0xfa>
 8008d92:	9207      	str	r2, [sp, #28]
 8008d94:	e004      	b.n	8008da0 <_svfiprintf_r+0x104>
 8008d96:	4252      	negs	r2, r2
 8008d98:	f043 0302 	orr.w	r3, r3, #2
 8008d9c:	9207      	str	r2, [sp, #28]
 8008d9e:	9304      	str	r3, [sp, #16]
 8008da0:	783b      	ldrb	r3, [r7, #0]
 8008da2:	2b2e      	cmp	r3, #46	; 0x2e
 8008da4:	d10c      	bne.n	8008dc0 <_svfiprintf_r+0x124>
 8008da6:	787b      	ldrb	r3, [r7, #1]
 8008da8:	2b2a      	cmp	r3, #42	; 0x2a
 8008daa:	d133      	bne.n	8008e14 <_svfiprintf_r+0x178>
 8008dac:	9b03      	ldr	r3, [sp, #12]
 8008dae:	3702      	adds	r7, #2
 8008db0:	1d1a      	adds	r2, r3, #4
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	9203      	str	r2, [sp, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bfb8      	it	lt
 8008dba:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dbe:	9305      	str	r3, [sp, #20]
 8008dc0:	4d2e      	ldr	r5, [pc, #184]	; (8008e7c <_svfiprintf_r+0x1e0>)
 8008dc2:	2203      	movs	r2, #3
 8008dc4:	7839      	ldrb	r1, [r7, #0]
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f000 f9e8 	bl	800919c <memchr>
 8008dcc:	b138      	cbz	r0, 8008dde <_svfiprintf_r+0x142>
 8008dce:	2340      	movs	r3, #64	; 0x40
 8008dd0:	1b40      	subs	r0, r0, r5
 8008dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8008dd6:	9b04      	ldr	r3, [sp, #16]
 8008dd8:	3701      	adds	r7, #1
 8008dda:	4303      	orrs	r3, r0
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	7839      	ldrb	r1, [r7, #0]
 8008de0:	2206      	movs	r2, #6
 8008de2:	4827      	ldr	r0, [pc, #156]	; (8008e80 <_svfiprintf_r+0x1e4>)
 8008de4:	1c7e      	adds	r6, r7, #1
 8008de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dea:	f000 f9d7 	bl	800919c <memchr>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d038      	beq.n	8008e64 <_svfiprintf_r+0x1c8>
 8008df2:	4b24      	ldr	r3, [pc, #144]	; (8008e84 <_svfiprintf_r+0x1e8>)
 8008df4:	bb13      	cbnz	r3, 8008e3c <_svfiprintf_r+0x1a0>
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	3307      	adds	r3, #7
 8008dfa:	f023 0307 	bic.w	r3, r3, #7
 8008dfe:	3308      	adds	r3, #8
 8008e00:	9303      	str	r3, [sp, #12]
 8008e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e04:	444b      	add	r3, r9
 8008e06:	9309      	str	r3, [sp, #36]	; 0x24
 8008e08:	e76d      	b.n	8008ce6 <_svfiprintf_r+0x4a>
 8008e0a:	fb05 3202 	mla	r2, r5, r2, r3
 8008e0e:	2001      	movs	r0, #1
 8008e10:	460f      	mov	r7, r1
 8008e12:	e7a6      	b.n	8008d62 <_svfiprintf_r+0xc6>
 8008e14:	2300      	movs	r3, #0
 8008e16:	250a      	movs	r5, #10
 8008e18:	4619      	mov	r1, r3
 8008e1a:	3701      	adds	r7, #1
 8008e1c:	9305      	str	r3, [sp, #20]
 8008e1e:	4638      	mov	r0, r7
 8008e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e24:	3a30      	subs	r2, #48	; 0x30
 8008e26:	2a09      	cmp	r2, #9
 8008e28:	d903      	bls.n	8008e32 <_svfiprintf_r+0x196>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0c8      	beq.n	8008dc0 <_svfiprintf_r+0x124>
 8008e2e:	9105      	str	r1, [sp, #20]
 8008e30:	e7c6      	b.n	8008dc0 <_svfiprintf_r+0x124>
 8008e32:	fb05 2101 	mla	r1, r5, r1, r2
 8008e36:	2301      	movs	r3, #1
 8008e38:	4607      	mov	r7, r0
 8008e3a:	e7f0      	b.n	8008e1e <_svfiprintf_r+0x182>
 8008e3c:	ab03      	add	r3, sp, #12
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	4622      	mov	r2, r4
 8008e42:	4b11      	ldr	r3, [pc, #68]	; (8008e88 <_svfiprintf_r+0x1ec>)
 8008e44:	a904      	add	r1, sp, #16
 8008e46:	4640      	mov	r0, r8
 8008e48:	f3af 8000 	nop.w
 8008e4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008e50:	4681      	mov	r9, r0
 8008e52:	d1d6      	bne.n	8008e02 <_svfiprintf_r+0x166>
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	065b      	lsls	r3, r3, #25
 8008e58:	f53f af35 	bmi.w	8008cc6 <_svfiprintf_r+0x2a>
 8008e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e5e:	b01d      	add	sp, #116	; 0x74
 8008e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e64:	ab03      	add	r3, sp, #12
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	4622      	mov	r2, r4
 8008e6a:	4b07      	ldr	r3, [pc, #28]	; (8008e88 <_svfiprintf_r+0x1ec>)
 8008e6c:	a904      	add	r1, sp, #16
 8008e6e:	4640      	mov	r0, r8
 8008e70:	f000 f882 	bl	8008f78 <_printf_i>
 8008e74:	e7ea      	b.n	8008e4c <_svfiprintf_r+0x1b0>
 8008e76:	bf00      	nop
 8008e78:	0800c0ec 	.word	0x0800c0ec
 8008e7c:	0800c0f2 	.word	0x0800c0f2
 8008e80:	0800c0f6 	.word	0x0800c0f6
 8008e84:	00000000 	.word	0x00000000
 8008e88:	08008be9 	.word	0x08008be9

08008e8c <_printf_common>:
 8008e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	4691      	mov	r9, r2
 8008e92:	461f      	mov	r7, r3
 8008e94:	688a      	ldr	r2, [r1, #8]
 8008e96:	690b      	ldr	r3, [r1, #16]
 8008e98:	4606      	mov	r6, r0
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	bfb8      	it	lt
 8008e9e:	4613      	movlt	r3, r2
 8008ea0:	f8c9 3000 	str.w	r3, [r9]
 8008ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008eae:	b112      	cbz	r2, 8008eb6 <_printf_common+0x2a>
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	f8c9 3000 	str.w	r3, [r9]
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	0699      	lsls	r1, r3, #26
 8008eba:	bf42      	ittt	mi
 8008ebc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ec0:	3302      	addmi	r3, #2
 8008ec2:	f8c9 3000 	strmi.w	r3, [r9]
 8008ec6:	6825      	ldr	r5, [r4, #0]
 8008ec8:	f015 0506 	ands.w	r5, r5, #6
 8008ecc:	d107      	bne.n	8008ede <_printf_common+0x52>
 8008ece:	f104 0a19 	add.w	sl, r4, #25
 8008ed2:	68e3      	ldr	r3, [r4, #12]
 8008ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8008ed8:	1a9b      	subs	r3, r3, r2
 8008eda:	42ab      	cmp	r3, r5
 8008edc:	dc29      	bgt.n	8008f32 <_printf_common+0xa6>
 8008ede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008ee2:	6822      	ldr	r2, [r4, #0]
 8008ee4:	3300      	adds	r3, #0
 8008ee6:	bf18      	it	ne
 8008ee8:	2301      	movne	r3, #1
 8008eea:	0692      	lsls	r2, r2, #26
 8008eec:	d42e      	bmi.n	8008f4c <_printf_common+0xc0>
 8008eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	47c0      	blx	r8
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d021      	beq.n	8008f40 <_printf_common+0xb4>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	68e5      	ldr	r5, [r4, #12]
 8008f00:	f003 0306 	and.w	r3, r3, #6
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	bf18      	it	ne
 8008f08:	2500      	movne	r5, #0
 8008f0a:	f8d9 2000 	ldr.w	r2, [r9]
 8008f0e:	f04f 0900 	mov.w	r9, #0
 8008f12:	bf08      	it	eq
 8008f14:	1aad      	subeq	r5, r5, r2
 8008f16:	68a3      	ldr	r3, [r4, #8]
 8008f18:	6922      	ldr	r2, [r4, #16]
 8008f1a:	bf08      	it	eq
 8008f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f20:	4293      	cmp	r3, r2
 8008f22:	bfc4      	itt	gt
 8008f24:	1a9b      	subgt	r3, r3, r2
 8008f26:	18ed      	addgt	r5, r5, r3
 8008f28:	341a      	adds	r4, #26
 8008f2a:	454d      	cmp	r5, r9
 8008f2c:	d11a      	bne.n	8008f64 <_printf_common+0xd8>
 8008f2e:	2000      	movs	r0, #0
 8008f30:	e008      	b.n	8008f44 <_printf_common+0xb8>
 8008f32:	2301      	movs	r3, #1
 8008f34:	4652      	mov	r2, sl
 8008f36:	4639      	mov	r1, r7
 8008f38:	4630      	mov	r0, r6
 8008f3a:	47c0      	blx	r8
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d103      	bne.n	8008f48 <_printf_common+0xbc>
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f48:	3501      	adds	r5, #1
 8008f4a:	e7c2      	b.n	8008ed2 <_printf_common+0x46>
 8008f4c:	2030      	movs	r0, #48	; 0x30
 8008f4e:	18e1      	adds	r1, r4, r3
 8008f50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f5a:	4422      	add	r2, r4
 8008f5c:	3302      	adds	r3, #2
 8008f5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f62:	e7c4      	b.n	8008eee <_printf_common+0x62>
 8008f64:	2301      	movs	r3, #1
 8008f66:	4622      	mov	r2, r4
 8008f68:	4639      	mov	r1, r7
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	47c0      	blx	r8
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d0e6      	beq.n	8008f40 <_printf_common+0xb4>
 8008f72:	f109 0901 	add.w	r9, r9, #1
 8008f76:	e7d8      	b.n	8008f2a <_printf_common+0x9e>

08008f78 <_printf_i>:
 8008f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008f80:	460c      	mov	r4, r1
 8008f82:	7e09      	ldrb	r1, [r1, #24]
 8008f84:	b085      	sub	sp, #20
 8008f86:	296e      	cmp	r1, #110	; 0x6e
 8008f88:	4617      	mov	r7, r2
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	4698      	mov	r8, r3
 8008f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f90:	f000 80b3 	beq.w	80090fa <_printf_i+0x182>
 8008f94:	d822      	bhi.n	8008fdc <_printf_i+0x64>
 8008f96:	2963      	cmp	r1, #99	; 0x63
 8008f98:	d036      	beq.n	8009008 <_printf_i+0x90>
 8008f9a:	d80a      	bhi.n	8008fb2 <_printf_i+0x3a>
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	f000 80b9 	beq.w	8009114 <_printf_i+0x19c>
 8008fa2:	2958      	cmp	r1, #88	; 0x58
 8008fa4:	f000 8083 	beq.w	80090ae <_printf_i+0x136>
 8008fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008fb0:	e032      	b.n	8009018 <_printf_i+0xa0>
 8008fb2:	2964      	cmp	r1, #100	; 0x64
 8008fb4:	d001      	beq.n	8008fba <_printf_i+0x42>
 8008fb6:	2969      	cmp	r1, #105	; 0x69
 8008fb8:	d1f6      	bne.n	8008fa8 <_printf_i+0x30>
 8008fba:	6820      	ldr	r0, [r4, #0]
 8008fbc:	6813      	ldr	r3, [r2, #0]
 8008fbe:	0605      	lsls	r5, r0, #24
 8008fc0:	f103 0104 	add.w	r1, r3, #4
 8008fc4:	d52a      	bpl.n	800901c <_printf_i+0xa4>
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6011      	str	r1, [r2, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	da03      	bge.n	8008fd6 <_printf_i+0x5e>
 8008fce:	222d      	movs	r2, #45	; 0x2d
 8008fd0:	425b      	negs	r3, r3
 8008fd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008fd6:	486f      	ldr	r0, [pc, #444]	; (8009194 <_printf_i+0x21c>)
 8008fd8:	220a      	movs	r2, #10
 8008fda:	e039      	b.n	8009050 <_printf_i+0xd8>
 8008fdc:	2973      	cmp	r1, #115	; 0x73
 8008fde:	f000 809d 	beq.w	800911c <_printf_i+0x1a4>
 8008fe2:	d808      	bhi.n	8008ff6 <_printf_i+0x7e>
 8008fe4:	296f      	cmp	r1, #111	; 0x6f
 8008fe6:	d020      	beq.n	800902a <_printf_i+0xb2>
 8008fe8:	2970      	cmp	r1, #112	; 0x70
 8008fea:	d1dd      	bne.n	8008fa8 <_printf_i+0x30>
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	f043 0320 	orr.w	r3, r3, #32
 8008ff2:	6023      	str	r3, [r4, #0]
 8008ff4:	e003      	b.n	8008ffe <_printf_i+0x86>
 8008ff6:	2975      	cmp	r1, #117	; 0x75
 8008ff8:	d017      	beq.n	800902a <_printf_i+0xb2>
 8008ffa:	2978      	cmp	r1, #120	; 0x78
 8008ffc:	d1d4      	bne.n	8008fa8 <_printf_i+0x30>
 8008ffe:	2378      	movs	r3, #120	; 0x78
 8009000:	4865      	ldr	r0, [pc, #404]	; (8009198 <_printf_i+0x220>)
 8009002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009006:	e055      	b.n	80090b4 <_printf_i+0x13c>
 8009008:	6813      	ldr	r3, [r2, #0]
 800900a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800900e:	1d19      	adds	r1, r3, #4
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6011      	str	r1, [r2, #0]
 8009014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009018:	2301      	movs	r3, #1
 800901a:	e08c      	b.n	8009136 <_printf_i+0x1be>
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009022:	6011      	str	r1, [r2, #0]
 8009024:	bf18      	it	ne
 8009026:	b21b      	sxthne	r3, r3
 8009028:	e7cf      	b.n	8008fca <_printf_i+0x52>
 800902a:	6813      	ldr	r3, [r2, #0]
 800902c:	6825      	ldr	r5, [r4, #0]
 800902e:	1d18      	adds	r0, r3, #4
 8009030:	6010      	str	r0, [r2, #0]
 8009032:	0628      	lsls	r0, r5, #24
 8009034:	d501      	bpl.n	800903a <_printf_i+0xc2>
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	e002      	b.n	8009040 <_printf_i+0xc8>
 800903a:	0668      	lsls	r0, r5, #25
 800903c:	d5fb      	bpl.n	8009036 <_printf_i+0xbe>
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	296f      	cmp	r1, #111	; 0x6f
 8009042:	bf14      	ite	ne
 8009044:	220a      	movne	r2, #10
 8009046:	2208      	moveq	r2, #8
 8009048:	4852      	ldr	r0, [pc, #328]	; (8009194 <_printf_i+0x21c>)
 800904a:	2100      	movs	r1, #0
 800904c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009050:	6865      	ldr	r5, [r4, #4]
 8009052:	2d00      	cmp	r5, #0
 8009054:	60a5      	str	r5, [r4, #8]
 8009056:	f2c0 8095 	blt.w	8009184 <_printf_i+0x20c>
 800905a:	6821      	ldr	r1, [r4, #0]
 800905c:	f021 0104 	bic.w	r1, r1, #4
 8009060:	6021      	str	r1, [r4, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d13d      	bne.n	80090e2 <_printf_i+0x16a>
 8009066:	2d00      	cmp	r5, #0
 8009068:	f040 808e 	bne.w	8009188 <_printf_i+0x210>
 800906c:	4665      	mov	r5, ip
 800906e:	2a08      	cmp	r2, #8
 8009070:	d10b      	bne.n	800908a <_printf_i+0x112>
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	07db      	lsls	r3, r3, #31
 8009076:	d508      	bpl.n	800908a <_printf_i+0x112>
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	6862      	ldr	r2, [r4, #4]
 800907c:	429a      	cmp	r2, r3
 800907e:	bfde      	ittt	le
 8009080:	2330      	movle	r3, #48	; 0x30
 8009082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009086:	f105 35ff 	addle.w	r5, r5, #4294967295
 800908a:	ebac 0305 	sub.w	r3, ip, r5
 800908e:	6123      	str	r3, [r4, #16]
 8009090:	f8cd 8000 	str.w	r8, [sp]
 8009094:	463b      	mov	r3, r7
 8009096:	aa03      	add	r2, sp, #12
 8009098:	4621      	mov	r1, r4
 800909a:	4630      	mov	r0, r6
 800909c:	f7ff fef6 	bl	8008e8c <_printf_common>
 80090a0:	3001      	adds	r0, #1
 80090a2:	d14d      	bne.n	8009140 <_printf_i+0x1c8>
 80090a4:	f04f 30ff 	mov.w	r0, #4294967295
 80090a8:	b005      	add	sp, #20
 80090aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090ae:	4839      	ldr	r0, [pc, #228]	; (8009194 <_printf_i+0x21c>)
 80090b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80090b4:	6813      	ldr	r3, [r2, #0]
 80090b6:	6821      	ldr	r1, [r4, #0]
 80090b8:	1d1d      	adds	r5, r3, #4
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6015      	str	r5, [r2, #0]
 80090be:	060a      	lsls	r2, r1, #24
 80090c0:	d50b      	bpl.n	80090da <_printf_i+0x162>
 80090c2:	07ca      	lsls	r2, r1, #31
 80090c4:	bf44      	itt	mi
 80090c6:	f041 0120 	orrmi.w	r1, r1, #32
 80090ca:	6021      	strmi	r1, [r4, #0]
 80090cc:	b91b      	cbnz	r3, 80090d6 <_printf_i+0x15e>
 80090ce:	6822      	ldr	r2, [r4, #0]
 80090d0:	f022 0220 	bic.w	r2, r2, #32
 80090d4:	6022      	str	r2, [r4, #0]
 80090d6:	2210      	movs	r2, #16
 80090d8:	e7b7      	b.n	800904a <_printf_i+0xd2>
 80090da:	064d      	lsls	r5, r1, #25
 80090dc:	bf48      	it	mi
 80090de:	b29b      	uxthmi	r3, r3
 80090e0:	e7ef      	b.n	80090c2 <_printf_i+0x14a>
 80090e2:	4665      	mov	r5, ip
 80090e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80090e8:	fb02 3311 	mls	r3, r2, r1, r3
 80090ec:	5cc3      	ldrb	r3, [r0, r3]
 80090ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80090f2:	460b      	mov	r3, r1
 80090f4:	2900      	cmp	r1, #0
 80090f6:	d1f5      	bne.n	80090e4 <_printf_i+0x16c>
 80090f8:	e7b9      	b.n	800906e <_printf_i+0xf6>
 80090fa:	6813      	ldr	r3, [r2, #0]
 80090fc:	6825      	ldr	r5, [r4, #0]
 80090fe:	1d18      	adds	r0, r3, #4
 8009100:	6961      	ldr	r1, [r4, #20]
 8009102:	6010      	str	r0, [r2, #0]
 8009104:	0628      	lsls	r0, r5, #24
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	d501      	bpl.n	800910e <_printf_i+0x196>
 800910a:	6019      	str	r1, [r3, #0]
 800910c:	e002      	b.n	8009114 <_printf_i+0x19c>
 800910e:	066a      	lsls	r2, r5, #25
 8009110:	d5fb      	bpl.n	800910a <_printf_i+0x192>
 8009112:	8019      	strh	r1, [r3, #0]
 8009114:	2300      	movs	r3, #0
 8009116:	4665      	mov	r5, ip
 8009118:	6123      	str	r3, [r4, #16]
 800911a:	e7b9      	b.n	8009090 <_printf_i+0x118>
 800911c:	6813      	ldr	r3, [r2, #0]
 800911e:	1d19      	adds	r1, r3, #4
 8009120:	6011      	str	r1, [r2, #0]
 8009122:	681d      	ldr	r5, [r3, #0]
 8009124:	6862      	ldr	r2, [r4, #4]
 8009126:	2100      	movs	r1, #0
 8009128:	4628      	mov	r0, r5
 800912a:	f000 f837 	bl	800919c <memchr>
 800912e:	b108      	cbz	r0, 8009134 <_printf_i+0x1bc>
 8009130:	1b40      	subs	r0, r0, r5
 8009132:	6060      	str	r0, [r4, #4]
 8009134:	6863      	ldr	r3, [r4, #4]
 8009136:	6123      	str	r3, [r4, #16]
 8009138:	2300      	movs	r3, #0
 800913a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800913e:	e7a7      	b.n	8009090 <_printf_i+0x118>
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	462a      	mov	r2, r5
 8009144:	4639      	mov	r1, r7
 8009146:	4630      	mov	r0, r6
 8009148:	47c0      	blx	r8
 800914a:	3001      	adds	r0, #1
 800914c:	d0aa      	beq.n	80090a4 <_printf_i+0x12c>
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	079b      	lsls	r3, r3, #30
 8009152:	d413      	bmi.n	800917c <_printf_i+0x204>
 8009154:	68e0      	ldr	r0, [r4, #12]
 8009156:	9b03      	ldr	r3, [sp, #12]
 8009158:	4298      	cmp	r0, r3
 800915a:	bfb8      	it	lt
 800915c:	4618      	movlt	r0, r3
 800915e:	e7a3      	b.n	80090a8 <_printf_i+0x130>
 8009160:	2301      	movs	r3, #1
 8009162:	464a      	mov	r2, r9
 8009164:	4639      	mov	r1, r7
 8009166:	4630      	mov	r0, r6
 8009168:	47c0      	blx	r8
 800916a:	3001      	adds	r0, #1
 800916c:	d09a      	beq.n	80090a4 <_printf_i+0x12c>
 800916e:	3501      	adds	r5, #1
 8009170:	68e3      	ldr	r3, [r4, #12]
 8009172:	9a03      	ldr	r2, [sp, #12]
 8009174:	1a9b      	subs	r3, r3, r2
 8009176:	42ab      	cmp	r3, r5
 8009178:	dcf2      	bgt.n	8009160 <_printf_i+0x1e8>
 800917a:	e7eb      	b.n	8009154 <_printf_i+0x1dc>
 800917c:	2500      	movs	r5, #0
 800917e:	f104 0919 	add.w	r9, r4, #25
 8009182:	e7f5      	b.n	8009170 <_printf_i+0x1f8>
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1ac      	bne.n	80090e2 <_printf_i+0x16a>
 8009188:	7803      	ldrb	r3, [r0, #0]
 800918a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800918e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009192:	e76c      	b.n	800906e <_printf_i+0xf6>
 8009194:	0800c0fd 	.word	0x0800c0fd
 8009198:	0800c10e 	.word	0x0800c10e

0800919c <memchr>:
 800919c:	b510      	push	{r4, lr}
 800919e:	b2c9      	uxtb	r1, r1
 80091a0:	4402      	add	r2, r0
 80091a2:	4290      	cmp	r0, r2
 80091a4:	4603      	mov	r3, r0
 80091a6:	d101      	bne.n	80091ac <memchr+0x10>
 80091a8:	2300      	movs	r3, #0
 80091aa:	e003      	b.n	80091b4 <memchr+0x18>
 80091ac:	781c      	ldrb	r4, [r3, #0]
 80091ae:	3001      	adds	r0, #1
 80091b0:	428c      	cmp	r4, r1
 80091b2:	d1f6      	bne.n	80091a2 <memchr+0x6>
 80091b4:	4618      	mov	r0, r3
 80091b6:	bd10      	pop	{r4, pc}

080091b8 <memmove>:
 80091b8:	4288      	cmp	r0, r1
 80091ba:	b510      	push	{r4, lr}
 80091bc:	eb01 0302 	add.w	r3, r1, r2
 80091c0:	d807      	bhi.n	80091d2 <memmove+0x1a>
 80091c2:	1e42      	subs	r2, r0, #1
 80091c4:	4299      	cmp	r1, r3
 80091c6:	d00a      	beq.n	80091de <memmove+0x26>
 80091c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80091d0:	e7f8      	b.n	80091c4 <memmove+0xc>
 80091d2:	4283      	cmp	r3, r0
 80091d4:	d9f5      	bls.n	80091c2 <memmove+0xa>
 80091d6:	1881      	adds	r1, r0, r2
 80091d8:	1ad2      	subs	r2, r2, r3
 80091da:	42d3      	cmn	r3, r2
 80091dc:	d100      	bne.n	80091e0 <memmove+0x28>
 80091de:	bd10      	pop	{r4, pc}
 80091e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80091e8:	e7f7      	b.n	80091da <memmove+0x22>

080091ea <_realloc_r>:
 80091ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ec:	4607      	mov	r7, r0
 80091ee:	4614      	mov	r4, r2
 80091f0:	460e      	mov	r6, r1
 80091f2:	b921      	cbnz	r1, 80091fe <_realloc_r+0x14>
 80091f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80091f8:	4611      	mov	r1, r2
 80091fa:	f7ff bc69 	b.w	8008ad0 <_malloc_r>
 80091fe:	b922      	cbnz	r2, 800920a <_realloc_r+0x20>
 8009200:	f7ff fc1a 	bl	8008a38 <_free_r>
 8009204:	4625      	mov	r5, r4
 8009206:	4628      	mov	r0, r5
 8009208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800920a:	f000 f814 	bl	8009236 <_malloc_usable_size_r>
 800920e:	42a0      	cmp	r0, r4
 8009210:	d20f      	bcs.n	8009232 <_realloc_r+0x48>
 8009212:	4621      	mov	r1, r4
 8009214:	4638      	mov	r0, r7
 8009216:	f7ff fc5b 	bl	8008ad0 <_malloc_r>
 800921a:	4605      	mov	r5, r0
 800921c:	2800      	cmp	r0, #0
 800921e:	d0f2      	beq.n	8009206 <_realloc_r+0x1c>
 8009220:	4631      	mov	r1, r6
 8009222:	4622      	mov	r2, r4
 8009224:	f7ff fbf4 	bl	8008a10 <memcpy>
 8009228:	4631      	mov	r1, r6
 800922a:	4638      	mov	r0, r7
 800922c:	f7ff fc04 	bl	8008a38 <_free_r>
 8009230:	e7e9      	b.n	8009206 <_realloc_r+0x1c>
 8009232:	4635      	mov	r5, r6
 8009234:	e7e7      	b.n	8009206 <_realloc_r+0x1c>

08009236 <_malloc_usable_size_r>:
 8009236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800923a:	1f18      	subs	r0, r3, #4
 800923c:	2b00      	cmp	r3, #0
 800923e:	bfbc      	itt	lt
 8009240:	580b      	ldrlt	r3, [r1, r0]
 8009242:	18c0      	addlt	r0, r0, r3
 8009244:	4770      	bx	lr
	...

08009248 <cos>:
 8009248:	b530      	push	{r4, r5, lr}
 800924a:	4a18      	ldr	r2, [pc, #96]	; (80092ac <cos+0x64>)
 800924c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009250:	4293      	cmp	r3, r2
 8009252:	b087      	sub	sp, #28
 8009254:	dc04      	bgt.n	8009260 <cos+0x18>
 8009256:	2200      	movs	r2, #0
 8009258:	2300      	movs	r3, #0
 800925a:	f000 fa55 	bl	8009708 <__kernel_cos>
 800925e:	e006      	b.n	800926e <cos+0x26>
 8009260:	4a13      	ldr	r2, [pc, #76]	; (80092b0 <cos+0x68>)
 8009262:	4293      	cmp	r3, r2
 8009264:	dd05      	ble.n	8009272 <cos+0x2a>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	f7f6 ff75 	bl	8000158 <__aeabi_dsub>
 800926e:	b007      	add	sp, #28
 8009270:	bd30      	pop	{r4, r5, pc}
 8009272:	aa02      	add	r2, sp, #8
 8009274:	f000 f858 	bl	8009328 <__ieee754_rem_pio2>
 8009278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800927c:	f000 0403 	and.w	r4, r0, #3
 8009280:	2c01      	cmp	r4, #1
 8009282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009286:	d008      	beq.n	800929a <cos+0x52>
 8009288:	2c02      	cmp	r4, #2
 800928a:	d00c      	beq.n	80092a6 <cos+0x5e>
 800928c:	2c00      	cmp	r4, #0
 800928e:	d0e4      	beq.n	800925a <cos+0x12>
 8009290:	2401      	movs	r4, #1
 8009292:	9400      	str	r4, [sp, #0]
 8009294:	f000 fe40 	bl	8009f18 <__kernel_sin>
 8009298:	e7e9      	b.n	800926e <cos+0x26>
 800929a:	9400      	str	r4, [sp, #0]
 800929c:	f000 fe3c 	bl	8009f18 <__kernel_sin>
 80092a0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80092a4:	e7e3      	b.n	800926e <cos+0x26>
 80092a6:	f000 fa2f 	bl	8009708 <__kernel_cos>
 80092aa:	e7f9      	b.n	80092a0 <cos+0x58>
 80092ac:	3fe921fb 	.word	0x3fe921fb
 80092b0:	7fefffff 	.word	0x7fefffff

080092b4 <sin>:
 80092b4:	b530      	push	{r4, r5, lr}
 80092b6:	4a1a      	ldr	r2, [pc, #104]	; (8009320 <sin+0x6c>)
 80092b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80092bc:	4293      	cmp	r3, r2
 80092be:	b087      	sub	sp, #28
 80092c0:	dc06      	bgt.n	80092d0 <sin+0x1c>
 80092c2:	2300      	movs	r3, #0
 80092c4:	2200      	movs	r2, #0
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	2300      	movs	r3, #0
 80092ca:	f000 fe25 	bl	8009f18 <__kernel_sin>
 80092ce:	e006      	b.n	80092de <sin+0x2a>
 80092d0:	4a14      	ldr	r2, [pc, #80]	; (8009324 <sin+0x70>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	dd05      	ble.n	80092e2 <sin+0x2e>
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	f7f6 ff3d 	bl	8000158 <__aeabi_dsub>
 80092de:	b007      	add	sp, #28
 80092e0:	bd30      	pop	{r4, r5, pc}
 80092e2:	aa02      	add	r2, sp, #8
 80092e4:	f000 f820 	bl	8009328 <__ieee754_rem_pio2>
 80092e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092ec:	f000 0403 	and.w	r4, r0, #3
 80092f0:	2c01      	cmp	r4, #1
 80092f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092f6:	d005      	beq.n	8009304 <sin+0x50>
 80092f8:	2c02      	cmp	r4, #2
 80092fa:	d006      	beq.n	800930a <sin+0x56>
 80092fc:	b964      	cbnz	r4, 8009318 <sin+0x64>
 80092fe:	2401      	movs	r4, #1
 8009300:	9400      	str	r4, [sp, #0]
 8009302:	e7e2      	b.n	80092ca <sin+0x16>
 8009304:	f000 fa00 	bl	8009708 <__kernel_cos>
 8009308:	e7e9      	b.n	80092de <sin+0x2a>
 800930a:	2401      	movs	r4, #1
 800930c:	9400      	str	r4, [sp, #0]
 800930e:	f000 fe03 	bl	8009f18 <__kernel_sin>
 8009312:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009316:	e7e2      	b.n	80092de <sin+0x2a>
 8009318:	f000 f9f6 	bl	8009708 <__kernel_cos>
 800931c:	e7f9      	b.n	8009312 <sin+0x5e>
 800931e:	bf00      	nop
 8009320:	3fe921fb 	.word	0x3fe921fb
 8009324:	7fefffff 	.word	0x7fefffff

08009328 <__ieee754_rem_pio2>:
 8009328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932c:	4614      	mov	r4, r2
 800932e:	4ac2      	ldr	r2, [pc, #776]	; (8009638 <__ieee754_rem_pio2+0x310>)
 8009330:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8009334:	4592      	cmp	sl, r2
 8009336:	b08d      	sub	sp, #52	; 0x34
 8009338:	468b      	mov	fp, r1
 800933a:	dc07      	bgt.n	800934c <__ieee754_rem_pio2+0x24>
 800933c:	2200      	movs	r2, #0
 800933e:	2300      	movs	r3, #0
 8009340:	e9c4 0100 	strd	r0, r1, [r4]
 8009344:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009348:	2500      	movs	r5, #0
 800934a:	e023      	b.n	8009394 <__ieee754_rem_pio2+0x6c>
 800934c:	4abb      	ldr	r2, [pc, #748]	; (800963c <__ieee754_rem_pio2+0x314>)
 800934e:	4592      	cmp	sl, r2
 8009350:	dc71      	bgt.n	8009436 <__ieee754_rem_pio2+0x10e>
 8009352:	a3ab      	add	r3, pc, #684	; (adr r3, 8009600 <__ieee754_rem_pio2+0x2d8>)
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	2900      	cmp	r1, #0
 800935a:	4db9      	ldr	r5, [pc, #740]	; (8009640 <__ieee754_rem_pio2+0x318>)
 800935c:	dd36      	ble.n	80093cc <__ieee754_rem_pio2+0xa4>
 800935e:	f7f6 fefb 	bl	8000158 <__aeabi_dsub>
 8009362:	45aa      	cmp	sl, r5
 8009364:	4606      	mov	r6, r0
 8009366:	460f      	mov	r7, r1
 8009368:	d018      	beq.n	800939c <__ieee754_rem_pio2+0x74>
 800936a:	a3a7      	add	r3, pc, #668	; (adr r3, 8009608 <__ieee754_rem_pio2+0x2e0>)
 800936c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009370:	f7f6 fef2 	bl	8000158 <__aeabi_dsub>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4630      	mov	r0, r6
 800937a:	e9c4 2300 	strd	r2, r3, [r4]
 800937e:	4639      	mov	r1, r7
 8009380:	f7f6 feea 	bl	8000158 <__aeabi_dsub>
 8009384:	a3a0      	add	r3, pc, #640	; (adr r3, 8009608 <__ieee754_rem_pio2+0x2e0>)
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f7f6 fee5 	bl	8000158 <__aeabi_dsub>
 800938e:	2501      	movs	r5, #1
 8009390:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009394:	4628      	mov	r0, r5
 8009396:	b00d      	add	sp, #52	; 0x34
 8009398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939c:	a39c      	add	r3, pc, #624	; (adr r3, 8009610 <__ieee754_rem_pio2+0x2e8>)
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f7f6 fed9 	bl	8000158 <__aeabi_dsub>
 80093a6:	a39c      	add	r3, pc, #624	; (adr r3, 8009618 <__ieee754_rem_pio2+0x2f0>)
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	4606      	mov	r6, r0
 80093ae:	460f      	mov	r7, r1
 80093b0:	f7f6 fed2 	bl	8000158 <__aeabi_dsub>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4630      	mov	r0, r6
 80093ba:	e9c4 2300 	strd	r2, r3, [r4]
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f6 feca 	bl	8000158 <__aeabi_dsub>
 80093c4:	a394      	add	r3, pc, #592	; (adr r3, 8009618 <__ieee754_rem_pio2+0x2f0>)
 80093c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ca:	e7de      	b.n	800938a <__ieee754_rem_pio2+0x62>
 80093cc:	f7f6 fec6 	bl	800015c <__adddf3>
 80093d0:	45aa      	cmp	sl, r5
 80093d2:	4606      	mov	r6, r0
 80093d4:	460f      	mov	r7, r1
 80093d6:	d016      	beq.n	8009406 <__ieee754_rem_pio2+0xde>
 80093d8:	a38b      	add	r3, pc, #556	; (adr r3, 8009608 <__ieee754_rem_pio2+0x2e0>)
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	f7f6 febd 	bl	800015c <__adddf3>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4630      	mov	r0, r6
 80093e8:	e9c4 2300 	strd	r2, r3, [r4]
 80093ec:	4639      	mov	r1, r7
 80093ee:	f7f6 feb3 	bl	8000158 <__aeabi_dsub>
 80093f2:	a385      	add	r3, pc, #532	; (adr r3, 8009608 <__ieee754_rem_pio2+0x2e0>)
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	f7f6 feb0 	bl	800015c <__adddf3>
 80093fc:	f04f 35ff 	mov.w	r5, #4294967295
 8009400:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009404:	e7c6      	b.n	8009394 <__ieee754_rem_pio2+0x6c>
 8009406:	a382      	add	r3, pc, #520	; (adr r3, 8009610 <__ieee754_rem_pio2+0x2e8>)
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	f7f6 fea6 	bl	800015c <__adddf3>
 8009410:	a381      	add	r3, pc, #516	; (adr r3, 8009618 <__ieee754_rem_pio2+0x2f0>)
 8009412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009416:	4606      	mov	r6, r0
 8009418:	460f      	mov	r7, r1
 800941a:	f7f6 fe9f 	bl	800015c <__adddf3>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4630      	mov	r0, r6
 8009424:	e9c4 2300 	strd	r2, r3, [r4]
 8009428:	4639      	mov	r1, r7
 800942a:	f7f6 fe95 	bl	8000158 <__aeabi_dsub>
 800942e:	a37a      	add	r3, pc, #488	; (adr r3, 8009618 <__ieee754_rem_pio2+0x2f0>)
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	e7e0      	b.n	80093f8 <__ieee754_rem_pio2+0xd0>
 8009436:	4a83      	ldr	r2, [pc, #524]	; (8009644 <__ieee754_rem_pio2+0x31c>)
 8009438:	4592      	cmp	sl, r2
 800943a:	f300 80d2 	bgt.w	80095e2 <__ieee754_rem_pio2+0x2ba>
 800943e:	f000 fe21 	bl	800a084 <fabs>
 8009442:	a377      	add	r3, pc, #476	; (adr r3, 8009620 <__ieee754_rem_pio2+0x2f8>)
 8009444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009448:	4606      	mov	r6, r0
 800944a:	460f      	mov	r7, r1
 800944c:	f7f7 f83c 	bl	80004c8 <__aeabi_dmul>
 8009450:	2200      	movs	r2, #0
 8009452:	4b7d      	ldr	r3, [pc, #500]	; (8009648 <__ieee754_rem_pio2+0x320>)
 8009454:	f7f6 fe82 	bl	800015c <__adddf3>
 8009458:	f7f7 fad0 	bl	80009fc <__aeabi_d2iz>
 800945c:	4605      	mov	r5, r0
 800945e:	f7f6 ffc9 	bl	80003f4 <__aeabi_i2d>
 8009462:	a367      	add	r3, pc, #412	; (adr r3, 8009600 <__ieee754_rem_pio2+0x2d8>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800946c:	f7f7 f82c 	bl	80004c8 <__aeabi_dmul>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4630      	mov	r0, r6
 8009476:	4639      	mov	r1, r7
 8009478:	f7f6 fe6e 	bl	8000158 <__aeabi_dsub>
 800947c:	a362      	add	r3, pc, #392	; (adr r3, 8009608 <__ieee754_rem_pio2+0x2e0>)
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	4606      	mov	r6, r0
 8009484:	460f      	mov	r7, r1
 8009486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800948a:	f7f7 f81d 	bl	80004c8 <__aeabi_dmul>
 800948e:	2d1f      	cmp	r5, #31
 8009490:	4680      	mov	r8, r0
 8009492:	4689      	mov	r9, r1
 8009494:	dc0e      	bgt.n	80094b4 <__ieee754_rem_pio2+0x18c>
 8009496:	4b6d      	ldr	r3, [pc, #436]	; (800964c <__ieee754_rem_pio2+0x324>)
 8009498:	1e6a      	subs	r2, r5, #1
 800949a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800949e:	4553      	cmp	r3, sl
 80094a0:	d008      	beq.n	80094b4 <__ieee754_rem_pio2+0x18c>
 80094a2:	4642      	mov	r2, r8
 80094a4:	464b      	mov	r3, r9
 80094a6:	4630      	mov	r0, r6
 80094a8:	4639      	mov	r1, r7
 80094aa:	f7f6 fe55 	bl	8000158 <__aeabi_dsub>
 80094ae:	e9c4 0100 	strd	r0, r1, [r4]
 80094b2:	e011      	b.n	80094d8 <__ieee754_rem_pio2+0x1b0>
 80094b4:	464b      	mov	r3, r9
 80094b6:	4642      	mov	r2, r8
 80094b8:	4630      	mov	r0, r6
 80094ba:	4639      	mov	r1, r7
 80094bc:	f7f6 fe4c 	bl	8000158 <__aeabi_dsub>
 80094c0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80094c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80094c8:	ebaa 0303 	sub.w	r3, sl, r3
 80094cc:	2b10      	cmp	r3, #16
 80094ce:	dc1f      	bgt.n	8009510 <__ieee754_rem_pio2+0x1e8>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	e9c4 2300 	strd	r2, r3, [r4]
 80094d8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80094dc:	4630      	mov	r0, r6
 80094de:	4653      	mov	r3, sl
 80094e0:	4639      	mov	r1, r7
 80094e2:	f7f6 fe39 	bl	8000158 <__aeabi_dsub>
 80094e6:	4642      	mov	r2, r8
 80094e8:	464b      	mov	r3, r9
 80094ea:	f7f6 fe35 	bl	8000158 <__aeabi_dsub>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	f1bb 0f00 	cmp.w	fp, #0
 80094f6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80094fa:	f6bf af4b 	bge.w	8009394 <__ieee754_rem_pio2+0x6c>
 80094fe:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8009502:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8009506:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800950a:	60e1      	str	r1, [r4, #12]
 800950c:	426d      	negs	r5, r5
 800950e:	e741      	b.n	8009394 <__ieee754_rem_pio2+0x6c>
 8009510:	a33f      	add	r3, pc, #252	; (adr r3, 8009610 <__ieee754_rem_pio2+0x2e8>)
 8009512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800951a:	f7f6 ffd5 	bl	80004c8 <__aeabi_dmul>
 800951e:	4680      	mov	r8, r0
 8009520:	4689      	mov	r9, r1
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	4630      	mov	r0, r6
 8009528:	4639      	mov	r1, r7
 800952a:	f7f6 fe15 	bl	8000158 <__aeabi_dsub>
 800952e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	4630      	mov	r0, r6
 8009538:	4639      	mov	r1, r7
 800953a:	f7f6 fe0d 	bl	8000158 <__aeabi_dsub>
 800953e:	4642      	mov	r2, r8
 8009540:	464b      	mov	r3, r9
 8009542:	f7f6 fe09 	bl	8000158 <__aeabi_dsub>
 8009546:	a334      	add	r3, pc, #208	; (adr r3, 8009618 <__ieee754_rem_pio2+0x2f0>)
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	4606      	mov	r6, r0
 800954e:	460f      	mov	r7, r1
 8009550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009554:	f7f6 ffb8 	bl	80004c8 <__aeabi_dmul>
 8009558:	4632      	mov	r2, r6
 800955a:	463b      	mov	r3, r7
 800955c:	f7f6 fdfc 	bl	8000158 <__aeabi_dsub>
 8009560:	460b      	mov	r3, r1
 8009562:	4602      	mov	r2, r0
 8009564:	4680      	mov	r8, r0
 8009566:	4689      	mov	r9, r1
 8009568:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800956c:	f7f6 fdf4 	bl	8000158 <__aeabi_dsub>
 8009570:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009574:	ebaa 0a03 	sub.w	sl, sl, r3
 8009578:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800957c:	dc06      	bgt.n	800958c <__ieee754_rem_pio2+0x264>
 800957e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	e9c4 2300 	strd	r2, r3, [r4]
 800958a:	e7a5      	b.n	80094d8 <__ieee754_rem_pio2+0x1b0>
 800958c:	a326      	add	r3, pc, #152	; (adr r3, 8009628 <__ieee754_rem_pio2+0x300>)
 800958e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009596:	f7f6 ff97 	bl	80004c8 <__aeabi_dmul>
 800959a:	4680      	mov	r8, r0
 800959c:	4689      	mov	r9, r1
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095a6:	f7f6 fdd7 	bl	8000158 <__aeabi_dsub>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	4606      	mov	r6, r0
 80095b0:	460f      	mov	r7, r1
 80095b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095b6:	f7f6 fdcf 	bl	8000158 <__aeabi_dsub>
 80095ba:	4642      	mov	r2, r8
 80095bc:	464b      	mov	r3, r9
 80095be:	f7f6 fdcb 	bl	8000158 <__aeabi_dsub>
 80095c2:	a31b      	add	r3, pc, #108	; (adr r3, 8009630 <__ieee754_rem_pio2+0x308>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	4680      	mov	r8, r0
 80095ca:	4689      	mov	r9, r1
 80095cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095d0:	f7f6 ff7a 	bl	80004c8 <__aeabi_dmul>
 80095d4:	4642      	mov	r2, r8
 80095d6:	464b      	mov	r3, r9
 80095d8:	f7f6 fdbe 	bl	8000158 <__aeabi_dsub>
 80095dc:	4680      	mov	r8, r0
 80095de:	4689      	mov	r9, r1
 80095e0:	e75f      	b.n	80094a2 <__ieee754_rem_pio2+0x17a>
 80095e2:	4a1b      	ldr	r2, [pc, #108]	; (8009650 <__ieee754_rem_pio2+0x328>)
 80095e4:	4592      	cmp	sl, r2
 80095e6:	dd35      	ble.n	8009654 <__ieee754_rem_pio2+0x32c>
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	f7f6 fdb4 	bl	8000158 <__aeabi_dsub>
 80095f0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80095f4:	e9c4 0100 	strd	r0, r1, [r4]
 80095f8:	e6a6      	b.n	8009348 <__ieee754_rem_pio2+0x20>
 80095fa:	bf00      	nop
 80095fc:	f3af 8000 	nop.w
 8009600:	54400000 	.word	0x54400000
 8009604:	3ff921fb 	.word	0x3ff921fb
 8009608:	1a626331 	.word	0x1a626331
 800960c:	3dd0b461 	.word	0x3dd0b461
 8009610:	1a600000 	.word	0x1a600000
 8009614:	3dd0b461 	.word	0x3dd0b461
 8009618:	2e037073 	.word	0x2e037073
 800961c:	3ba3198a 	.word	0x3ba3198a
 8009620:	6dc9c883 	.word	0x6dc9c883
 8009624:	3fe45f30 	.word	0x3fe45f30
 8009628:	2e000000 	.word	0x2e000000
 800962c:	3ba3198a 	.word	0x3ba3198a
 8009630:	252049c1 	.word	0x252049c1
 8009634:	397b839a 	.word	0x397b839a
 8009638:	3fe921fb 	.word	0x3fe921fb
 800963c:	4002d97b 	.word	0x4002d97b
 8009640:	3ff921fb 	.word	0x3ff921fb
 8009644:	413921fb 	.word	0x413921fb
 8009648:	3fe00000 	.word	0x3fe00000
 800964c:	0800c120 	.word	0x0800c120
 8009650:	7fefffff 	.word	0x7fefffff
 8009654:	ea4f 552a 	mov.w	r5, sl, asr #20
 8009658:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800965c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8009660:	460f      	mov	r7, r1
 8009662:	4606      	mov	r6, r0
 8009664:	f7f7 f9ca 	bl	80009fc <__aeabi_d2iz>
 8009668:	f7f6 fec4 	bl	80003f4 <__aeabi_i2d>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4630      	mov	r0, r6
 8009672:	4639      	mov	r1, r7
 8009674:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009678:	f7f6 fd6e 	bl	8000158 <__aeabi_dsub>
 800967c:	2200      	movs	r2, #0
 800967e:	4b20      	ldr	r3, [pc, #128]	; (8009700 <__ieee754_rem_pio2+0x3d8>)
 8009680:	f7f6 ff22 	bl	80004c8 <__aeabi_dmul>
 8009684:	460f      	mov	r7, r1
 8009686:	4606      	mov	r6, r0
 8009688:	f7f7 f9b8 	bl	80009fc <__aeabi_d2iz>
 800968c:	f7f6 feb2 	bl	80003f4 <__aeabi_i2d>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4630      	mov	r0, r6
 8009696:	4639      	mov	r1, r7
 8009698:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800969c:	f7f6 fd5c 	bl	8000158 <__aeabi_dsub>
 80096a0:	2200      	movs	r2, #0
 80096a2:	4b17      	ldr	r3, [pc, #92]	; (8009700 <__ieee754_rem_pio2+0x3d8>)
 80096a4:	f7f6 ff10 	bl	80004c8 <__aeabi_dmul>
 80096a8:	f04f 0803 	mov.w	r8, #3
 80096ac:	2600      	movs	r6, #0
 80096ae:	2700      	movs	r7, #0
 80096b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80096b4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80096b8:	4632      	mov	r2, r6
 80096ba:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80096be:	463b      	mov	r3, r7
 80096c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80096c4:	f7f7 f968 	bl	8000998 <__aeabi_dcmpeq>
 80096c8:	b9b8      	cbnz	r0, 80096fa <__ieee754_rem_pio2+0x3d2>
 80096ca:	4b0e      	ldr	r3, [pc, #56]	; (8009704 <__ieee754_rem_pio2+0x3dc>)
 80096cc:	462a      	mov	r2, r5
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	2302      	movs	r3, #2
 80096d2:	4621      	mov	r1, r4
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	a806      	add	r0, sp, #24
 80096d8:	4643      	mov	r3, r8
 80096da:	f000 f8d3 	bl	8009884 <__kernel_rem_pio2>
 80096de:	f1bb 0f00 	cmp.w	fp, #0
 80096e2:	4605      	mov	r5, r0
 80096e4:	f6bf ae56 	bge.w	8009394 <__ieee754_rem_pio2+0x6c>
 80096e8:	6863      	ldr	r3, [r4, #4]
 80096ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80096ee:	6063      	str	r3, [r4, #4]
 80096f0:	68e3      	ldr	r3, [r4, #12]
 80096f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80096f6:	60e3      	str	r3, [r4, #12]
 80096f8:	e708      	b.n	800950c <__ieee754_rem_pio2+0x1e4>
 80096fa:	46d0      	mov	r8, sl
 80096fc:	e7dc      	b.n	80096b8 <__ieee754_rem_pio2+0x390>
 80096fe:	bf00      	nop
 8009700:	41700000 	.word	0x41700000
 8009704:	0800c1a0 	.word	0x0800c1a0

08009708 <__kernel_cos>:
 8009708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009710:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009714:	4680      	mov	r8, r0
 8009716:	460f      	mov	r7, r1
 8009718:	e9cd 2300 	strd	r2, r3, [sp]
 800971c:	da04      	bge.n	8009728 <__kernel_cos+0x20>
 800971e:	f7f7 f96d 	bl	80009fc <__aeabi_d2iz>
 8009722:	2800      	cmp	r0, #0
 8009724:	f000 8086 	beq.w	8009834 <__kernel_cos+0x12c>
 8009728:	4642      	mov	r2, r8
 800972a:	463b      	mov	r3, r7
 800972c:	4640      	mov	r0, r8
 800972e:	4639      	mov	r1, r7
 8009730:	f7f6 feca 	bl	80004c8 <__aeabi_dmul>
 8009734:	2200      	movs	r2, #0
 8009736:	4b4e      	ldr	r3, [pc, #312]	; (8009870 <__kernel_cos+0x168>)
 8009738:	4604      	mov	r4, r0
 800973a:	460d      	mov	r5, r1
 800973c:	f7f6 fec4 	bl	80004c8 <__aeabi_dmul>
 8009740:	a33f      	add	r3, pc, #252	; (adr r3, 8009840 <__kernel_cos+0x138>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	4682      	mov	sl, r0
 8009748:	468b      	mov	fp, r1
 800974a:	4620      	mov	r0, r4
 800974c:	4629      	mov	r1, r5
 800974e:	f7f6 febb 	bl	80004c8 <__aeabi_dmul>
 8009752:	a33d      	add	r3, pc, #244	; (adr r3, 8009848 <__kernel_cos+0x140>)
 8009754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009758:	f7f6 fd00 	bl	800015c <__adddf3>
 800975c:	4622      	mov	r2, r4
 800975e:	462b      	mov	r3, r5
 8009760:	f7f6 feb2 	bl	80004c8 <__aeabi_dmul>
 8009764:	a33a      	add	r3, pc, #232	; (adr r3, 8009850 <__kernel_cos+0x148>)
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	f7f6 fcf5 	bl	8000158 <__aeabi_dsub>
 800976e:	4622      	mov	r2, r4
 8009770:	462b      	mov	r3, r5
 8009772:	f7f6 fea9 	bl	80004c8 <__aeabi_dmul>
 8009776:	a338      	add	r3, pc, #224	; (adr r3, 8009858 <__kernel_cos+0x150>)
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	f7f6 fcee 	bl	800015c <__adddf3>
 8009780:	4622      	mov	r2, r4
 8009782:	462b      	mov	r3, r5
 8009784:	f7f6 fea0 	bl	80004c8 <__aeabi_dmul>
 8009788:	a335      	add	r3, pc, #212	; (adr r3, 8009860 <__kernel_cos+0x158>)
 800978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978e:	f7f6 fce3 	bl	8000158 <__aeabi_dsub>
 8009792:	4622      	mov	r2, r4
 8009794:	462b      	mov	r3, r5
 8009796:	f7f6 fe97 	bl	80004c8 <__aeabi_dmul>
 800979a:	a333      	add	r3, pc, #204	; (adr r3, 8009868 <__kernel_cos+0x160>)
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f7f6 fcdc 	bl	800015c <__adddf3>
 80097a4:	4622      	mov	r2, r4
 80097a6:	462b      	mov	r3, r5
 80097a8:	f7f6 fe8e 	bl	80004c8 <__aeabi_dmul>
 80097ac:	4622      	mov	r2, r4
 80097ae:	462b      	mov	r3, r5
 80097b0:	f7f6 fe8a 	bl	80004c8 <__aeabi_dmul>
 80097b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097b8:	4604      	mov	r4, r0
 80097ba:	460d      	mov	r5, r1
 80097bc:	4640      	mov	r0, r8
 80097be:	4639      	mov	r1, r7
 80097c0:	f7f6 fe82 	bl	80004c8 <__aeabi_dmul>
 80097c4:	460b      	mov	r3, r1
 80097c6:	4602      	mov	r2, r0
 80097c8:	4629      	mov	r1, r5
 80097ca:	4620      	mov	r0, r4
 80097cc:	f7f6 fcc4 	bl	8000158 <__aeabi_dsub>
 80097d0:	4b28      	ldr	r3, [pc, #160]	; (8009874 <__kernel_cos+0x16c>)
 80097d2:	4680      	mov	r8, r0
 80097d4:	429e      	cmp	r6, r3
 80097d6:	4689      	mov	r9, r1
 80097d8:	dc0e      	bgt.n	80097f8 <__kernel_cos+0xf0>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	4650      	mov	r0, sl
 80097e0:	4659      	mov	r1, fp
 80097e2:	f7f6 fcb9 	bl	8000158 <__aeabi_dsub>
 80097e6:	4602      	mov	r2, r0
 80097e8:	2000      	movs	r0, #0
 80097ea:	460b      	mov	r3, r1
 80097ec:	4922      	ldr	r1, [pc, #136]	; (8009878 <__kernel_cos+0x170>)
 80097ee:	f7f6 fcb3 	bl	8000158 <__aeabi_dsub>
 80097f2:	b003      	add	sp, #12
 80097f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f8:	2400      	movs	r4, #0
 80097fa:	4b20      	ldr	r3, [pc, #128]	; (800987c <__kernel_cos+0x174>)
 80097fc:	4622      	mov	r2, r4
 80097fe:	429e      	cmp	r6, r3
 8009800:	bfcc      	ite	gt
 8009802:	4d1f      	ldrgt	r5, [pc, #124]	; (8009880 <__kernel_cos+0x178>)
 8009804:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009808:	462b      	mov	r3, r5
 800980a:	2000      	movs	r0, #0
 800980c:	491a      	ldr	r1, [pc, #104]	; (8009878 <__kernel_cos+0x170>)
 800980e:	f7f6 fca3 	bl	8000158 <__aeabi_dsub>
 8009812:	4622      	mov	r2, r4
 8009814:	4606      	mov	r6, r0
 8009816:	460f      	mov	r7, r1
 8009818:	462b      	mov	r3, r5
 800981a:	4650      	mov	r0, sl
 800981c:	4659      	mov	r1, fp
 800981e:	f7f6 fc9b 	bl	8000158 <__aeabi_dsub>
 8009822:	4642      	mov	r2, r8
 8009824:	464b      	mov	r3, r9
 8009826:	f7f6 fc97 	bl	8000158 <__aeabi_dsub>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4630      	mov	r0, r6
 8009830:	4639      	mov	r1, r7
 8009832:	e7dc      	b.n	80097ee <__kernel_cos+0xe6>
 8009834:	2000      	movs	r0, #0
 8009836:	4910      	ldr	r1, [pc, #64]	; (8009878 <__kernel_cos+0x170>)
 8009838:	e7db      	b.n	80097f2 <__kernel_cos+0xea>
 800983a:	bf00      	nop
 800983c:	f3af 8000 	nop.w
 8009840:	be8838d4 	.word	0xbe8838d4
 8009844:	bda8fae9 	.word	0xbda8fae9
 8009848:	bdb4b1c4 	.word	0xbdb4b1c4
 800984c:	3e21ee9e 	.word	0x3e21ee9e
 8009850:	809c52ad 	.word	0x809c52ad
 8009854:	3e927e4f 	.word	0x3e927e4f
 8009858:	19cb1590 	.word	0x19cb1590
 800985c:	3efa01a0 	.word	0x3efa01a0
 8009860:	16c15177 	.word	0x16c15177
 8009864:	3f56c16c 	.word	0x3f56c16c
 8009868:	5555554c 	.word	0x5555554c
 800986c:	3fa55555 	.word	0x3fa55555
 8009870:	3fe00000 	.word	0x3fe00000
 8009874:	3fd33332 	.word	0x3fd33332
 8009878:	3ff00000 	.word	0x3ff00000
 800987c:	3fe90000 	.word	0x3fe90000
 8009880:	3fd20000 	.word	0x3fd20000

08009884 <__kernel_rem_pio2>:
 8009884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009888:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800988c:	9307      	str	r3, [sp, #28]
 800988e:	9104      	str	r1, [sp, #16]
 8009890:	4bbf      	ldr	r3, [pc, #764]	; (8009b90 <__kernel_rem_pio2+0x30c>)
 8009892:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009894:	1ed4      	subs	r4, r2, #3
 8009896:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800989a:	2500      	movs	r5, #0
 800989c:	9302      	str	r3, [sp, #8]
 800989e:	9b07      	ldr	r3, [sp, #28]
 80098a0:	9008      	str	r0, [sp, #32]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	9306      	str	r3, [sp, #24]
 80098a6:	2318      	movs	r3, #24
 80098a8:	fb94 f4f3 	sdiv	r4, r4, r3
 80098ac:	f06f 0317 	mvn.w	r3, #23
 80098b0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80098b4:	fb04 3303 	mla	r3, r4, r3, r3
 80098b8:	eb03 0a02 	add.w	sl, r3, r2
 80098bc:	9a06      	ldr	r2, [sp, #24]
 80098be:	9b02      	ldr	r3, [sp, #8]
 80098c0:	1aa7      	subs	r7, r4, r2
 80098c2:	eb03 0802 	add.w	r8, r3, r2
 80098c6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80098c8:	2200      	movs	r2, #0
 80098ca:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80098ce:	2300      	movs	r3, #0
 80098d0:	ae1e      	add	r6, sp, #120	; 0x78
 80098d2:	4545      	cmp	r5, r8
 80098d4:	dd14      	ble.n	8009900 <__kernel_rem_pio2+0x7c>
 80098d6:	2600      	movs	r6, #0
 80098d8:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 80098dc:	9b02      	ldr	r3, [sp, #8]
 80098de:	429e      	cmp	r6, r3
 80098e0:	dc39      	bgt.n	8009956 <__kernel_rem_pio2+0xd2>
 80098e2:	9b08      	ldr	r3, [sp, #32]
 80098e4:	f04f 0800 	mov.w	r8, #0
 80098e8:	3b08      	subs	r3, #8
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	9b07      	ldr	r3, [sp, #28]
 80098ee:	f04f 0900 	mov.w	r9, #0
 80098f2:	199d      	adds	r5, r3, r6
 80098f4:	ab20      	add	r3, sp, #128	; 0x80
 80098f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80098fa:	9305      	str	r3, [sp, #20]
 80098fc:	2700      	movs	r7, #0
 80098fe:	e023      	b.n	8009948 <__kernel_rem_pio2+0xc4>
 8009900:	42ef      	cmn	r7, r5
 8009902:	d40b      	bmi.n	800991c <__kernel_rem_pio2+0x98>
 8009904:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009908:	e9cd 2300 	strd	r2, r3, [sp]
 800990c:	f7f6 fd72 	bl	80003f4 <__aeabi_i2d>
 8009910:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009914:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8009918:	3501      	adds	r5, #1
 800991a:	e7da      	b.n	80098d2 <__kernel_rem_pio2+0x4e>
 800991c:	4610      	mov	r0, r2
 800991e:	4619      	mov	r1, r3
 8009920:	e7f8      	b.n	8009914 <__kernel_rem_pio2+0x90>
 8009922:	9905      	ldr	r1, [sp, #20]
 8009924:	9d00      	ldr	r5, [sp, #0]
 8009926:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800992a:	9105      	str	r1, [sp, #20]
 800992c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8009930:	9500      	str	r5, [sp, #0]
 8009932:	f7f6 fdc9 	bl	80004c8 <__aeabi_dmul>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	4640      	mov	r0, r8
 800993c:	4649      	mov	r1, r9
 800993e:	f7f6 fc0d 	bl	800015c <__adddf3>
 8009942:	4680      	mov	r8, r0
 8009944:	4689      	mov	r9, r1
 8009946:	3701      	adds	r7, #1
 8009948:	9b06      	ldr	r3, [sp, #24]
 800994a:	429f      	cmp	r7, r3
 800994c:	dde9      	ble.n	8009922 <__kernel_rem_pio2+0x9e>
 800994e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8009952:	3601      	adds	r6, #1
 8009954:	e7c2      	b.n	80098dc <__kernel_rem_pio2+0x58>
 8009956:	9b02      	ldr	r3, [sp, #8]
 8009958:	aa0c      	add	r2, sp, #48	; 0x30
 800995a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800995e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009960:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009962:	9f02      	ldr	r7, [sp, #8]
 8009964:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009968:	930a      	str	r3, [sp, #40]	; 0x28
 800996a:	2600      	movs	r6, #0
 800996c:	ab98      	add	r3, sp, #608	; 0x260
 800996e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8009972:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009976:	f10b 3bff 	add.w	fp, fp, #4294967295
 800997a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800997e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8009982:	ab98      	add	r3, sp, #608	; 0x260
 8009984:	445b      	add	r3, fp
 8009986:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800998a:	1bbb      	subs	r3, r7, r6
 800998c:	2b00      	cmp	r3, #0
 800998e:	dc71      	bgt.n	8009a74 <__kernel_rem_pio2+0x1f0>
 8009990:	4652      	mov	r2, sl
 8009992:	4640      	mov	r0, r8
 8009994:	4649      	mov	r1, r9
 8009996:	f000 fbff 	bl	800a198 <scalbn>
 800999a:	2200      	movs	r2, #0
 800999c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80099a0:	4604      	mov	r4, r0
 80099a2:	460d      	mov	r5, r1
 80099a4:	f7f6 fd90 	bl	80004c8 <__aeabi_dmul>
 80099a8:	f000 fb72 	bl	800a090 <floor>
 80099ac:	2200      	movs	r2, #0
 80099ae:	4b79      	ldr	r3, [pc, #484]	; (8009b94 <__kernel_rem_pio2+0x310>)
 80099b0:	f7f6 fd8a 	bl	80004c8 <__aeabi_dmul>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4620      	mov	r0, r4
 80099ba:	4629      	mov	r1, r5
 80099bc:	f7f6 fbcc 	bl	8000158 <__aeabi_dsub>
 80099c0:	460d      	mov	r5, r1
 80099c2:	4604      	mov	r4, r0
 80099c4:	f7f7 f81a 	bl	80009fc <__aeabi_d2iz>
 80099c8:	9005      	str	r0, [sp, #20]
 80099ca:	f7f6 fd13 	bl	80003f4 <__aeabi_i2d>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4620      	mov	r0, r4
 80099d4:	4629      	mov	r1, r5
 80099d6:	f7f6 fbbf 	bl	8000158 <__aeabi_dsub>
 80099da:	f1ba 0f00 	cmp.w	sl, #0
 80099de:	4680      	mov	r8, r0
 80099e0:	4689      	mov	r9, r1
 80099e2:	dd6c      	ble.n	8009abe <__kernel_rem_pio2+0x23a>
 80099e4:	1e7a      	subs	r2, r7, #1
 80099e6:	ab0c      	add	r3, sp, #48	; 0x30
 80099e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80099ec:	f1ca 0118 	rsb	r1, sl, #24
 80099f0:	9c05      	ldr	r4, [sp, #20]
 80099f2:	fa40 f301 	asr.w	r3, r0, r1
 80099f6:	441c      	add	r4, r3
 80099f8:	408b      	lsls	r3, r1
 80099fa:	1ac0      	subs	r0, r0, r3
 80099fc:	ab0c      	add	r3, sp, #48	; 0x30
 80099fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009a02:	f1ca 0317 	rsb	r3, sl, #23
 8009a06:	9405      	str	r4, [sp, #20]
 8009a08:	fa40 f303 	asr.w	r3, r0, r3
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	9b00      	ldr	r3, [sp, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	dd62      	ble.n	8009ada <__kernel_rem_pio2+0x256>
 8009a14:	2200      	movs	r2, #0
 8009a16:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009a1a:	4614      	mov	r4, r2
 8009a1c:	9b05      	ldr	r3, [sp, #20]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	9305      	str	r3, [sp, #20]
 8009a22:	4297      	cmp	r7, r2
 8009a24:	f300 809f 	bgt.w	8009b66 <__kernel_rem_pio2+0x2e2>
 8009a28:	f1ba 0f00 	cmp.w	sl, #0
 8009a2c:	dd07      	ble.n	8009a3e <__kernel_rem_pio2+0x1ba>
 8009a2e:	f1ba 0f01 	cmp.w	sl, #1
 8009a32:	f000 80bb 	beq.w	8009bac <__kernel_rem_pio2+0x328>
 8009a36:	f1ba 0f02 	cmp.w	sl, #2
 8009a3a:	f000 80c1 	beq.w	8009bc0 <__kernel_rem_pio2+0x33c>
 8009a3e:	9b00      	ldr	r3, [sp, #0]
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d14a      	bne.n	8009ada <__kernel_rem_pio2+0x256>
 8009a44:	4642      	mov	r2, r8
 8009a46:	464b      	mov	r3, r9
 8009a48:	2000      	movs	r0, #0
 8009a4a:	4953      	ldr	r1, [pc, #332]	; (8009b98 <__kernel_rem_pio2+0x314>)
 8009a4c:	f7f6 fb84 	bl	8000158 <__aeabi_dsub>
 8009a50:	4680      	mov	r8, r0
 8009a52:	4689      	mov	r9, r1
 8009a54:	2c00      	cmp	r4, #0
 8009a56:	d040      	beq.n	8009ada <__kernel_rem_pio2+0x256>
 8009a58:	4652      	mov	r2, sl
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	494e      	ldr	r1, [pc, #312]	; (8009b98 <__kernel_rem_pio2+0x314>)
 8009a5e:	f000 fb9b 	bl	800a198 <scalbn>
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4640      	mov	r0, r8
 8009a68:	4649      	mov	r1, r9
 8009a6a:	f7f6 fb75 	bl	8000158 <__aeabi_dsub>
 8009a6e:	4680      	mov	r8, r0
 8009a70:	4689      	mov	r9, r1
 8009a72:	e032      	b.n	8009ada <__kernel_rem_pio2+0x256>
 8009a74:	2200      	movs	r2, #0
 8009a76:	4b49      	ldr	r3, [pc, #292]	; (8009b9c <__kernel_rem_pio2+0x318>)
 8009a78:	4640      	mov	r0, r8
 8009a7a:	4649      	mov	r1, r9
 8009a7c:	f7f6 fd24 	bl	80004c8 <__aeabi_dmul>
 8009a80:	f7f6 ffbc 	bl	80009fc <__aeabi_d2iz>
 8009a84:	f7f6 fcb6 	bl	80003f4 <__aeabi_i2d>
 8009a88:	2200      	movs	r2, #0
 8009a8a:	4b45      	ldr	r3, [pc, #276]	; (8009ba0 <__kernel_rem_pio2+0x31c>)
 8009a8c:	e9cd 0100 	strd	r0, r1, [sp]
 8009a90:	f7f6 fd1a 	bl	80004c8 <__aeabi_dmul>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4640      	mov	r0, r8
 8009a9a:	4649      	mov	r1, r9
 8009a9c:	f7f6 fb5c 	bl	8000158 <__aeabi_dsub>
 8009aa0:	f7f6 ffac 	bl	80009fc <__aeabi_d2iz>
 8009aa4:	ab0c      	add	r3, sp, #48	; 0x30
 8009aa6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009aaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009aae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ab2:	f7f6 fb53 	bl	800015c <__adddf3>
 8009ab6:	3601      	adds	r6, #1
 8009ab8:	4680      	mov	r8, r0
 8009aba:	4689      	mov	r9, r1
 8009abc:	e765      	b.n	800998a <__kernel_rem_pio2+0x106>
 8009abe:	d105      	bne.n	8009acc <__kernel_rem_pio2+0x248>
 8009ac0:	1e7b      	subs	r3, r7, #1
 8009ac2:	aa0c      	add	r2, sp, #48	; 0x30
 8009ac4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009ac8:	15c3      	asrs	r3, r0, #23
 8009aca:	e79f      	b.n	8009a0c <__kernel_rem_pio2+0x188>
 8009acc:	2200      	movs	r2, #0
 8009ace:	4b35      	ldr	r3, [pc, #212]	; (8009ba4 <__kernel_rem_pio2+0x320>)
 8009ad0:	f7f6 ff80 	bl	80009d4 <__aeabi_dcmpge>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d143      	bne.n	8009b60 <__kernel_rem_pio2+0x2dc>
 8009ad8:	9000      	str	r0, [sp, #0]
 8009ada:	2200      	movs	r2, #0
 8009adc:	2300      	movs	r3, #0
 8009ade:	4640      	mov	r0, r8
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	f7f6 ff59 	bl	8000998 <__aeabi_dcmpeq>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	f000 80c3 	beq.w	8009c72 <__kernel_rem_pio2+0x3ee>
 8009aec:	1e7c      	subs	r4, r7, #1
 8009aee:	4623      	mov	r3, r4
 8009af0:	2200      	movs	r2, #0
 8009af2:	9902      	ldr	r1, [sp, #8]
 8009af4:	428b      	cmp	r3, r1
 8009af6:	da6a      	bge.n	8009bce <__kernel_rem_pio2+0x34a>
 8009af8:	2a00      	cmp	r2, #0
 8009afa:	f000 8084 	beq.w	8009c06 <__kernel_rem_pio2+0x382>
 8009afe:	ab0c      	add	r3, sp, #48	; 0x30
 8009b00:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009b04:	f1aa 0a18 	sub.w	sl, sl, #24
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f000 80b0 	beq.w	8009c6e <__kernel_rem_pio2+0x3ea>
 8009b0e:	4652      	mov	r2, sl
 8009b10:	2000      	movs	r0, #0
 8009b12:	4921      	ldr	r1, [pc, #132]	; (8009b98 <__kernel_rem_pio2+0x314>)
 8009b14:	f000 fb40 	bl	800a198 <scalbn>
 8009b18:	4625      	mov	r5, r4
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	460f      	mov	r7, r1
 8009b1e:	f04f 0a00 	mov.w	sl, #0
 8009b22:	00e3      	lsls	r3, r4, #3
 8009b24:	aa98      	add	r2, sp, #608	; 0x260
 8009b26:	eb02 0803 	add.w	r8, r2, r3
 8009b2a:	f8df b070 	ldr.w	fp, [pc, #112]	; 8009b9c <__kernel_rem_pio2+0x318>
 8009b2e:	9306      	str	r3, [sp, #24]
 8009b30:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8009b34:	2d00      	cmp	r5, #0
 8009b36:	f280 80d2 	bge.w	8009cde <__kernel_rem_pio2+0x45a>
 8009b3a:	2500      	movs	r5, #0
 8009b3c:	9a06      	ldr	r2, [sp, #24]
 8009b3e:	ab98      	add	r3, sp, #608	; 0x260
 8009b40:	189e      	adds	r6, r3, r2
 8009b42:	3ea8      	subs	r6, #168	; 0xa8
 8009b44:	1b63      	subs	r3, r4, r5
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f2c0 80f9 	blt.w	8009d3e <__kernel_rem_pio2+0x4ba>
 8009b4c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8009ba8 <__kernel_rem_pio2+0x324>
 8009b50:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8009b54:	f04f 0a00 	mov.w	sl, #0
 8009b58:	f04f 0b00 	mov.w	fp, #0
 8009b5c:	2700      	movs	r7, #0
 8009b5e:	e0e2      	b.n	8009d26 <__kernel_rem_pio2+0x4a2>
 8009b60:	2302      	movs	r3, #2
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	e756      	b.n	8009a14 <__kernel_rem_pio2+0x190>
 8009b66:	ab0c      	add	r3, sp, #48	; 0x30
 8009b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6c:	b94c      	cbnz	r4, 8009b82 <__kernel_rem_pio2+0x2fe>
 8009b6e:	b12b      	cbz	r3, 8009b7c <__kernel_rem_pio2+0x2f8>
 8009b70:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009b74:	a80c      	add	r0, sp, #48	; 0x30
 8009b76:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	3201      	adds	r2, #1
 8009b7e:	461c      	mov	r4, r3
 8009b80:	e74f      	b.n	8009a22 <__kernel_rem_pio2+0x19e>
 8009b82:	1acb      	subs	r3, r1, r3
 8009b84:	a80c      	add	r0, sp, #48	; 0x30
 8009b86:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009b8a:	4623      	mov	r3, r4
 8009b8c:	e7f6      	b.n	8009b7c <__kernel_rem_pio2+0x2f8>
 8009b8e:	bf00      	nop
 8009b90:	0800c2e8 	.word	0x0800c2e8
 8009b94:	40200000 	.word	0x40200000
 8009b98:	3ff00000 	.word	0x3ff00000
 8009b9c:	3e700000 	.word	0x3e700000
 8009ba0:	41700000 	.word	0x41700000
 8009ba4:	3fe00000 	.word	0x3fe00000
 8009ba8:	0800c2a0 	.word	0x0800c2a0
 8009bac:	1e7a      	subs	r2, r7, #1
 8009bae:	ab0c      	add	r3, sp, #48	; 0x30
 8009bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009bb8:	a90c      	add	r1, sp, #48	; 0x30
 8009bba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009bbe:	e73e      	b.n	8009a3e <__kernel_rem_pio2+0x1ba>
 8009bc0:	1e7a      	subs	r2, r7, #1
 8009bc2:	ab0c      	add	r3, sp, #48	; 0x30
 8009bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009bcc:	e7f4      	b.n	8009bb8 <__kernel_rem_pio2+0x334>
 8009bce:	a90c      	add	r1, sp, #48	; 0x30
 8009bd0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	e78b      	b.n	8009af2 <__kernel_rem_pio2+0x26e>
 8009bda:	3401      	adds	r4, #1
 8009bdc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009be0:	2a00      	cmp	r2, #0
 8009be2:	d0fa      	beq.n	8009bda <__kernel_rem_pio2+0x356>
 8009be4:	ab98      	add	r3, sp, #608	; 0x260
 8009be6:	449b      	add	fp, r3
 8009be8:	9b07      	ldr	r3, [sp, #28]
 8009bea:	1c7e      	adds	r6, r7, #1
 8009bec:	19dd      	adds	r5, r3, r7
 8009bee:	ab98      	add	r3, sp, #608	; 0x260
 8009bf0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009bf4:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8009bf8:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8009bfc:	443c      	add	r4, r7
 8009bfe:	42b4      	cmp	r4, r6
 8009c00:	da04      	bge.n	8009c0c <__kernel_rem_pio2+0x388>
 8009c02:	4627      	mov	r7, r4
 8009c04:	e6b1      	b.n	800996a <__kernel_rem_pio2+0xe6>
 8009c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c08:	2401      	movs	r4, #1
 8009c0a:	e7e7      	b.n	8009bdc <__kernel_rem_pio2+0x358>
 8009c0c:	f105 0308 	add.w	r3, r5, #8
 8009c10:	9309      	str	r3, [sp, #36]	; 0x24
 8009c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c14:	2700      	movs	r7, #0
 8009c16:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009c1a:	f7f6 fbeb 	bl	80003f4 <__aeabi_i2d>
 8009c1e:	f04f 0800 	mov.w	r8, #0
 8009c22:	f04f 0900 	mov.w	r9, #0
 8009c26:	9b08      	ldr	r3, [sp, #32]
 8009c28:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009c2c:	3b08      	subs	r3, #8
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	f105 0310 	add.w	r3, r5, #16
 8009c34:	9305      	str	r3, [sp, #20]
 8009c36:	9b06      	ldr	r3, [sp, #24]
 8009c38:	429f      	cmp	r7, r3
 8009c3a:	dd04      	ble.n	8009c46 <__kernel_rem_pio2+0x3c2>
 8009c3c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8009c40:	3601      	adds	r6, #1
 8009c42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009c44:	e7db      	b.n	8009bfe <__kernel_rem_pio2+0x37a>
 8009c46:	9905      	ldr	r1, [sp, #20]
 8009c48:	9d00      	ldr	r5, [sp, #0]
 8009c4a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009c4e:	9105      	str	r1, [sp, #20]
 8009c50:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8009c54:	9500      	str	r5, [sp, #0]
 8009c56:	f7f6 fc37 	bl	80004c8 <__aeabi_dmul>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4640      	mov	r0, r8
 8009c60:	4649      	mov	r1, r9
 8009c62:	f7f6 fa7b 	bl	800015c <__adddf3>
 8009c66:	3701      	adds	r7, #1
 8009c68:	4680      	mov	r8, r0
 8009c6a:	4689      	mov	r9, r1
 8009c6c:	e7e3      	b.n	8009c36 <__kernel_rem_pio2+0x3b2>
 8009c6e:	3c01      	subs	r4, #1
 8009c70:	e745      	b.n	8009afe <__kernel_rem_pio2+0x27a>
 8009c72:	f1ca 0200 	rsb	r2, sl, #0
 8009c76:	4640      	mov	r0, r8
 8009c78:	4649      	mov	r1, r9
 8009c7a:	f000 fa8d 	bl	800a198 <scalbn>
 8009c7e:	2200      	movs	r2, #0
 8009c80:	4ba3      	ldr	r3, [pc, #652]	; (8009f10 <__kernel_rem_pio2+0x68c>)
 8009c82:	4604      	mov	r4, r0
 8009c84:	460d      	mov	r5, r1
 8009c86:	f7f6 fea5 	bl	80009d4 <__aeabi_dcmpge>
 8009c8a:	b1f8      	cbz	r0, 8009ccc <__kernel_rem_pio2+0x448>
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	4ba1      	ldr	r3, [pc, #644]	; (8009f14 <__kernel_rem_pio2+0x690>)
 8009c90:	4620      	mov	r0, r4
 8009c92:	4629      	mov	r1, r5
 8009c94:	f7f6 fc18 	bl	80004c8 <__aeabi_dmul>
 8009c98:	f7f6 feb0 	bl	80009fc <__aeabi_d2iz>
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	f7f6 fba9 	bl	80003f4 <__aeabi_i2d>
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	4b9a      	ldr	r3, [pc, #616]	; (8009f10 <__kernel_rem_pio2+0x68c>)
 8009ca6:	f7f6 fc0f 	bl	80004c8 <__aeabi_dmul>
 8009caa:	460b      	mov	r3, r1
 8009cac:	4602      	mov	r2, r0
 8009cae:	4629      	mov	r1, r5
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f7f6 fa51 	bl	8000158 <__aeabi_dsub>
 8009cb6:	f7f6 fea1 	bl	80009fc <__aeabi_d2iz>
 8009cba:	1c7c      	adds	r4, r7, #1
 8009cbc:	ab0c      	add	r3, sp, #48	; 0x30
 8009cbe:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009cc2:	f10a 0a18 	add.w	sl, sl, #24
 8009cc6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8009cca:	e720      	b.n	8009b0e <__kernel_rem_pio2+0x28a>
 8009ccc:	4620      	mov	r0, r4
 8009cce:	4629      	mov	r1, r5
 8009cd0:	f7f6 fe94 	bl	80009fc <__aeabi_d2iz>
 8009cd4:	ab0c      	add	r3, sp, #48	; 0x30
 8009cd6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009cda:	463c      	mov	r4, r7
 8009cdc:	e717      	b.n	8009b0e <__kernel_rem_pio2+0x28a>
 8009cde:	ab0c      	add	r3, sp, #48	; 0x30
 8009ce0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ce4:	f7f6 fb86 	bl	80003f4 <__aeabi_i2d>
 8009ce8:	4632      	mov	r2, r6
 8009cea:	463b      	mov	r3, r7
 8009cec:	f7f6 fbec 	bl	80004c8 <__aeabi_dmul>
 8009cf0:	4652      	mov	r2, sl
 8009cf2:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009cf6:	465b      	mov	r3, fp
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	4639      	mov	r1, r7
 8009cfc:	f7f6 fbe4 	bl	80004c8 <__aeabi_dmul>
 8009d00:	3d01      	subs	r5, #1
 8009d02:	4606      	mov	r6, r0
 8009d04:	460f      	mov	r7, r1
 8009d06:	e715      	b.n	8009b34 <__kernel_rem_pio2+0x2b0>
 8009d08:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8009d0c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8009d10:	f7f6 fbda 	bl	80004c8 <__aeabi_dmul>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	4650      	mov	r0, sl
 8009d1a:	4659      	mov	r1, fp
 8009d1c:	f7f6 fa1e 	bl	800015c <__adddf3>
 8009d20:	4682      	mov	sl, r0
 8009d22:	468b      	mov	fp, r1
 8009d24:	3701      	adds	r7, #1
 8009d26:	9b02      	ldr	r3, [sp, #8]
 8009d28:	429f      	cmp	r7, r3
 8009d2a:	dc01      	bgt.n	8009d30 <__kernel_rem_pio2+0x4ac>
 8009d2c:	42bd      	cmp	r5, r7
 8009d2e:	daeb      	bge.n	8009d08 <__kernel_rem_pio2+0x484>
 8009d30:	ab48      	add	r3, sp, #288	; 0x120
 8009d32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009d36:	e9c3 ab00 	strd	sl, fp, [r3]
 8009d3a:	3501      	adds	r5, #1
 8009d3c:	e702      	b.n	8009b44 <__kernel_rem_pio2+0x2c0>
 8009d3e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009d40:	2b03      	cmp	r3, #3
 8009d42:	d86c      	bhi.n	8009e1e <__kernel_rem_pio2+0x59a>
 8009d44:	e8df f003 	tbb	[pc, r3]
 8009d48:	022f2f59 	.word	0x022f2f59
 8009d4c:	9a06      	ldr	r2, [sp, #24]
 8009d4e:	ab48      	add	r3, sp, #288	; 0x120
 8009d50:	189d      	adds	r5, r3, r2
 8009d52:	46aa      	mov	sl, r5
 8009d54:	46a3      	mov	fp, r4
 8009d56:	f1bb 0f00 	cmp.w	fp, #0
 8009d5a:	f300 8087 	bgt.w	8009e6c <__kernel_rem_pio2+0x5e8>
 8009d5e:	46a2      	mov	sl, r4
 8009d60:	f1ba 0f01 	cmp.w	sl, #1
 8009d64:	f300 809f 	bgt.w	8009ea6 <__kernel_rem_pio2+0x622>
 8009d68:	2700      	movs	r7, #0
 8009d6a:	463e      	mov	r6, r7
 8009d6c:	9d06      	ldr	r5, [sp, #24]
 8009d6e:	ab48      	add	r3, sp, #288	; 0x120
 8009d70:	3508      	adds	r5, #8
 8009d72:	441d      	add	r5, r3
 8009d74:	2c01      	cmp	r4, #1
 8009d76:	f300 80b3 	bgt.w	8009ee0 <__kernel_rem_pio2+0x65c>
 8009d7a:	9b00      	ldr	r3, [sp, #0]
 8009d7c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 8009d7e:	9849      	ldr	r0, [sp, #292]	; 0x124
 8009d80:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 8009d82:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f040 80b5 	bne.w	8009ef4 <__kernel_rem_pio2+0x670>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	462a      	mov	r2, r5
 8009d8e:	9804      	ldr	r0, [sp, #16]
 8009d90:	e9c0 2300 	strd	r2, r3, [r0]
 8009d94:	4622      	mov	r2, r4
 8009d96:	460b      	mov	r3, r1
 8009d98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009d9c:	463a      	mov	r2, r7
 8009d9e:	4633      	mov	r3, r6
 8009da0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009da4:	e03b      	b.n	8009e1e <__kernel_rem_pio2+0x59a>
 8009da6:	f04f 0c00 	mov.w	ip, #0
 8009daa:	4626      	mov	r6, r4
 8009dac:	4667      	mov	r7, ip
 8009dae:	9d06      	ldr	r5, [sp, #24]
 8009db0:	ab48      	add	r3, sp, #288	; 0x120
 8009db2:	3508      	adds	r5, #8
 8009db4:	441d      	add	r5, r3
 8009db6:	2e00      	cmp	r6, #0
 8009db8:	da42      	bge.n	8009e40 <__kernel_rem_pio2+0x5bc>
 8009dba:	9b00      	ldr	r3, [sp, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d049      	beq.n	8009e54 <__kernel_rem_pio2+0x5d0>
 8009dc0:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8009dc4:	4662      	mov	r2, ip
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	9904      	ldr	r1, [sp, #16]
 8009dca:	2601      	movs	r6, #1
 8009dcc:	e9c1 2300 	strd	r2, r3, [r1]
 8009dd0:	a948      	add	r1, sp, #288	; 0x120
 8009dd2:	463b      	mov	r3, r7
 8009dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dd8:	f7f6 f9be 	bl	8000158 <__aeabi_dsub>
 8009ddc:	4684      	mov	ip, r0
 8009dde:	460f      	mov	r7, r1
 8009de0:	ad48      	add	r5, sp, #288	; 0x120
 8009de2:	42b4      	cmp	r4, r6
 8009de4:	da38      	bge.n	8009e58 <__kernel_rem_pio2+0x5d4>
 8009de6:	9b00      	ldr	r3, [sp, #0]
 8009de8:	b10b      	cbz	r3, 8009dee <__kernel_rem_pio2+0x56a>
 8009dea:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009dee:	4662      	mov	r2, ip
 8009df0:	463b      	mov	r3, r7
 8009df2:	9904      	ldr	r1, [sp, #16]
 8009df4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009df8:	e011      	b.n	8009e1e <__kernel_rem_pio2+0x59a>
 8009dfa:	2700      	movs	r7, #0
 8009dfc:	463d      	mov	r5, r7
 8009dfe:	9b06      	ldr	r3, [sp, #24]
 8009e00:	aa98      	add	r2, sp, #608	; 0x260
 8009e02:	4413      	add	r3, r2
 8009e04:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8009e08:	2c00      	cmp	r4, #0
 8009e0a:	da0f      	bge.n	8009e2c <__kernel_rem_pio2+0x5a8>
 8009e0c:	9b00      	ldr	r3, [sp, #0]
 8009e0e:	b10b      	cbz	r3, 8009e14 <__kernel_rem_pio2+0x590>
 8009e10:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8009e14:	463a      	mov	r2, r7
 8009e16:	462b      	mov	r3, r5
 8009e18:	9904      	ldr	r1, [sp, #16]
 8009e1a:	e9c1 2300 	strd	r2, r3, [r1]
 8009e1e:	9b05      	ldr	r3, [sp, #20]
 8009e20:	f003 0007 	and.w	r0, r3, #7
 8009e24:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009e32:	4629      	mov	r1, r5
 8009e34:	f7f6 f992 	bl	800015c <__adddf3>
 8009e38:	3c01      	subs	r4, #1
 8009e3a:	4607      	mov	r7, r0
 8009e3c:	460d      	mov	r5, r1
 8009e3e:	e7e3      	b.n	8009e08 <__kernel_rem_pio2+0x584>
 8009e40:	4660      	mov	r0, ip
 8009e42:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009e46:	4639      	mov	r1, r7
 8009e48:	f7f6 f988 	bl	800015c <__adddf3>
 8009e4c:	3e01      	subs	r6, #1
 8009e4e:	4684      	mov	ip, r0
 8009e50:	460f      	mov	r7, r1
 8009e52:	e7b0      	b.n	8009db6 <__kernel_rem_pio2+0x532>
 8009e54:	4639      	mov	r1, r7
 8009e56:	e7b5      	b.n	8009dc4 <__kernel_rem_pio2+0x540>
 8009e58:	4660      	mov	r0, ip
 8009e5a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8009e5e:	4639      	mov	r1, r7
 8009e60:	f7f6 f97c 	bl	800015c <__adddf3>
 8009e64:	3601      	adds	r6, #1
 8009e66:	4684      	mov	ip, r0
 8009e68:	460f      	mov	r7, r1
 8009e6a:	e7ba      	b.n	8009de2 <__kernel_rem_pio2+0x55e>
 8009e6c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8009e70:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8009e74:	4640      	mov	r0, r8
 8009e76:	4649      	mov	r1, r9
 8009e78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e7c:	f7f6 f96e 	bl	800015c <__adddf3>
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	4606      	mov	r6, r0
 8009e86:	460f      	mov	r7, r1
 8009e88:	4640      	mov	r0, r8
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	f7f6 f964 	bl	8000158 <__aeabi_dsub>
 8009e90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e94:	f7f6 f962 	bl	800015c <__adddf3>
 8009e98:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009ea0:	e9ca 6700 	strd	r6, r7, [sl]
 8009ea4:	e757      	b.n	8009d56 <__kernel_rem_pio2+0x4d2>
 8009ea6:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 8009eaa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8009eae:	4630      	mov	r0, r6
 8009eb0:	4639      	mov	r1, r7
 8009eb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009eb6:	f7f6 f951 	bl	800015c <__adddf3>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4680      	mov	r8, r0
 8009ec0:	4689      	mov	r9, r1
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	4639      	mov	r1, r7
 8009ec6:	f7f6 f947 	bl	8000158 <__aeabi_dsub>
 8009eca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ece:	f7f6 f945 	bl	800015c <__adddf3>
 8009ed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ed6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009eda:	e9c5 8900 	strd	r8, r9, [r5]
 8009ede:	e73f      	b.n	8009d60 <__kernel_rem_pio2+0x4dc>
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009ee6:	4631      	mov	r1, r6
 8009ee8:	f7f6 f938 	bl	800015c <__adddf3>
 8009eec:	3c01      	subs	r4, #1
 8009eee:	4607      	mov	r7, r0
 8009ef0:	460e      	mov	r6, r1
 8009ef2:	e73f      	b.n	8009d74 <__kernel_rem_pio2+0x4f0>
 8009ef4:	9b04      	ldr	r3, [sp, #16]
 8009ef6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009efa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009efe:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009f02:	601d      	str	r5, [r3, #0]
 8009f04:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8009f08:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8009f0c:	615e      	str	r6, [r3, #20]
 8009f0e:	e786      	b.n	8009e1e <__kernel_rem_pio2+0x59a>
 8009f10:	41700000 	.word	0x41700000
 8009f14:	3e700000 	.word	0x3e700000

08009f18 <__kernel_sin>:
 8009f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1c:	b086      	sub	sp, #24
 8009f1e:	e9cd 2300 	strd	r2, r3, [sp]
 8009f22:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f26:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009f2a:	4682      	mov	sl, r0
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009f30:	da03      	bge.n	8009f3a <__kernel_sin+0x22>
 8009f32:	f7f6 fd63 	bl	80009fc <__aeabi_d2iz>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d050      	beq.n	8009fdc <__kernel_sin+0xc4>
 8009f3a:	4652      	mov	r2, sl
 8009f3c:	4623      	mov	r3, r4
 8009f3e:	4650      	mov	r0, sl
 8009f40:	4621      	mov	r1, r4
 8009f42:	f7f6 fac1 	bl	80004c8 <__aeabi_dmul>
 8009f46:	4606      	mov	r6, r0
 8009f48:	460f      	mov	r7, r1
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4650      	mov	r0, sl
 8009f50:	4621      	mov	r1, r4
 8009f52:	f7f6 fab9 	bl	80004c8 <__aeabi_dmul>
 8009f56:	a33e      	add	r3, pc, #248	; (adr r3, 800a050 <__kernel_sin+0x138>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	4680      	mov	r8, r0
 8009f5e:	4689      	mov	r9, r1
 8009f60:	4630      	mov	r0, r6
 8009f62:	4639      	mov	r1, r7
 8009f64:	f7f6 fab0 	bl	80004c8 <__aeabi_dmul>
 8009f68:	a33b      	add	r3, pc, #236	; (adr r3, 800a058 <__kernel_sin+0x140>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	f7f6 f8f3 	bl	8000158 <__aeabi_dsub>
 8009f72:	4632      	mov	r2, r6
 8009f74:	463b      	mov	r3, r7
 8009f76:	f7f6 faa7 	bl	80004c8 <__aeabi_dmul>
 8009f7a:	a339      	add	r3, pc, #228	; (adr r3, 800a060 <__kernel_sin+0x148>)
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f7f6 f8ec 	bl	800015c <__adddf3>
 8009f84:	4632      	mov	r2, r6
 8009f86:	463b      	mov	r3, r7
 8009f88:	f7f6 fa9e 	bl	80004c8 <__aeabi_dmul>
 8009f8c:	a336      	add	r3, pc, #216	; (adr r3, 800a068 <__kernel_sin+0x150>)
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f7f6 f8e1 	bl	8000158 <__aeabi_dsub>
 8009f96:	4632      	mov	r2, r6
 8009f98:	463b      	mov	r3, r7
 8009f9a:	f7f6 fa95 	bl	80004c8 <__aeabi_dmul>
 8009f9e:	a334      	add	r3, pc, #208	; (adr r3, 800a070 <__kernel_sin+0x158>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 f8da 	bl	800015c <__adddf3>
 8009fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fac:	b9dd      	cbnz	r5, 8009fe6 <__kernel_sin+0xce>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	f7f6 fa87 	bl	80004c8 <__aeabi_dmul>
 8009fba:	a32f      	add	r3, pc, #188	; (adr r3, 800a078 <__kernel_sin+0x160>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f7f6 f8ca 	bl	8000158 <__aeabi_dsub>
 8009fc4:	4642      	mov	r2, r8
 8009fc6:	464b      	mov	r3, r9
 8009fc8:	f7f6 fa7e 	bl	80004c8 <__aeabi_dmul>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4650      	mov	r0, sl
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	f7f6 f8c2 	bl	800015c <__adddf3>
 8009fd8:	4682      	mov	sl, r0
 8009fda:	460c      	mov	r4, r1
 8009fdc:	4650      	mov	r0, sl
 8009fde:	4621      	mov	r1, r4
 8009fe0:	b006      	add	sp, #24
 8009fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fec:	4b24      	ldr	r3, [pc, #144]	; (800a080 <__kernel_sin+0x168>)
 8009fee:	f7f6 fa6b 	bl	80004c8 <__aeabi_dmul>
 8009ff2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ff6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	4649      	mov	r1, r9
 8009ffe:	f7f6 fa63 	bl	80004c8 <__aeabi_dmul>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a00a:	f7f6 f8a5 	bl	8000158 <__aeabi_dsub>
 800a00e:	4632      	mov	r2, r6
 800a010:	463b      	mov	r3, r7
 800a012:	f7f6 fa59 	bl	80004c8 <__aeabi_dmul>
 800a016:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a01a:	f7f6 f89d 	bl	8000158 <__aeabi_dsub>
 800a01e:	a316      	add	r3, pc, #88	; (adr r3, 800a078 <__kernel_sin+0x160>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	4606      	mov	r6, r0
 800a026:	460f      	mov	r7, r1
 800a028:	4640      	mov	r0, r8
 800a02a:	4649      	mov	r1, r9
 800a02c:	f7f6 fa4c 	bl	80004c8 <__aeabi_dmul>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4630      	mov	r0, r6
 800a036:	4639      	mov	r1, r7
 800a038:	f7f6 f890 	bl	800015c <__adddf3>
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	4650      	mov	r0, sl
 800a042:	4621      	mov	r1, r4
 800a044:	f7f6 f888 	bl	8000158 <__aeabi_dsub>
 800a048:	e7c6      	b.n	8009fd8 <__kernel_sin+0xc0>
 800a04a:	bf00      	nop
 800a04c:	f3af 8000 	nop.w
 800a050:	5acfd57c 	.word	0x5acfd57c
 800a054:	3de5d93a 	.word	0x3de5d93a
 800a058:	8a2b9ceb 	.word	0x8a2b9ceb
 800a05c:	3e5ae5e6 	.word	0x3e5ae5e6
 800a060:	57b1fe7d 	.word	0x57b1fe7d
 800a064:	3ec71de3 	.word	0x3ec71de3
 800a068:	19c161d5 	.word	0x19c161d5
 800a06c:	3f2a01a0 	.word	0x3f2a01a0
 800a070:	1110f8a6 	.word	0x1110f8a6
 800a074:	3f811111 	.word	0x3f811111
 800a078:	55555549 	.word	0x55555549
 800a07c:	3fc55555 	.word	0x3fc55555
 800a080:	3fe00000 	.word	0x3fe00000

0800a084 <fabs>:
 800a084:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a088:	4619      	mov	r1, r3
 800a08a:	4770      	bx	lr
 800a08c:	0000      	movs	r0, r0
	...

0800a090 <floor>:
 800a090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a094:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a098:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a09c:	2e13      	cmp	r6, #19
 800a09e:	4607      	mov	r7, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	dc35      	bgt.n	800a114 <floor+0x84>
 800a0a8:	2e00      	cmp	r6, #0
 800a0aa:	da16      	bge.n	800a0da <floor+0x4a>
 800a0ac:	a336      	add	r3, pc, #216	; (adr r3, 800a188 <floor+0xf8>)
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	f7f6 f853 	bl	800015c <__adddf3>
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	f7f6 fc95 	bl	80009e8 <__aeabi_dcmpgt>
 800a0be:	b148      	cbz	r0, 800a0d4 <floor+0x44>
 800a0c0:	2c00      	cmp	r4, #0
 800a0c2:	da5b      	bge.n	800a17c <floor+0xec>
 800a0c4:	2500      	movs	r5, #0
 800a0c6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a0ca:	4a31      	ldr	r2, [pc, #196]	; (800a190 <floor+0x100>)
 800a0cc:	433b      	orrs	r3, r7
 800a0ce:	42ab      	cmp	r3, r5
 800a0d0:	bf18      	it	ne
 800a0d2:	4614      	movne	r4, r2
 800a0d4:	4623      	mov	r3, r4
 800a0d6:	462f      	mov	r7, r5
 800a0d8:	e026      	b.n	800a128 <floor+0x98>
 800a0da:	4a2e      	ldr	r2, [pc, #184]	; (800a194 <floor+0x104>)
 800a0dc:	fa42 f806 	asr.w	r8, r2, r6
 800a0e0:	ea01 0208 	and.w	r2, r1, r8
 800a0e4:	4302      	orrs	r2, r0
 800a0e6:	d01f      	beq.n	800a128 <floor+0x98>
 800a0e8:	a327      	add	r3, pc, #156	; (adr r3, 800a188 <floor+0xf8>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f7f6 f835 	bl	800015c <__adddf3>
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f7f6 fc77 	bl	80009e8 <__aeabi_dcmpgt>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d0ea      	beq.n	800a0d4 <floor+0x44>
 800a0fe:	2c00      	cmp	r4, #0
 800a100:	bfbe      	ittt	lt
 800a102:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a106:	fa43 f606 	asrlt.w	r6, r3, r6
 800a10a:	19a4      	addlt	r4, r4, r6
 800a10c:	ea24 0408 	bic.w	r4, r4, r8
 800a110:	2500      	movs	r5, #0
 800a112:	e7df      	b.n	800a0d4 <floor+0x44>
 800a114:	2e33      	cmp	r6, #51	; 0x33
 800a116:	dd0b      	ble.n	800a130 <floor+0xa0>
 800a118:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a11c:	d104      	bne.n	800a128 <floor+0x98>
 800a11e:	4602      	mov	r2, r0
 800a120:	f7f6 f81c 	bl	800015c <__adddf3>
 800a124:	4607      	mov	r7, r0
 800a126:	460b      	mov	r3, r1
 800a128:	4638      	mov	r0, r7
 800a12a:	4619      	mov	r1, r3
 800a12c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a130:	f04f 32ff 	mov.w	r2, #4294967295
 800a134:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a138:	fa22 f808 	lsr.w	r8, r2, r8
 800a13c:	ea18 0f00 	tst.w	r8, r0
 800a140:	d0f2      	beq.n	800a128 <floor+0x98>
 800a142:	a311      	add	r3, pc, #68	; (adr r3, 800a188 <floor+0xf8>)
 800a144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a148:	f7f6 f808 	bl	800015c <__adddf3>
 800a14c:	2200      	movs	r2, #0
 800a14e:	2300      	movs	r3, #0
 800a150:	f7f6 fc4a 	bl	80009e8 <__aeabi_dcmpgt>
 800a154:	2800      	cmp	r0, #0
 800a156:	d0bd      	beq.n	800a0d4 <floor+0x44>
 800a158:	2c00      	cmp	r4, #0
 800a15a:	da02      	bge.n	800a162 <floor+0xd2>
 800a15c:	2e14      	cmp	r6, #20
 800a15e:	d103      	bne.n	800a168 <floor+0xd8>
 800a160:	3401      	adds	r4, #1
 800a162:	ea25 0508 	bic.w	r5, r5, r8
 800a166:	e7b5      	b.n	800a0d4 <floor+0x44>
 800a168:	2301      	movs	r3, #1
 800a16a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a16e:	fa03 f606 	lsl.w	r6, r3, r6
 800a172:	4435      	add	r5, r6
 800a174:	42bd      	cmp	r5, r7
 800a176:	bf38      	it	cc
 800a178:	18e4      	addcc	r4, r4, r3
 800a17a:	e7f2      	b.n	800a162 <floor+0xd2>
 800a17c:	2500      	movs	r5, #0
 800a17e:	462c      	mov	r4, r5
 800a180:	e7a8      	b.n	800a0d4 <floor+0x44>
 800a182:	bf00      	nop
 800a184:	f3af 8000 	nop.w
 800a188:	8800759c 	.word	0x8800759c
 800a18c:	7e37e43c 	.word	0x7e37e43c
 800a190:	bff00000 	.word	0xbff00000
 800a194:	000fffff 	.word	0x000fffff

0800a198 <scalbn>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	4616      	mov	r6, r2
 800a19c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	460d      	mov	r5, r1
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	b982      	cbnz	r2, 800a1ca <scalbn+0x32>
 800a1a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a1ac:	4303      	orrs	r3, r0
 800a1ae:	d034      	beq.n	800a21a <scalbn+0x82>
 800a1b0:	4b2d      	ldr	r3, [pc, #180]	; (800a268 <scalbn+0xd0>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f7f6 f988 	bl	80004c8 <__aeabi_dmul>
 800a1b8:	4b2c      	ldr	r3, [pc, #176]	; (800a26c <scalbn+0xd4>)
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	429e      	cmp	r6, r3
 800a1be:	460d      	mov	r5, r1
 800a1c0:	da0d      	bge.n	800a1de <scalbn+0x46>
 800a1c2:	a325      	add	r3, pc, #148	; (adr r3, 800a258 <scalbn+0xc0>)
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	e01c      	b.n	800a204 <scalbn+0x6c>
 800a1ca:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800a1ce:	42ba      	cmp	r2, r7
 800a1d0:	d109      	bne.n	800a1e6 <scalbn+0x4e>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	f7f5 ffc2 	bl	800015c <__adddf3>
 800a1d8:	4604      	mov	r4, r0
 800a1da:	460d      	mov	r5, r1
 800a1dc:	e01d      	b.n	800a21a <scalbn+0x82>
 800a1de:	460b      	mov	r3, r1
 800a1e0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a1e4:	3a36      	subs	r2, #54	; 0x36
 800a1e6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a1ea:	4432      	add	r2, r6
 800a1ec:	428a      	cmp	r2, r1
 800a1ee:	dd0c      	ble.n	800a20a <scalbn+0x72>
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	462b      	mov	r3, r5
 800a1f4:	a11a      	add	r1, pc, #104	; (adr r1, 800a260 <scalbn+0xc8>)
 800a1f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1fa:	f000 f83b 	bl	800a274 <copysign>
 800a1fe:	a318      	add	r3, pc, #96	; (adr r3, 800a260 <scalbn+0xc8>)
 800a200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a204:	f7f6 f960 	bl	80004c8 <__aeabi_dmul>
 800a208:	e7e6      	b.n	800a1d8 <scalbn+0x40>
 800a20a:	2a00      	cmp	r2, #0
 800a20c:	dd08      	ble.n	800a220 <scalbn+0x88>
 800a20e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a212:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a216:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a21a:	4620      	mov	r0, r4
 800a21c:	4629      	mov	r1, r5
 800a21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a220:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a224:	da0b      	bge.n	800a23e <scalbn+0xa6>
 800a226:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a22a:	429e      	cmp	r6, r3
 800a22c:	4622      	mov	r2, r4
 800a22e:	462b      	mov	r3, r5
 800a230:	dce0      	bgt.n	800a1f4 <scalbn+0x5c>
 800a232:	a109      	add	r1, pc, #36	; (adr r1, 800a258 <scalbn+0xc0>)
 800a234:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a238:	f000 f81c 	bl	800a274 <copysign>
 800a23c:	e7c1      	b.n	800a1c2 <scalbn+0x2a>
 800a23e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a242:	3236      	adds	r2, #54	; 0x36
 800a244:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a248:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a24c:	4620      	mov	r0, r4
 800a24e:	4629      	mov	r1, r5
 800a250:	2200      	movs	r2, #0
 800a252:	4b07      	ldr	r3, [pc, #28]	; (800a270 <scalbn+0xd8>)
 800a254:	e7d6      	b.n	800a204 <scalbn+0x6c>
 800a256:	bf00      	nop
 800a258:	c2f8f359 	.word	0xc2f8f359
 800a25c:	01a56e1f 	.word	0x01a56e1f
 800a260:	8800759c 	.word	0x8800759c
 800a264:	7e37e43c 	.word	0x7e37e43c
 800a268:	43500000 	.word	0x43500000
 800a26c:	ffff3cb0 	.word	0xffff3cb0
 800a270:	3c900000 	.word	0x3c900000

0800a274 <copysign>:
 800a274:	b530      	push	{r4, r5, lr}
 800a276:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a27a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a27e:	ea42 0503 	orr.w	r5, r2, r3
 800a282:	4629      	mov	r1, r5
 800a284:	bd30      	pop	{r4, r5, pc}
	...

0800a288 <_init>:
 800a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28a:	bf00      	nop
 800a28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a28e:	bc08      	pop	{r3}
 800a290:	469e      	mov	lr, r3
 800a292:	4770      	bx	lr

0800a294 <_fini>:
 800a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a296:	bf00      	nop
 800a298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a29a:	bc08      	pop	{r3}
 800a29c:	469e      	mov	lr, r3
 800a29e:	4770      	bx	lr
