
CAN_node_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006998  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006aa8  08006aa8  00016aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b94  08006b94  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006b94  08006b94  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b94  08006b94  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b94  08006b94  00016b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b98  08006b98  00016b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001190  20000074  08006c10  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001204  08006c10  00021204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b34  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003548  00000000  00000000  00038bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c0  00000000  00000000  0003c120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001450  00000000  00000000  0003d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a5ad  00000000  00000000  0003eb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000118b5  00000000  00000000  000590dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a40b  00000000  00000000  0006a992  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00104d9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ce0  00000000  00000000  00104e18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a90 	.word	0x08006a90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006a90 	.word	0x08006a90

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800020c:	f1a2 0201 	sub.w	r2, r2, #1
 8000210:	d1ed      	bne.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2uiz>:
 800060c:	0042      	lsls	r2, r0, #1
 800060e:	d20e      	bcs.n	800062e <__aeabi_f2uiz+0x22>
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30b      	bcc.n	800062e <__aeabi_f2uiz+0x22>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d409      	bmi.n	8000634 <__aeabi_f2uiz+0x28>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	4770      	bx	lr
 800062e:	f04f 0000 	mov.w	r0, #0
 8000632:	4770      	bx	lr
 8000634:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000638:	d101      	bne.n	800063e <__aeabi_f2uiz+0x32>
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	d102      	bne.n	8000644 <__aeabi_f2uiz+0x38>
 800063e:	f04f 30ff 	mov.w	r0, #4294967295
 8000642:	4770      	bx	lr
 8000644:	f04f 0000 	mov.w	r0, #0
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4a06      	ldr	r2, [pc, #24]	; (8000674 <vApplicationGetIdleTaskMemory+0x28>)
 800065c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	4a05      	ldr	r2, [pc, #20]	; (8000678 <vApplicationGetIdleTaskMemory+0x2c>)
 8000662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	20000090 	.word	0x20000090
 8000678:	200000e4 	.word	0x200000e4

0800067c <create_kalman>:
 *      Author: tantr
 */
#include "kalman_filter.h"

kalman_t * create_kalman (float mea_e, float est_e, float q)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
    kalman_t * kalman_instance = (kalman_t *)malloc(sizeof(kalman_t));
 8000688:	2018      	movs	r0, #24
 800068a:	f006 f979 	bl	8006980 <malloc>
 800068e:	4603      	mov	r3, r0
 8000690:	617b      	str	r3, [r7, #20]
    kalman_instance->_current_estimate = 0;
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
    kalman_instance->_last_estimate = 0;
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	f04f 0200 	mov.w	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
    kalman_instance->_kalman_gain = 0;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	f04f 0200 	mov.w	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
    kalman_instance->_err_measure = mea_e;
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	601a      	str	r2, [r3, #0]
    kalman_instance->_err_estimate = est_e;
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	605a      	str	r2, [r3, #4]
    kalman_instance->_q = q;
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	609a      	str	r2, [r3, #8]
    return kalman_instance;
 80006bc:	697b      	ldr	r3, [r7, #20]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <update_kalman>:

float update_kalman (kalman_t * kalman, float value)
{
 80006c6:	b5b0      	push	{r4, r5, r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
    kalman->_kalman_gain = kalman->_err_estimate / (kalman->_err_estimate + kalman->_err_measure);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	685c      	ldr	r4, [r3, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	685a      	ldr	r2, [r3, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	4610      	mov	r0, r2
 80006e0:	f7ff fd3c 	bl	800015c <__addsf3>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4619      	mov	r1, r3
 80006e8:	4620      	mov	r0, r4
 80006ea:	f7ff fef3 	bl	80004d4 <__aeabi_fdiv>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	615a      	str	r2, [r3, #20]
    kalman->_current_estimate = kalman->_last_estimate + kalman->_kalman_gain * (value - kalman->_last_estimate);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	691c      	ldr	r4, [r3, #16]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	695d      	ldr	r5, [r3, #20]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	4619      	mov	r1, r3
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	f7ff fd27 	bl	8000158 <__aeabi_fsub>
 800070a:	4603      	mov	r3, r0
 800070c:	4619      	mov	r1, r3
 800070e:	4628      	mov	r0, r5
 8000710:	f7ff fe2c 	bl	800036c <__aeabi_fmul>
 8000714:	4603      	mov	r3, r0
 8000716:	4619      	mov	r1, r3
 8000718:	4620      	mov	r0, r4
 800071a:	f7ff fd1f 	bl	800015c <__addsf3>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	60da      	str	r2, [r3, #12]
    kalman->_err_estimate = (1.0f - kalman->_kalman_gain) * kalman->_err_estimate + fabsf(kalman->_last_estimate - kalman->_current_estimate) * kalman->_q;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4619      	mov	r1, r3
 800072c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000730:	f7ff fd12 	bl	8000158 <__aeabi_fsub>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	4619      	mov	r1, r3
 800073e:	4610      	mov	r0, r2
 8000740:	f7ff fe14 	bl	800036c <__aeabi_fmul>
 8000744:	4603      	mov	r3, r0
 8000746:	461c      	mov	r4, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	691a      	ldr	r2, [r3, #16]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	4619      	mov	r1, r3
 8000752:	4610      	mov	r0, r2
 8000754:	f7ff fd00 	bl	8000158 <__aeabi_fsub>
 8000758:	4603      	mov	r3, r0
 800075a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	4619      	mov	r1, r3
 8000764:	4610      	mov	r0, r2
 8000766:	f7ff fe01 	bl	800036c <__aeabi_fmul>
 800076a:	4603      	mov	r3, r0
 800076c:	4619      	mov	r1, r3
 800076e:	4620      	mov	r0, r4
 8000770:	f7ff fcf4 	bl	800015c <__addsf3>
 8000774:	4603      	mov	r3, r0
 8000776:	461a      	mov	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	605a      	str	r2, [r3, #4]
    kalman->_last_estimate = kalman->_current_estimate;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	68da      	ldr	r2, [r3, #12]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	611a      	str	r2, [r3, #16]

    return kalman->_current_estimate;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	68db      	ldr	r3, [r3, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bdb0      	pop	{r4, r5, r7, pc}

08000790 <clear_buff>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clear_buff (uint8_t * buff_clear, size_t num)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
	if (buff_clear == NULL) return;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d005      	beq.n	80007ac <clear_buff+0x1c>

	memset(buff_clear, 0, num);
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	2100      	movs	r1, #0
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f006 f8fe 	bl	80069a6 <memset>
 80007aa:	e000      	b.n	80007ae <clear_buff+0x1e>
	if (buff_clear == NULL) return;
 80007ac:	bf00      	nop
}
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <prepare_buff_send>:

void prepare_buff_send ()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
	static uint16_t pre_steering = 0;
	static uint16_t pre_light = 0;

	uint16_t current_value;
	osEvent q_message;
	uint8_t * p_buff_ptr = (uint8_t *)&current_value;
 80007ba:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80007be:	627b      	str	r3, [r7, #36]	; 0x24

	tx_header.IDE = CAN_ID_STD;
 80007c0:	4b7f      	ldr	r3, [pc, #508]	; (80009c0 <prepare_buff_send+0x20c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]

	/* get element from throttle queue to send motor node control speed motor */
	q_message = osMessageGet(q_throttle_controlHandle, 0);
 80007c6:	4b7f      	ldr	r3, [pc, #508]	; (80009c4 <prepare_buff_send+0x210>)
 80007c8:	6819      	ldr	r1, [r3, #0]
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 ffe7 	bl	80047a4 <osMessageGet>

	/* get a message in q_throttle_control if it is not empty */
	if (q_message.status == osEventMessage)
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	2b10      	cmp	r3, #16
 80007da:	d136      	bne.n	800084a <prepare_buff_send+0x96>
	{
		/* check if the value has changed, then send a message */
		current_value = (uint16_t)q_message.value.v;
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	847b      	strh	r3, [r7, #34]	; 0x22
		if (abs(current_value - pre_throttle) > 10)
 80007e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b78      	ldr	r3, [pc, #480]	; (80009c8 <prepare_buff_send+0x214>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bfb8      	it	lt
 80007f0:	425b      	neglt	r3, r3
 80007f2:	2b0a      	cmp	r3, #10
 80007f4:	dd29      	ble.n	800084a <prepare_buff_send+0x96>
		{
			pre_throttle = current_value;
 80007f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80007f8:	4b73      	ldr	r3, [pc, #460]	; (80009c8 <prepare_buff_send+0x214>)
 80007fa:	801a      	strh	r2, [r3, #0]
			tx_header.StdId = 0x100;
 80007fc:	4b70      	ldr	r3, [pc, #448]	; (80009c0 <prepare_buff_send+0x20c>)
 80007fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000802:	601a      	str	r2, [r3, #0]
			tx_header.RTR = CAN_RTR_DATA;
 8000804:	4b6e      	ldr	r3, [pc, #440]	; (80009c0 <prepare_buff_send+0x20c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
			tx_header.DLC = 2;
 800080a:	4b6d      	ldr	r3, [pc, #436]	; (80009c0 <prepare_buff_send+0x20c>)
 800080c:	2202      	movs	r2, #2
 800080e:	611a      	str	r2, [r3, #16]

			tx_data[0] = *p_buff_ptr;
 8000810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000812:	781a      	ldrb	r2, [r3, #0]
 8000814:	4b6d      	ldr	r3, [pc, #436]	; (80009cc <prepare_buff_send+0x218>)
 8000816:	701a      	strb	r2, [r3, #0]
			p_buff_ptr++;
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081a:	3301      	adds	r3, #1
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
			tx_data[1] = *p_buff_ptr;
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	4b6a      	ldr	r3, [pc, #424]	; (80009cc <prepare_buff_send+0x218>)
 8000824:	705a      	strb	r2, [r3, #1]
			if (HAL_CAN_AddTxMessage(&hcan, &tx_header, tx_data, &tx_mailbox) != HAL_OK)
 8000826:	4b6a      	ldr	r3, [pc, #424]	; (80009d0 <prepare_buff_send+0x21c>)
 8000828:	4a68      	ldr	r2, [pc, #416]	; (80009cc <prepare_buff_send+0x218>)
 800082a:	4965      	ldr	r1, [pc, #404]	; (80009c0 <prepare_buff_send+0x20c>)
 800082c:	4869      	ldr	r0, [pc, #420]	; (80009d4 <prepare_buff_send+0x220>)
 800082e:	f001 fd64 	bl	80022fa <HAL_CAN_AddTxMessage>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <prepare_buff_send+0x88>
			{
			   Error_Handler ();
 8000838:	f000 fd1a 	bl	8001270 <Error_Handler>
			}
			clear_buff(&tx_data, sizeof(uint8_t)*8);
 800083c:	2108      	movs	r1, #8
 800083e:	4863      	ldr	r0, [pc, #396]	; (80009cc <prepare_buff_send+0x218>)
 8000840:	f7ff ffa6 	bl	8000790 <clear_buff>
			p_buff_ptr = &current_value;
 8000844:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	/* get element from steering queue to send motor node control angle servo */
	q_message = osMessageGet(q_steering_controlHandle, 0);
 800084a:	4b63      	ldr	r3, [pc, #396]	; (80009d8 <prepare_buff_send+0x224>)
 800084c:	6819      	ldr	r1, [r3, #0]
 800084e:	463b      	mov	r3, r7
 8000850:	2200      	movs	r2, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f003 ffa6 	bl	80047a4 <osMessageGet>
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	463a      	mov	r2, r7
 800085e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000860:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* get a message in q_steering_control if it is not empty */
	if (q_message.status == osEventMessage)
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	2b10      	cmp	r3, #16
 8000868:	d136      	bne.n	80008d8 <prepare_buff_send+0x124>
	{
		/* check if the value has changed, then send a message */
		current_value = (uint16_t)q_message.value.v;
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	b29b      	uxth	r3, r3
 800086e:	847b      	strh	r3, [r7, #34]	; 0x22
		if (abs(current_value - pre_steering) > 10)
 8000870:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000872:	461a      	mov	r2, r3
 8000874:	4b59      	ldr	r3, [pc, #356]	; (80009dc <prepare_buff_send+0x228>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	bfb8      	it	lt
 800087e:	425b      	neglt	r3, r3
 8000880:	2b0a      	cmp	r3, #10
 8000882:	dd29      	ble.n	80008d8 <prepare_buff_send+0x124>
		{
			pre_steering = current_value;
 8000884:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000886:	4b55      	ldr	r3, [pc, #340]	; (80009dc <prepare_buff_send+0x228>)
 8000888:	801a      	strh	r2, [r3, #0]
			tx_header.StdId = 0x110;
 800088a:	4b4d      	ldr	r3, [pc, #308]	; (80009c0 <prepare_buff_send+0x20c>)
 800088c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000890:	601a      	str	r2, [r3, #0]
			tx_header.RTR = CAN_RTR_DATA;
 8000892:	4b4b      	ldr	r3, [pc, #300]	; (80009c0 <prepare_buff_send+0x20c>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
			tx_header.DLC = 2;
 8000898:	4b49      	ldr	r3, [pc, #292]	; (80009c0 <prepare_buff_send+0x20c>)
 800089a:	2202      	movs	r2, #2
 800089c:	611a      	str	r2, [r3, #16]

			tx_data[0] = *p_buff_ptr;
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	4b4a      	ldr	r3, [pc, #296]	; (80009cc <prepare_buff_send+0x218>)
 80008a4:	701a      	strb	r2, [r3, #0]
			p_buff_ptr++;
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	3301      	adds	r3, #1
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
			tx_data[1] = *p_buff_ptr;
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b46      	ldr	r3, [pc, #280]	; (80009cc <prepare_buff_send+0x218>)
 80008b2:	705a      	strb	r2, [r3, #1]
			if (HAL_CAN_AddTxMessage(&hcan, &tx_header, tx_data, &tx_mailbox) != HAL_OK)
 80008b4:	4b46      	ldr	r3, [pc, #280]	; (80009d0 <prepare_buff_send+0x21c>)
 80008b6:	4a45      	ldr	r2, [pc, #276]	; (80009cc <prepare_buff_send+0x218>)
 80008b8:	4941      	ldr	r1, [pc, #260]	; (80009c0 <prepare_buff_send+0x20c>)
 80008ba:	4846      	ldr	r0, [pc, #280]	; (80009d4 <prepare_buff_send+0x220>)
 80008bc:	f001 fd1d 	bl	80022fa <HAL_CAN_AddTxMessage>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <prepare_buff_send+0x116>
			{
			   Error_Handler ();
 80008c6:	f000 fcd3 	bl	8001270 <Error_Handler>
			}
			clear_buff(&tx_data, sizeof(uint8_t)*8);
 80008ca:	2108      	movs	r1, #8
 80008cc:	483f      	ldr	r0, [pc, #252]	; (80009cc <prepare_buff_send+0x218>)
 80008ce:	f7ff ff5f 	bl	8000790 <clear_buff>
			p_buff_ptr = &current_value;
 80008d2:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	/* get element from light queue to send light node control light */
	q_message = osMessageGet(q_light_controlHandle, 0);
 80008d8:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <prepare_buff_send+0x22c>)
 80008da:	6819      	ldr	r1, [r3, #0]
 80008dc:	463b      	mov	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 ff5f 	bl	80047a4 <osMessageGet>
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	463a      	mov	r2, r7
 80008ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80008ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* get a message in q_light_control if it is not empty */
	if (q_message.status == osEventMessage)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	2b10      	cmp	r3, #16
 80008f6:	d127      	bne.n	8000948 <prepare_buff_send+0x194>
	{
		current_value = (uint16_t)q_message.value.v;
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	847b      	strh	r3, [r7, #34]	; 0x22
		if (current_value != pre_light)
 80008fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000900:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <prepare_buff_send+0x230>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	429a      	cmp	r2, r3
 8000906:	d01f      	beq.n	8000948 <prepare_buff_send+0x194>
		{
			pre_light = current_value;
 8000908:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800090a:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <prepare_buff_send+0x230>)
 800090c:	801a      	strh	r2, [r3, #0]
			tx_header.StdId = 0x210;
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <prepare_buff_send+0x20c>)
 8000910:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000914:	601a      	str	r2, [r3, #0]
			tx_header.RTR = CAN_RTR_DATA;
 8000916:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <prepare_buff_send+0x20c>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
			tx_header.DLC = 1;
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <prepare_buff_send+0x20c>)
 800091e:	2201      	movs	r2, #1
 8000920:	611a      	str	r2, [r3, #16]

			tx_data[0] = current_value;
 8000922:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b29      	ldr	r3, [pc, #164]	; (80009cc <prepare_buff_send+0x218>)
 8000928:	701a      	strb	r2, [r3, #0]
			if (HAL_CAN_AddTxMessage(&hcan, &tx_header, tx_data, &tx_mailbox) != HAL_OK)
 800092a:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <prepare_buff_send+0x21c>)
 800092c:	4a27      	ldr	r2, [pc, #156]	; (80009cc <prepare_buff_send+0x218>)
 800092e:	4924      	ldr	r1, [pc, #144]	; (80009c0 <prepare_buff_send+0x20c>)
 8000930:	4828      	ldr	r0, [pc, #160]	; (80009d4 <prepare_buff_send+0x220>)
 8000932:	f001 fce2 	bl	80022fa <HAL_CAN_AddTxMessage>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <prepare_buff_send+0x18c>
			{
			   Error_Handler ();
 800093c:	f000 fc98 	bl	8001270 <Error_Handler>
			}
			clear_buff(&tx_data, sizeof(uint8_t)*8);
 8000940:	2108      	movs	r1, #8
 8000942:	4822      	ldr	r0, [pc, #136]	; (80009cc <prepare_buff_send+0x218>)
 8000944:	f7ff ff24 	bl	8000790 <clear_buff>

		}
	}

	/* get element from light queue to send light node control light */
	q_message = osMessageGet(q_light_controlHandle, 0);
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <prepare_buff_send+0x22c>)
 800094a:	6819      	ldr	r1, [r3, #0]
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f003 ff27 	bl	80047a4 <osMessageGet>
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	463a      	mov	r2, r7
 800095c:	ca07      	ldmia	r2, {r0, r1, r2}
 800095e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* get a message in q_light_control if it is not empty */
	if (q_message.status == osEventMessage)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	2b10      	cmp	r3, #16
 8000966:	d127      	bne.n	80009b8 <prepare_buff_send+0x204>
	{
		current_value = (uint16_t)q_message.value.v;
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	b29b      	uxth	r3, r3
 800096c:	847b      	strh	r3, [r7, #34]	; 0x22
		if (current_value != pre_light)
 800096e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <prepare_buff_send+0x230>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	429a      	cmp	r2, r3
 8000976:	d01f      	beq.n	80009b8 <prepare_buff_send+0x204>
		{
			pre_light = current_value;
 8000978:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <prepare_buff_send+0x230>)
 800097c:	801a      	strh	r2, [r3, #0]
			tx_header.StdId = 0x210;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <prepare_buff_send+0x20c>)
 8000980:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000984:	601a      	str	r2, [r3, #0]
			tx_header.RTR = CAN_RTR_DATA;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <prepare_buff_send+0x20c>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
			tx_header.DLC = 1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <prepare_buff_send+0x20c>)
 800098e:	2201      	movs	r2, #1
 8000990:	611a      	str	r2, [r3, #16]

			tx_data[0] = current_value;
 8000992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <prepare_buff_send+0x218>)
 8000998:	701a      	strb	r2, [r3, #0]
			if (HAL_CAN_AddTxMessage(&hcan, &tx_header, tx_data, &tx_mailbox) != HAL_OK)
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <prepare_buff_send+0x21c>)
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <prepare_buff_send+0x218>)
 800099e:	4908      	ldr	r1, [pc, #32]	; (80009c0 <prepare_buff_send+0x20c>)
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <prepare_buff_send+0x220>)
 80009a2:	f001 fcaa 	bl	80022fa <HAL_CAN_AddTxMessage>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <prepare_buff_send+0x1fc>
			{
			   Error_Handler ();
 80009ac:	f000 fc60 	bl	8001270 <Error_Handler>
			}
			clear_buff(&tx_data, sizeof(uint8_t)*8);
 80009b0:	2108      	movs	r1, #8
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <prepare_buff_send+0x218>)
 80009b4:	f7ff feec 	bl	8000790 <clear_buff>

		}
	}
}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	; 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20001138 	.word	0x20001138
 80009c4:	2000104c 	.word	0x2000104c
 80009c8:	200002e8 	.word	0x200002e8
 80009cc:	200011f4 	.word	0x200011f4
 80009d0:	200010f4 	.word	0x200010f4
 80009d4:	200010c8 	.word	0x200010c8
 80009d8:	2000112c 	.word	0x2000112c
 80009dc:	200002ea 	.word	0x200002ea
 80009e0:	200010f0 	.word	0x200010f0
 80009e4:	200002ec 	.word	0x200002ec

080009e8 <emergency_buff_send>:

void emergency_buff_send ()
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	tx_header.IDE = CAN_ID_STD;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <emergency_buff_send+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]

	/* stop motor emergency */
	if (status_motor == 0)
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <emergency_buff_send+0x44>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d114      	bne.n	8000a24 <emergency_buff_send+0x3c>
	{
		tx_header.StdId = 0x102;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <emergency_buff_send+0x40>)
 80009fc:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000a00:	601a      	str	r2, [r3, #0]
		tx_header.RTR = CAN_RTR_DATA;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <emergency_buff_send+0x40>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
		tx_header.DLC = 1;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <emergency_buff_send+0x40>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	611a      	str	r2, [r3, #16]

		if (HAL_CAN_AddTxMessage(&hcan, &tx_header, 0, &tx_mailbox) != HAL_OK)
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <emergency_buff_send+0x48>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	4905      	ldr	r1, [pc, #20]	; (8000a28 <emergency_buff_send+0x40>)
 8000a14:	4807      	ldr	r0, [pc, #28]	; (8000a34 <emergency_buff_send+0x4c>)
 8000a16:	f001 fc70 	bl	80022fa <HAL_CAN_AddTxMessage>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <emergency_buff_send+0x3c>
		{
		   Error_Handler ();
 8000a20:	f000 fc26 	bl	8001270 <Error_Handler>
		}
	}
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20001138 	.word	0x20001138
 8000a2c:	200002e4 	.word	0x200002e4
 8000a30:	200010f4 	.word	0x200010f4
 8000a34:	200010c8 	.word	0x200010c8

08000a38 <HAL_ADC_ConvCpltCallback>:
		clear_buff(&tx_data, sizeof(uint8_t)*8);
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	  adc_value[0] = update_kalman(kalman_1, adc_value[0]);
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_ADC_ConvCpltCallback+0x60>)
 8000a42:	681c      	ldr	r4, [r3, #0]
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_ADC_ConvCpltCallback+0x64>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fc37 	bl	80002bc <__aeabi_ui2f>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4619      	mov	r1, r3
 8000a52:	4620      	mov	r0, r4
 8000a54:	f7ff fe37 	bl	80006c6 <update_kalman>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fdd6 	bl	800060c <__aeabi_f2uiz>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_ADC_ConvCpltCallback+0x64>)
 8000a66:	801a      	strh	r2, [r3, #0]
	  adc_value[1] = update_kalman(kalman_2, adc_value[1]);
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <HAL_ADC_ConvCpltCallback+0x68>)
 8000a6a:	681c      	ldr	r4, [r3, #0]
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_ADC_ConvCpltCallback+0x64>)
 8000a6e:	885b      	ldrh	r3, [r3, #2]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fc23 	bl	80002bc <__aeabi_ui2f>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	f7ff fe23 	bl	80006c6 <update_kalman>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fdc2 	bl	800060c <__aeabi_f2uiz>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_ADC_ConvCpltCallback+0x64>)
 8000a8e:	805a      	strh	r2, [r3, #2]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	20001134 	.word	0x20001134
 8000a9c:	200010f8 	.word	0x200010f8
 8000aa0:	200011f0 	.word	0x200011f0

08000aa4 <read_light_sw>:

void read_light_sw ()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	/* Set bit 0  */
	light_sw |= (1 << 0);
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <read_light_sw+0xa0>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <read_light_sw+0xa0>)
 8000ab4:	701a      	strb	r2, [r3, #0]

	/* ON/OFF hazard mode */
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET)
 8000ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aba:	4823      	ldr	r0, [pc, #140]	; (8000b48 <read_light_sw+0xa4>)
 8000abc:	f002 fb98 	bl	80031f0 <HAL_GPIO_ReadPin>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d107      	bne.n	8000ad6 <read_light_sw+0x32>
	{
		light_sw |= (1 << 1);
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <read_light_sw+0xa0>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <read_light_sw+0xa0>)
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	e006      	b.n	8000ae4 <read_light_sw+0x40>
	}
	else
	{
		light_sw &= ~(1 << 1);
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <read_light_sw+0xa0>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	f023 0302 	bic.w	r3, r3, #2
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <read_light_sw+0xa0>)
 8000ae2:	701a      	strb	r2, [r3, #0]
	}

	/* ON/OFF blinker left light */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae8:	4818      	ldr	r0, [pc, #96]	; (8000b4c <read_light_sw+0xa8>)
 8000aea:	f002 fb81 	bl	80031f0 <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d107      	bne.n	8000b04 <read_light_sw+0x60>
	{
		light_sw |= (1 << 2);
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <read_light_sw+0xa0>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <read_light_sw+0xa0>)
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e006      	b.n	8000b12 <read_light_sw+0x6e>
	}
	else
	{
		light_sw &= ~(1 << 2);
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <read_light_sw+0xa0>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	f023 0304 	bic.w	r3, r3, #4
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <read_light_sw+0xa0>)
 8000b10:	701a      	strb	r2, [r3, #0]
	}

	/* ON/OFF blinker right light */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_RESET)
 8000b12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <read_light_sw+0xa8>)
 8000b18:	f002 fb6a 	bl	80031f0 <HAL_GPIO_ReadPin>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d107      	bne.n	8000b32 <read_light_sw+0x8e>
	{
		light_sw |= (1 << 3);
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <read_light_sw+0xa0>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <read_light_sw+0xa0>)
 8000b2e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		light_sw &= ~(1 << 3);
	}
}
 8000b30:	e006      	b.n	8000b40 <read_light_sw+0x9c>
		light_sw &= ~(1 << 3);
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <read_light_sw+0xa0>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	f023 0308 	bic.w	r3, r3, #8
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b01      	ldr	r3, [pc, #4]	; (8000b44 <read_light_sw+0xa0>)
 8000b3e:	701a      	strb	r2, [r3, #0]
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200002e6 	.word	0x200002e6
 8000b48:	40010c00 	.word	0x40010c00
 8000b4c:	40011000 	.word	0x40011000

08000b50 <read_trim_button>:

void read_trim_button ()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

	/* trimming down steering */
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8000b54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b58:	4816      	ldr	r0, [pc, #88]	; (8000bb4 <read_trim_button+0x64>)
 8000b5a:	f002 fb49 	bl	80031f0 <HAL_GPIO_ReadPin>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d107      	bne.n	8000b74 <read_trim_button+0x24>
	{
		trim_button |= (1 << 0);
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <read_trim_button+0x68>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <read_trim_button+0x68>)
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e006      	b.n	8000b82 <read_trim_button+0x32>
	}
	else
	{
		trim_button &= ~(1 << 0);
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <read_trim_button+0x68>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	f023 0301 	bic.w	r3, r3, #1
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <read_trim_button+0x68>)
 8000b80:	701a      	strb	r2, [r3, #0]
	}

	/* trimming up steering */
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b86:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <read_trim_button+0x64>)
 8000b88:	f002 fb32 	bl	80031f0 <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d107      	bne.n	8000ba2 <read_trim_button+0x52>
	{
		trim_button |= (1 << 1);
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <read_trim_button+0x68>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <read_trim_button+0x68>)
 8000b9e:	701a      	strb	r2, [r3, #0]
	else
	{
		trim_button &= ~(1 << 1);
	}

}
 8000ba0:	e006      	b.n	8000bb0 <read_trim_button+0x60>
		trim_button &= ~(1 << 1);
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <read_trim_button+0x68>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	f023 0302 	bic.w	r3, r3, #2
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b02      	ldr	r3, [pc, #8]	; (8000bb8 <read_trim_button+0x68>)
 8000bae:	701a      	strb	r2, [r3, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40010c00 	.word	0x40010c00
 8000bb8:	200002e5 	.word	0x200002e5

08000bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bbc:	b5b0      	push	{r4, r5, r7, lr}
 8000bbe:	b0b2      	sub	sp, #200	; 0xc8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc2:	f000 fd63 	bl	800168c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc6:	f000 f8f3 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bca:	f000 fa69 	bl	80010a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bce:	f000 fa49 	bl	8001064 <MX_DMA_Init>
  MX_CAN_Init();
 8000bd2:	f000 f997 	bl	8000f04 <MX_CAN_Init>
  MX_I2C1_Init();
 8000bd6:	f000 f9cb 	bl	8000f70 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000bda:	f000 f9f7 	bl	8000fcc <MX_TIM2_Init>
  MX_ADC1_Init();
 8000bde:	f000 f943 	bl	8000e68 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000be2:	485d      	ldr	r0, [pc, #372]	; (8000d58 <main+0x19c>)
 8000be4:	f001 fb45 	bl	8002272 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000be8:	2102      	movs	r1, #2
 8000bea:	485b      	ldr	r0, [pc, #364]	; (8000d58 <main+0x19c>)
 8000bec:	f001 fc5f 	bl	80024ae <HAL_CAN_ActivateNotification>
  kalman_1 = create_kalman(50, 50, 0.01);
 8000bf0:	4a5a      	ldr	r2, [pc, #360]	; (8000d5c <main+0x1a0>)
 8000bf2:	495b      	ldr	r1, [pc, #364]	; (8000d60 <main+0x1a4>)
 8000bf4:	485a      	ldr	r0, [pc, #360]	; (8000d60 <main+0x1a4>)
 8000bf6:	f7ff fd41 	bl	800067c <create_kalman>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	4b59      	ldr	r3, [pc, #356]	; (8000d64 <main+0x1a8>)
 8000bfe:	601a      	str	r2, [r3, #0]
  kalman_2 = create_kalman(50, 50, 0.01);
 8000c00:	4a56      	ldr	r2, [pc, #344]	; (8000d5c <main+0x1a0>)
 8000c02:	4957      	ldr	r1, [pc, #348]	; (8000d60 <main+0x1a4>)
 8000c04:	4856      	ldr	r0, [pc, #344]	; (8000d60 <main+0x1a4>)
 8000c06:	f7ff fd39 	bl	800067c <create_kalman>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	4b56      	ldr	r3, [pc, #344]	; (8000d68 <main+0x1ac>)
 8000c0e:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of q_steering_control */
  osMessageQDef(q_steering_control, 32, uint16_t);
 8000c10:	4b56      	ldr	r3, [pc, #344]	; (8000d6c <main+0x1b0>)
 8000c12:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_steering_controlHandle = osMessageCreate(osMessageQ(q_steering_control), NULL);
 8000c1c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 fd55 	bl	80046d2 <osMessageCreate>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	4b51      	ldr	r3, [pc, #324]	; (8000d70 <main+0x1b4>)
 8000c2c:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_throttle_control */
  osMessageQDef(q_throttle_control, 32, uint16_t);
 8000c2e:	4b4f      	ldr	r3, [pc, #316]	; (8000d6c <main+0x1b0>)
 8000c30:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_throttle_controlHandle = osMessageCreate(osMessageQ(q_throttle_control), NULL);
 8000c3a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f003 fd46 	bl	80046d2 <osMessageCreate>
 8000c46:	4602      	mov	r2, r0
 8000c48:	4b4a      	ldr	r3, [pc, #296]	; (8000d74 <main+0x1b8>)
 8000c4a:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_light_control */
  osMessageQDef(q_light_control, 32, uint8_t);
 8000c4c:	4b4a      	ldr	r3, [pc, #296]	; (8000d78 <main+0x1bc>)
 8000c4e:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_light_controlHandle = osMessageCreate(osMessageQ(q_light_control), NULL);
 8000c58:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 fd37 	bl	80046d2 <osMessageCreate>
 8000c64:	4602      	mov	r2, r0
 8000c66:	4b45      	ldr	r3, [pc, #276]	; (8000d7c <main+0x1c0>)
 8000c68:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_trim_steering */
  osMessageQDef(q_trim_steering, 32, uint8_t);
 8000c6a:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <main+0x1bc>)
 8000c6c:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8000c70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_trim_steeringHandle = osMessageCreate(osMessageQ(q_trim_steering), NULL);
 8000c76:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 fd28 	bl	80046d2 <osMessageCreate>
 8000c82:	4602      	mov	r2, r0
 8000c84:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <main+0x1c4>)
 8000c86:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_disp_steering */
  osMessageQDef(q_disp_steering, 16, uint16_t);
 8000c88:	4b3e      	ldr	r3, [pc, #248]	; (8000d84 <main+0x1c8>)
 8000c8a:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_disp_steeringHandle = osMessageCreate(osMessageQ(q_disp_steering), NULL);
 8000c94:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 fd19 	bl	80046d2 <osMessageCreate>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	4b39      	ldr	r3, [pc, #228]	; (8000d88 <main+0x1cc>)
 8000ca4:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_disp_light */
  osMessageQDef(q_disp_light, 16, uint8_t);
 8000ca6:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <main+0x1d0>)
 8000ca8:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000cac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_disp_lightHandle = osMessageCreate(osMessageQ(q_disp_light), NULL);
 8000cb2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f003 fd0a 	bl	80046d2 <osMessageCreate>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <main+0x1d4>)
 8000cc2:	601a      	str	r2, [r3, #0]

  /* definition and creation of q_disp_throttle */
  osMessageQDef(q_disp_throttle, 16, uint16_t);
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <main+0x1c8>)
 8000cc6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000cca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  q_disp_throttleHandle = osMessageCreate(osMessageQ(q_disp_throttle), NULL);
 8000cd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f003 fcfb 	bl	80046d2 <osMessageCreate>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <main+0x1d8>)
 8000ce0:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of display */
  osThreadDef(display, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <main+0x1dc>)
 8000ce4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000ce8:	461d      	mov	r5, r3
 8000cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayHandle = osThreadCreate(osThread(display), NULL);
 8000cf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f003 fc88 	bl	8004612 <osThreadCreate>
 8000d02:	4602      	mov	r2, r0
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <main+0x1e0>)
 8000d06:	601a      	str	r2, [r3, #0]

  /* definition and creation of send_message */
  osThreadDef(send_message, StartTask01, osPriorityNormal, 0, 128);
 8000d08:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <main+0x1e4>)
 8000d0a:	f107 0420 	add.w	r4, r7, #32
 8000d0e:	461d      	mov	r5, r3
 8000d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  send_messageHandle = osThreadCreate(osThread(send_message), NULL);
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 fc75 	bl	8004612 <osThreadCreate>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <main+0x1e8>)
 8000d2c:	601a      	str	r2, [r3, #0]

  /* definition and creation of dashboard */
  osThreadDef(dashboard, StartTask02, osPriorityNormal, 0, 128);
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <main+0x1ec>)
 8000d30:	1d3c      	adds	r4, r7, #4
 8000d32:	461d      	mov	r5, r3
 8000d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dashboardHandle = osThreadCreate(osThread(dashboard), NULL);
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 fc64 	bl	8004612 <osThreadCreate>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <main+0x1f0>)
 8000d4e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d50:	f003 fc58 	bl	8004604 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <main+0x198>
 8000d56:	bf00      	nop
 8000d58:	200010c8 	.word	0x200010c8
 8000d5c:	3c23d70a 	.word	0x3c23d70a
 8000d60:	42480000 	.word	0x42480000
 8000d64:	20001134 	.word	0x20001134
 8000d68:	200011f0 	.word	0x200011f0
 8000d6c:	08006aa8 	.word	0x08006aa8
 8000d70:	2000112c 	.word	0x2000112c
 8000d74:	2000104c 	.word	0x2000104c
 8000d78:	08006ab8 	.word	0x08006ab8
 8000d7c:	200010f0 	.word	0x200010f0
 8000d80:	20001050 	.word	0x20001050
 8000d84:	08006ac8 	.word	0x08006ac8
 8000d88:	200010c4 	.word	0x200010c4
 8000d8c:	08006ad8 	.word	0x08006ad8
 8000d90:	2000119c 	.word	0x2000119c
 8000d94:	200011ec 	.word	0x200011ec
 8000d98:	08006af0 	.word	0x08006af0
 8000d9c:	200011e8 	.word	0x200011e8
 8000da0:	08006b1c 	.word	0x08006b1c
 8000da4:	20001130 	.word	0x20001130
 8000da8:	08006b44 	.word	0x08006b44
 8000dac:	20001048 	.word	0x20001048

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	; 0x50
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dba:	2228      	movs	r2, #40	; 0x28
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f005 fdf1 	bl	80069a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dee:	2301      	movs	r3, #1
 8000df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dfc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 fb72 	bl	80034f0 <HAL_RCC_OscConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e12:	f000 fa2d 	bl	8001270 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2102      	movs	r1, #2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 fddc 	bl	80039f0 <HAL_RCC_ClockConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e3e:	f000 fa17 	bl	8001270 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e42:	2302      	movs	r3, #2
 8000e44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e4a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 ff56 	bl	8003d00 <HAL_RCCEx_PeriphCLKConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e5a:	f000 fa09 	bl	8001270 <Error_Handler>
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3750      	adds	r7, #80	; 0x50
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <MX_ADC1_Init+0x94>)
 8000e7a:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <MX_ADC1_Init+0x98>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_ADC1_Init+0x94>)
 8000e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_ADC1_Init+0x94>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <MX_ADC1_Init+0x94>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_ADC1_Init+0x94>)
 8000e94:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_ADC1_Init+0x94>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_ADC1_Init+0x94>)
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea6:	4815      	ldr	r0, [pc, #84]	; (8000efc <MX_ADC1_Init+0x94>)
 8000ea8:	f000 fc52 	bl	8001750 <HAL_ADC_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000eb2:	f000 f9dd 	bl	8001270 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_ADC1_Init+0x94>)
 8000ec8:	f000 fed6 	bl	8001c78 <HAL_ADC_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ed2:	f000 f9cd 	bl	8001270 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <MX_ADC1_Init+0x94>)
 8000ee4:	f000 fec8 	bl	8001c78 <HAL_ADC_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000eee:	f000 f9bf 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200010fc 	.word	0x200010fc
 8000f00:	40012400 	.word	0x40012400

08000f04 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_CAN_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_CAN_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_CAN_Init+0x64>)
 8000f10:	2209      	movs	r2, #9
 8000f12:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_CAN_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <MX_CAN_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_CAN_Init+0x64>)
 8000f22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f26:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_CAN_Init+0x64>)
 8000f2a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000f2e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <MX_CAN_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_CAN_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_CAN_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_CAN_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_CAN_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_CAN_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_CAN_Init+0x64>)
 8000f56:	f001 f891 	bl	800207c <HAL_CAN_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000f60:	f000 f986 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200010c8 	.word	0x200010c8
 8000f6c:	40006400 	.word	0x40006400

08000f70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f76:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <MX_I2C1_Init+0x54>)
 8000f78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <MX_I2C1_Init+0x58>)
 8000f7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_I2C1_Init+0x50>)
 8000fae:	f002 f967 	bl	8003280 <HAL_I2C_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fb8:	f000 f95a 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20001070 	.word	0x20001070
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	00061a80 	.word	0x00061a80

08000fcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_TIM2_Init+0x94>)
 8000fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_TIM2_Init+0x94>)
 8000ff2:	2247      	movs	r2, #71	; 0x47
 8000ff4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_TIM2_Init+0x94>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_TIM2_Init+0x94>)
 8000ffe:	f242 720f 	movw	r2, #9999	; 0x270f
 8001002:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_TIM2_Init+0x94>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_TIM2_Init+0x94>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001010:	4813      	ldr	r0, [pc, #76]	; (8001060 <MX_TIM2_Init+0x94>)
 8001012:	f002 ff2b 	bl	8003e6c <HAL_TIM_Base_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800101c:	f000 f928 	bl	8001270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001024:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	4619      	mov	r1, r3
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <MX_TIM2_Init+0x94>)
 800102e:	f003 f874 	bl	800411a <HAL_TIM_ConfigClockSource>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001038:	f000 f91a 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_TIM2_Init+0x94>)
 800104a:	f003 fa43 	bl	80044d4 <HAL_TIMEx_MasterConfigSynchronization>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001054:	f000 f90c 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200011a0 	.word	0x200011a0

08001064 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_DMA_Init+0x38>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <MX_DMA_Init+0x38>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_DMA_Init+0x38>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2105      	movs	r1, #5
 8001086:	200b      	movs	r0, #11
 8001088:	f001 fd33 	bl	8002af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800108c:	200b      	movs	r0, #11
 800108e:	f001 fd4c 	bl	8002b2a <HAL_NVIC_EnableIRQ>

}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <MX_GPIO_Init+0xd8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <MX_GPIO_Init+0xd8>)
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <MX_GPIO_Init+0xd8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0310 	and.w	r3, r3, #16
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <MX_GPIO_Init+0xd8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a29      	ldr	r2, [pc, #164]	; (8001178 <MX_GPIO_Init+0xd8>)
 80010d2:	f043 0320 	orr.w	r3, r3, #32
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <MX_GPIO_Init+0xd8>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <MX_GPIO_Init+0xd8>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a23      	ldr	r2, [pc, #140]	; (8001178 <MX_GPIO_Init+0xd8>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_GPIO_Init+0xd8>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <MX_GPIO_Init+0xd8>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <MX_GPIO_Init+0xd8>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_GPIO_Init+0xd8>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2104      	movs	r1, #4
 8001118:	4818      	ldr	r0, [pc, #96]	; (800117c <MX_GPIO_Init+0xdc>)
 800111a:	f002 f880 	bl	800321e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800111e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001128:	2301      	movs	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	4619      	mov	r1, r3
 8001132:	4813      	ldr	r0, [pc, #76]	; (8001180 <MX_GPIO_Init+0xe0>)
 8001134:	f001 ff02 	bl	8002f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001138:	2304      	movs	r3, #4
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	480b      	ldr	r0, [pc, #44]	; (800117c <MX_GPIO_Init+0xdc>)
 8001150:	f001 fef4 	bl	8002f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001154:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	4619      	mov	r1, r3
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_GPIO_Init+0xdc>)
 800116a:	f001 fee7 	bl	8002f3c <HAL_GPIO_Init>

}
 800116e:	bf00      	nop
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	40010c00 	.word	0x40010c00
 8001180:	40011000 	.word	0x40011000

08001184 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
				/* this task is displays information */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800118c:	2104      	movs	r1, #4
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <StartDefaultTask+0x1c>)
 8001190:	f002 f85d 	bl	800324e <HAL_GPIO_TogglePin>
	osDelay(500);
 8001194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001198:	f003 fa87 	bl	80046aa <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800119c:	e7f6      	b.n	800118c <StartDefaultTask+0x8>
 800119e:	bf00      	nop
 80011a0:	40010c00 	.word	0x40010c00

080011a4 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
				/* this task is prepares message and send message */
  /* Infinite loop */
  for(;;)
  {
	emergency_buff_send();
 80011ac:	f7ff fc1c 	bl	80009e8 <emergency_buff_send>
	prepare_buff_send();
 80011b0:	f7ff fb00 	bl	80007b4 <prepare_buff_send>
	osDelay(1);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f003 fa78 	bl	80046aa <osDelay>
	emergency_buff_send();
 80011ba:	e7f7      	b.n	80011ac <StartTask01+0x8>

080011bc <StartTask02>:
* @retval None
*/

/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
				/* this task is get data from dashboard */
  /* Infinite loop */
	HAL_ADC_Start_DMA(&hadc1, &adc_value, 2);
 80011c4:	2202      	movs	r2, #2
 80011c6:	491f      	ldr	r1, [pc, #124]	; (8001244 <StartTask02+0x88>)
 80011c8:	481f      	ldr	r0, [pc, #124]	; (8001248 <StartTask02+0x8c>)
 80011ca:	f000 fb99 	bl	8001900 <HAL_ADC_Start_DMA>
	status_motor = 1;
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <StartTask02+0x90>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
	osMessagePut(q_throttle_controlHandle, adc_value[0], 0);
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <StartTask02+0x94>)
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <StartTask02+0x88>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	f003 faa0 	bl	8004724 <osMessagePut>
	osMessagePut(q_steering_controlHandle, adc_value[1], 0);
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <StartTask02+0x98>)
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <StartTask02+0x88>)
 80011ea:	885b      	ldrh	r3, [r3, #2]
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	f003 fa98 	bl	8004724 <osMessagePut>
	osMessagePut(q_disp_steeringHandle, adc_value[1], 0);
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <StartTask02+0x9c>)
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <StartTask02+0x88>)
 80011fa:	885b      	ldrh	r3, [r3, #2]
 80011fc:	2200      	movs	r2, #0
 80011fe:	4619      	mov	r1, r3
 8001200:	f003 fa90 	bl	8004724 <osMessagePut>

	read_light_sw();
 8001204:	f7ff fc4e 	bl	8000aa4 <read_light_sw>
	osMessagePut(q_light_controlHandle, light_sw, 0);
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <StartTask02+0xa0>)
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <StartTask02+0xa4>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	f003 fa86 	bl	8004724 <osMessagePut>
	osMessagePut(q_disp_lightHandle, light_sw, 0);
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <StartTask02+0xa8>)
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <StartTask02+0xa4>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2200      	movs	r2, #0
 8001222:	4619      	mov	r1, r3
 8001224:	f003 fa7e 	bl	8004724 <osMessagePut>

	read_trim_button();
 8001228:	f7ff fc92 	bl	8000b50 <read_trim_button>
	osMessagePut(q_trim_steeringHandle, trim_button, 0);
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <StartTask02+0xac>)
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <StartTask02+0xb0>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2200      	movs	r2, #0
 8001236:	4619      	mov	r1, r3
 8001238:	f003 fa74 	bl	8004724 <osMessagePut>
	osDelay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f003 fa34 	bl	80046aa <osDelay>
	osMessagePut(q_throttle_controlHandle, adc_value[0], 0);
 8001242:	e7c7      	b.n	80011d4 <StartTask02+0x18>
 8001244:	200010f8 	.word	0x200010f8
 8001248:	200010fc 	.word	0x200010fc
 800124c:	200002e4 	.word	0x200002e4
 8001250:	2000104c 	.word	0x2000104c
 8001254:	2000112c 	.word	0x2000112c
 8001258:	200010c4 	.word	0x200010c4
 800125c:	200010f0 	.word	0x200010f0
 8001260:	200002e6 	.word	0x200002e6
 8001264:	2000119c 	.word	0x2000119c
 8001268:	20001050 	.word	0x20001050
 800126c:	200002e5 	.word	0x200002e5

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001276:	e7fe      	b.n	8001276 <Error_Handler+0x6>

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_MspInit+0x68>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_MspInit+0x68>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6193      	str	r3, [r2, #24]
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_MspInit+0x68>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_MspInit+0x68>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <HAL_MspInit+0x68>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_MspInit+0x68>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	210f      	movs	r1, #15
 80012b2:	f06f 0001 	mvn.w	r0, #1
 80012b6:	f001 fc1c 	bl	8002af2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_MspInit+0x6c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_MspInit+0x6c>)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000

080012e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a2c      	ldr	r2, [pc, #176]	; (80013b4 <HAL_ADC_MspInit+0xcc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d151      	bne.n	80013ac <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <HAL_ADC_MspInit+0xd0>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <HAL_ADC_MspInit+0xd0>)
 800130e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_ADC_MspInit+0xd0>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_ADC_MspInit+0xd0>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <HAL_ADC_MspInit+0xd0>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_ADC_MspInit+0xd0>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001338:	2303      	movs	r3, #3
 800133a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133c:	2303      	movs	r3, #3
 800133e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4619      	mov	r1, r3
 8001346:	481d      	ldr	r0, [pc, #116]	; (80013bc <HAL_ADC_MspInit+0xd4>)
 8001348:	f001 fdf8 	bl	8002f3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800134c:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_ADC_MspInit+0xd8>)
 800134e:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <HAL_ADC_MspInit+0xdc>)
 8001350:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_ADC_MspInit+0xd8>)
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_ADC_MspInit+0xd8>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_ADC_MspInit+0xd8>)
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_ADC_MspInit+0xd8>)
 8001366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <HAL_ADC_MspInit+0xd8>)
 800136e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001372:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_ADC_MspInit+0xd8>)
 8001376:	2220      	movs	r2, #32
 8001378:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_ADC_MspInit+0xd8>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001380:	480f      	ldr	r0, [pc, #60]	; (80013c0 <HAL_ADC_MspInit+0xd8>)
 8001382:	f001 fbed 	bl	8002b60 <HAL_DMA_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800138c:	f7ff ff70 	bl	8001270 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_ADC_MspInit+0xd8>)
 8001394:	621a      	str	r2, [r3, #32]
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_ADC_MspInit+0xd8>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2105      	movs	r1, #5
 80013a0:	2012      	movs	r0, #18
 80013a2:	f001 fba6 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013a6:	2012      	movs	r0, #18
 80013a8:	f001 fbbf 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40012400 	.word	0x40012400
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010800 	.word	0x40010800
 80013c0:	20001150 	.word	0x20001150
 80013c4:	40020008 	.word	0x40020008

080013c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a20      	ldr	r2, [pc, #128]	; (8001464 <HAL_CAN_MspInit+0x9c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d139      	bne.n	800145c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HAL_CAN_MspInit+0xa0>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <HAL_CAN_MspInit+0xa0>)
 80013ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013f2:	61d3      	str	r3, [r2, #28]
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_CAN_MspInit+0xa0>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_CAN_MspInit+0xa0>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a18      	ldr	r2, [pc, #96]	; (8001468 <HAL_CAN_MspInit+0xa0>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_CAN_MspInit+0xa0>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800141c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4619      	mov	r1, r3
 800142c:	480f      	ldr	r0, [pc, #60]	; (800146c <HAL_CAN_MspInit+0xa4>)
 800142e:	f001 fd85 	bl	8002f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4619      	mov	r1, r3
 8001446:	4809      	ldr	r0, [pc, #36]	; (800146c <HAL_CAN_MspInit+0xa4>)
 8001448:	f001 fd78 	bl	8002f3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2105      	movs	r1, #5
 8001450:	2014      	movs	r0, #20
 8001452:	f001 fb4e 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001456:	2014      	movs	r0, #20
 8001458:	f001 fb67 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40006400 	.word	0x40006400
 8001468:	40021000 	.word	0x40021000
 800146c:	40010800 	.word	0x40010800

08001470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <HAL_I2C_MspInit+0x70>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d123      	bne.n	80014d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_I2C_MspInit+0x74>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <HAL_I2C_MspInit+0x74>)
 8001496:	f043 0308 	orr.w	r3, r3, #8
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_I2C_MspInit+0x74>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014a8:	23c0      	movs	r3, #192	; 0xc0
 80014aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ac:	2312      	movs	r3, #18
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4619      	mov	r1, r3
 80014ba:	480b      	ldr	r0, [pc, #44]	; (80014e8 <HAL_I2C_MspInit+0x78>)
 80014bc:	f001 fd3e 	bl	8002f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_I2C_MspInit+0x74>)
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_I2C_MspInit+0x74>)
 80014c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ca:	61d3      	str	r3, [r2, #28]
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_I2C_MspInit+0x74>)
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014d8:	bf00      	nop
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40005400 	.word	0x40005400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010c00 	.word	0x40010c00

080014ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014fc:	d113      	bne.n	8001526 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_TIM_Base_MspInit+0x44>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <HAL_TIM_Base_MspInit+0x44>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_TIM_Base_MspInit+0x44>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	201c      	movs	r0, #28
 800151c:	f001 fae9 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001520:	201c      	movs	r0, #28
 8001522:	f001 fb02 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x4>

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <MemManage_Handler+0x4>

08001546 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <UsageFault_Handler+0x4>

08001552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001562:	f000 f8d9 	bl	8001718 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001566:	f004 fd25 	bl	8005fb4 <xTaskGetSchedulerState>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d001      	beq.n	8001574 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001570:	f004 ff8a 	bl	8006488 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <DMA1_Channel1_IRQHandler+0x10>)
 800157e:	f001 fba9 	bl	8002cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20001150 	.word	0x20001150

0800158c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <ADC1_2_IRQHandler+0x10>)
 8001592:	f000 fa93 	bl	8001abc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200010fc 	.word	0x200010fc

080015a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80015a6:	f000 ffa7 	bl	80024f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200010c8 	.word	0x200010c8

080015b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <TIM2_IRQHandler+0x10>)
 80015ba:	f002 fca6 	bl	8003f0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200011a0 	.word	0x200011a0

080015c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <_sbrk+0x5c>)
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_sbrk+0x60>)
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <_sbrk+0x64>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <_sbrk+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d207      	bcs.n	8001608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f8:	f005 f998 	bl	800692c <__errno>
 80015fc:	4602      	mov	r2, r0
 80015fe:	230c      	movs	r3, #12
 8001600:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	e009      	b.n	800161c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <_sbrk+0x64>)
 8001618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20005000 	.word	0x20005000
 8001628:	00000400 	.word	0x00000400
 800162c:	200002f0 	.word	0x200002f0
 8001630:	20001208 	.word	0x20001208

08001634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001642:	490d      	ldr	r1, [pc, #52]	; (8001678 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001658:	4c0a      	ldr	r4, [pc, #40]	; (8001684 <LoopFillZerobss+0x22>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001666:	f7ff ffe5 	bl	8001634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166a:	f005 f965 	bl	8006938 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800166e:	f7ff faa5 	bl	8000bbc <main>
  bx lr
 8001672:	4770      	bx	lr
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800167c:	08006b9c 	.word	0x08006b9c
  ldr r2, =_sbss
 8001680:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001684:	20001204 	.word	0x20001204

08001688 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <CAN1_RX1_IRQHandler>
	...

0800168c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_Init+0x28>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_Init+0x28>)
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f001 fa1d 	bl	8002adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	200f      	movs	r0, #15
 80016a4:	f000 f808 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff fde6 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40022000 	.word	0x40022000

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x54>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x58>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 fa35 	bl	8002b46 <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f001 f9fd 	bl	8002af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <HAL_InitTick+0x5c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000000 	.word	0x20000000
 8001710:	20000008 	.word	0x20000008
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_IncTick+0x1c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_IncTick+0x20>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a03      	ldr	r2, [pc, #12]	; (8001738 <HAL_IncTick+0x20>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	20000008 	.word	0x20000008
 8001738:	200011fc 	.word	0x200011fc

0800173c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b02      	ldr	r3, [pc, #8]	; (800174c <HAL_GetTick+0x10>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	200011fc 	.word	0x200011fc

08001750 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0be      	b.n	80018f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	2b00      	cmp	r3, #0
 800177e:	d109      	bne.n	8001794 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fdaa 	bl	80012e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fbc1 	bl	8001f1c <ADC_ConversionStop_Disable>
 800179a:	4603      	mov	r3, r0
 800179c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f040 8099 	bne.w	80018de <HAL_ADC_Init+0x18e>
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 8095 	bne.w	80018de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017bc:	f023 0302 	bic.w	r3, r3, #2
 80017c0:	f043 0202 	orr.w	r2, r3, #2
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7b1b      	ldrb	r3, [r3, #12]
 80017d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	4313      	orrs	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e8:	d003      	beq.n	80017f2 <HAL_ADC_Init+0xa2>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <HAL_ADC_Init+0xa8>
 80017f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f6:	e000      	b.n	80017fa <HAL_ADC_Init+0xaa>
 80017f8:	2300      	movs	r3, #0
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7d1b      	ldrb	r3, [r3, #20]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d119      	bne.n	800183c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7b1b      	ldrb	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	3b01      	subs	r3, #1
 8001816:	035a      	lsls	r2, r3, #13
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	e00b      	b.n	800183c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	f043 0220 	orr.w	r2, r3, #32
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	f043 0201 	orr.w	r2, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	430a      	orrs	r2, r1
 800184e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <HAL_ADC_Init+0x1a8>)
 8001858:	4013      	ands	r3, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	430b      	orrs	r3, r1
 8001862:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800186c:	d003      	beq.n	8001876 <HAL_ADC_Init+0x126>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d104      	bne.n	8001880 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	3b01      	subs	r3, #1
 800187c:	051b      	lsls	r3, r3, #20
 800187e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	430a      	orrs	r2, r1
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_ADC_Init+0x1ac>)
 800189c:	4013      	ands	r3, r2
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d10b      	bne.n	80018bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	f023 0303 	bic.w	r3, r3, #3
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018ba:	e018      	b.n	80018ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	f023 0312 	bic.w	r3, r3, #18
 80018c4:	f043 0210 	orr.w	r2, r3, #16
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	f043 0201 	orr.w	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018dc:	e007      	b.n	80018ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	f043 0210 	orr.w	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	ffe1f7fd 	.word	0xffe1f7fd
 80018fc:	ff1f0efe 	.word	0xff1f0efe

08001900 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a64      	ldr	r2, [pc, #400]	; (8001aa8 <HAL_ADC_Start_DMA+0x1a8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d004      	beq.n	8001924 <HAL_ADC_Start_DMA+0x24>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a63      	ldr	r2, [pc, #396]	; (8001aac <HAL_ADC_Start_DMA+0x1ac>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d106      	bne.n	8001932 <HAL_ADC_Start_DMA+0x32>
 8001924:	4b60      	ldr	r3, [pc, #384]	; (8001aa8 <HAL_ADC_Start_DMA+0x1a8>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800192c:	2b00      	cmp	r3, #0
 800192e:	f040 80b3 	bne.w	8001a98 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_ADC_Start_DMA+0x40>
 800193c:	2302      	movs	r3, #2
 800193e:	e0ae      	b.n	8001a9e <HAL_ADC_Start_DMA+0x19e>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fa8d 	bl	8001e68 <ADC_Enable>
 800194e:	4603      	mov	r3, r0
 8001950:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	2b00      	cmp	r3, #0
 8001956:	f040 809a 	bne.w	8001a8e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a4e      	ldr	r2, [pc, #312]	; (8001aac <HAL_ADC_Start_DMA+0x1ac>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d105      	bne.n	8001984 <HAL_ADC_Start_DMA+0x84>
 8001978:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <HAL_ADC_Start_DMA+0x1a8>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d115      	bne.n	80019b0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199a:	2b00      	cmp	r3, #0
 800199c:	d026      	beq.n	80019ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ae:	e01d      	b.n	80019ec <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a39      	ldr	r2, [pc, #228]	; (8001aa8 <HAL_ADC_Start_DMA+0x1a8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d004      	beq.n	80019d0 <HAL_ADC_Start_DMA+0xd0>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a38      	ldr	r2, [pc, #224]	; (8001aac <HAL_ADC_Start_DMA+0x1ac>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d10d      	bne.n	80019ec <HAL_ADC_Start_DMA+0xec>
 80019d0:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <HAL_ADC_Start_DMA+0x1a8>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	f023 0206 	bic.w	r2, r3, #6
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a04:	e002      	b.n	8001a0c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4a25      	ldr	r2, [pc, #148]	; (8001ab0 <HAL_ADC_Start_DMA+0x1b0>)
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4a24      	ldr	r2, [pc, #144]	; (8001ab4 <HAL_ADC_Start_DMA+0x1b4>)
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4a23      	ldr	r2, [pc, #140]	; (8001ab8 <HAL_ADC_Start_DMA+0x1b8>)
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f06f 0202 	mvn.w	r2, #2
 8001a34:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a44:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a18      	ldr	r0, [r3, #32]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	334c      	adds	r3, #76	; 0x4c
 8001a50:	4619      	mov	r1, r3
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f001 f8dd 	bl	8002c14 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a64:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a68:	d108      	bne.n	8001a7c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a78:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a7a:	e00f      	b.n	8001a9c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a8a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a8c:	e006      	b.n	8001a9c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001a96:	e001      	b.n	8001a9c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40012400 	.word	0x40012400
 8001aac:	40012800 	.word	0x40012800
 8001ab0:	08001f9f 	.word	0x08001f9f
 8001ab4:	0800201b 	.word	0x0800201b
 8001ab8:	08002037 	.word	0x08002037

08001abc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d140      	bne.n	8001b54 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d139      	bne.n	8001b54 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d105      	bne.n	8001af8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b02:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b06:	d11d      	bne.n	8001b44 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d119      	bne.n	8001b44 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0220 	bic.w	r2, r2, #32
 8001b1e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7fe ff77 	bl	8000a38 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f06f 0212 	mvn.w	r2, #18
 8001b52:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5e:	2b80      	cmp	r3, #128	; 0x80
 8001b60:	d14f      	bne.n	8001c02 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d148      	bne.n	8001c02 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d105      	bne.n	8001b88 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001b92:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001b96:	d012      	beq.n	8001bbe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d125      	bne.n	8001bf2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001bb0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bb4:	d11d      	bne.n	8001bf2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d119      	bne.n	8001bf2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bcc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d105      	bne.n	8001bf2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 fa39 	bl	800206a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 020c 	mvn.w	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0c:	2b40      	cmp	r3, #64	; 0x40
 8001c0e:	d114      	bne.n	8001c3a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10d      	bne.n	8001c3a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f812 	bl	8001c54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 0201 	mvn.w	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x20>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e0dc      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x1da>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b06      	cmp	r3, #6
 8001ca6:	d81c      	bhi.n	8001ce2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b05      	subs	r3, #5
 8001cba:	221f      	movs	r2, #31
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4019      	ands	r1, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3b05      	subs	r3, #5
 8001cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce0:	e03c      	b.n	8001d5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d81c      	bhi.n	8001d24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b23      	subs	r3, #35	; 0x23
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	4019      	ands	r1, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	3b23      	subs	r3, #35	; 0x23
 8001d16:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
 8001d22:	e01b      	b.n	8001d5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	3b41      	subs	r3, #65	; 0x41
 8001d36:	221f      	movs	r2, #31
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	4019      	ands	r1, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3b41      	subs	r3, #65	; 0x41
 8001d50:	fa00 f203 	lsl.w	r2, r0, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b09      	cmp	r3, #9
 8001d62:	d91c      	bls.n	8001d9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68d9      	ldr	r1, [r3, #12]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	3b1e      	subs	r3, #30
 8001d76:	2207      	movs	r2, #7
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4019      	ands	r1, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6898      	ldr	r0, [r3, #8]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3b1e      	subs	r3, #30
 8001d90:	fa00 f203 	lsl.w	r2, r0, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	e019      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6919      	ldr	r1, [r3, #16]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	2207      	movs	r2, #7
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4019      	ands	r1, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6898      	ldr	r0, [r3, #8]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b10      	cmp	r3, #16
 8001dd8:	d003      	beq.n	8001de2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dde:	2b11      	cmp	r3, #17
 8001de0:	d132      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <HAL_ADC_ConfigChannel+0x1e4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d125      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d126      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e08:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b10      	cmp	r3, #16
 8001e10:	d11a      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a13      	ldr	r2, [pc, #76]	; (8001e64 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	0c9a      	lsrs	r2, r3, #18
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e28:	e002      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f9      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x1b2>
 8001e36:	e007      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	f043 0220 	orr.w	r2, r3, #32
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	40012400 	.word	0x40012400
 8001e60:	20000000 	.word	0x20000000
 8001e64:	431bde83 	.word	0x431bde83

08001e68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d040      	beq.n	8001f08 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <ADC_Enable+0xac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <ADC_Enable+0xb0>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	0c9b      	lsrs	r3, r3, #18
 8001ea2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ea4:	e002      	b.n	8001eac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f9      	bne.n	8001ea6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eb2:	f7ff fc43 	bl	800173c <HAL_GetTick>
 8001eb6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001eb8:	e01f      	b.n	8001efa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001eba:	f7ff fc3f 	bl	800173c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d918      	bls.n	8001efa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d011      	beq.n	8001efa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	f043 0210 	orr.w	r2, r3, #16
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e007      	b.n	8001f0a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d1d8      	bne.n	8001eba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000000 	.word	0x20000000
 8001f18:	431bde83 	.word	0x431bde83

08001f1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d12e      	bne.n	8001f94 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0201 	bic.w	r2, r2, #1
 8001f44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f46:	f7ff fbf9 	bl	800173c <HAL_GetTick>
 8001f4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f4c:	e01b      	b.n	8001f86 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f4e:	f7ff fbf5 	bl	800173c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d914      	bls.n	8001f86 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10d      	bne.n	8001f86 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	f043 0210 	orr.w	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	f043 0201 	orr.w	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e007      	b.n	8001f96 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d0dc      	beq.n	8001f4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d127      	bne.n	8002008 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fd2:	d115      	bne.n	8002000 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d111      	bne.n	8002000 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	f043 0201 	orr.w	r2, r3, #1
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f7fe fd19 	bl	8000a38 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002006:	e004      	b.n	8002012 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f7ff fe0a 	bl	8001c42 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	f043 0204 	orr.w	r2, r3, #4
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff fe02 	bl	8001c66 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0ed      	b.n	800226a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff f994 	bl	80013c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020b0:	f7ff fb44 	bl	800173c <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020b6:	e012      	b.n	80020de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020b8:	f7ff fb40 	bl	800173c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b0a      	cmp	r3, #10
 80020c4:	d90b      	bls.n	80020de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2205      	movs	r2, #5
 80020d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0c5      	b.n	800226a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0e5      	beq.n	80020b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0202 	bic.w	r2, r2, #2
 80020fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020fc:	f7ff fb1e 	bl	800173c <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002102:	e012      	b.n	800212a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002104:	f7ff fb1a 	bl	800173c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b0a      	cmp	r3, #10
 8002110:	d90b      	bls.n	800212a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2205      	movs	r2, #5
 8002122:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e09f      	b.n	800226a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e5      	bne.n	8002104 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7e1b      	ldrb	r3, [r3, #24]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d108      	bne.n	8002152 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e007      	b.n	8002162 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002160:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7e5b      	ldrb	r3, [r3, #25]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d108      	bne.n	800217c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e007      	b.n	800218c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800218a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7e9b      	ldrb	r3, [r3, #26]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d108      	bne.n	80021a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0220 	orr.w	r2, r2, #32
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e007      	b.n	80021b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0220 	bic.w	r2, r2, #32
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7edb      	ldrb	r3, [r3, #27]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d108      	bne.n	80021d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0210 	bic.w	r2, r2, #16
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e007      	b.n	80021e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0210 	orr.w	r2, r2, #16
 80021de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7f1b      	ldrb	r3, [r3, #28]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d108      	bne.n	80021fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0208 	orr.w	r2, r2, #8
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e007      	b.n	800220a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0208 	bic.w	r2, r2, #8
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7f5b      	ldrb	r3, [r3, #29]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d108      	bne.n	8002224 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0204 	orr.w	r2, r2, #4
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e007      	b.n	8002234 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0204 	bic.w	r2, r2, #4
 8002232:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	ea42 0103 	orr.w	r1, r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d12e      	bne.n	80022e4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2202      	movs	r2, #2
 800228a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0201 	bic.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800229e:	f7ff fa4d 	bl	800173c <HAL_GetTick>
 80022a2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022a4:	e012      	b.n	80022cc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022a6:	f7ff fa49 	bl	800173c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b0a      	cmp	r3, #10
 80022b2:	d90b      	bls.n	80022cc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2205      	movs	r2, #5
 80022c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e012      	b.n	80022f2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1e5      	bne.n	80022a6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e006      	b.n	80022f2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
  }
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b089      	sub	sp, #36	; 0x24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002318:	7ffb      	ldrb	r3, [r7, #31]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d003      	beq.n	8002326 <HAL_CAN_AddTxMessage+0x2c>
 800231e:	7ffb      	ldrb	r3, [r7, #31]
 8002320:	2b02      	cmp	r3, #2
 8002322:	f040 80b8 	bne.w	8002496 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10a      	bne.n	8002346 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80a0 	beq.w	8002486 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	0e1b      	lsrs	r3, r3, #24
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d907      	bls.n	8002366 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e09e      	b.n	80024a4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002366:	2201      	movs	r2, #1
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10d      	bne.n	8002394 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	6809      	ldr	r1, [r1, #0]
 8002386:	431a      	orrs	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3318      	adds	r3, #24
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	440b      	add	r3, r1
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e00f      	b.n	80023b4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800239e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023a4:	68f9      	ldr	r1, [r7, #12]
 80023a6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80023a8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3318      	adds	r3, #24
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	440b      	add	r3, r1
 80023b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6819      	ldr	r1, [r3, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3318      	adds	r3, #24
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	440b      	add	r3, r1
 80023c4:	3304      	adds	r3, #4
 80023c6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	7d1b      	ldrb	r3, [r3, #20]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d111      	bne.n	80023f4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3318      	adds	r3, #24
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	6811      	ldr	r1, [r2, #0]
 80023e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3318      	adds	r3, #24
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	440b      	add	r3, r1
 80023f0:	3304      	adds	r3, #4
 80023f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3307      	adds	r3, #7
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	061a      	lsls	r2, r3, #24
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3306      	adds	r3, #6
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	041b      	lsls	r3, r3, #16
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3305      	adds	r3, #5
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	4313      	orrs	r3, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	3204      	adds	r2, #4
 8002414:	7812      	ldrb	r2, [r2, #0]
 8002416:	4610      	mov	r0, r2
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	6811      	ldr	r1, [r2, #0]
 800241c:	ea43 0200 	orr.w	r2, r3, r0
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	440b      	add	r3, r1
 8002426:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800242a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3303      	adds	r3, #3
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	061a      	lsls	r2, r3, #24
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3302      	adds	r3, #2
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	041b      	lsls	r3, r3, #16
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3301      	adds	r3, #1
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	4313      	orrs	r3, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	7812      	ldrb	r2, [r2, #0]
 800244c:	4610      	mov	r0, r2
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	6811      	ldr	r1, [r2, #0]
 8002452:	ea43 0200 	orr.w	r2, r3, r0
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	440b      	add	r3, r1
 800245c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002460:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	3318      	adds	r3, #24
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	4413      	add	r3, r2
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	6811      	ldr	r1, [r2, #0]
 8002474:	f043 0201 	orr.w	r2, r3, #1
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3318      	adds	r3, #24
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	440b      	add	r3, r1
 8002480:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e00e      	b.n	80024a4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e006      	b.n	80024a4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
  }
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3724      	adds	r7, #36	; 0x24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024be:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d002      	beq.n	80024cc <HAL_CAN_ActivateNotification+0x1e>
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d109      	bne.n	80024e0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6959      	ldr	r1, [r3, #20]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	e006      	b.n	80024ee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d07c      	beq.n	8002638 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d023      	beq.n	8002590 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f97d 	bl	800285a <HAL_CAN_TxMailbox0CompleteCallback>
 8002560:	e016      	b.n	8002590 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
 8002574:	e00c      	b.n	8002590 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
 8002588:	e002      	b.n	8002590 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f980 	bl	8002890 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d024      	beq.n	80025e4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f95c 	bl	800286c <HAL_CAN_TxMailbox1CompleteCallback>
 80025b4:	e016      	b.n	80025e4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
 80025c8:	e00c      	b.n	80025e4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
 80025dc:	e002      	b.n	80025e4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f95f 	bl	80028a2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d024      	beq.n	8002638 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f93b 	bl	800287e <HAL_CAN_TxMailbox2CompleteCallback>
 8002608:	e016      	b.n	8002638 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d004      	beq.n	800261e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
 800261c:	e00c      	b.n	8002638 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d004      	beq.n	8002632 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
 8002630:	e002      	b.n	8002638 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f93e 	bl	80028b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00c      	beq.n	800265c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002652:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2210      	movs	r2, #16
 800265a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2208      	movs	r2, #8
 8002676:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f92d 	bl	80028d8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d009      	beq.n	800269c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f915 	bl	80028c6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00c      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2210      	movs	r2, #16
 80026be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d006      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2208      	movs	r2, #8
 80026da:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f90d 	bl	80028fc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8f5 	bl	80028ea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d006      	beq.n	8002722 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2210      	movs	r2, #16
 800271a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f8f6 	bl	800290e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2208      	movs	r2, #8
 800273c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f8ee 	bl	8002920 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d075      	beq.n	800283a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d06c      	beq.n	8002832 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	f043 0304 	orr.w	r3, r3, #4
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d03d      	beq.n	8002832 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d038      	beq.n	8002832 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027c6:	2b30      	cmp	r3, #48	; 0x30
 80027c8:	d017      	beq.n	80027fa <HAL_CAN_IRQHandler+0x302>
 80027ca:	2b30      	cmp	r3, #48	; 0x30
 80027cc:	d804      	bhi.n	80027d8 <HAL_CAN_IRQHandler+0x2e0>
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d009      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x2ee>
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d00c      	beq.n	80027f0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027d6:	e024      	b.n	8002822 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80027d8:	2b50      	cmp	r3, #80	; 0x50
 80027da:	d018      	beq.n	800280e <HAL_CAN_IRQHandler+0x316>
 80027dc:	2b60      	cmp	r3, #96	; 0x60
 80027de:	d01b      	beq.n	8002818 <HAL_CAN_IRQHandler+0x320>
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d00f      	beq.n	8002804 <HAL_CAN_IRQHandler+0x30c>
            break;
 80027e4:	e01d      	b.n	8002822 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	f043 0308 	orr.w	r3, r3, #8
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027ee:	e018      	b.n	8002822 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	f043 0310 	orr.w	r3, r3, #16
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027f8:	e013      	b.n	8002822 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	f043 0320 	orr.w	r3, r3, #32
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002802:	e00e      	b.n	8002822 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800280c:	e009      	b.n	8002822 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002816:	e004      	b.n	8002822 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002820:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699a      	ldr	r2, [r3, #24]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002830:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2204      	movs	r2, #4
 8002838:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f870 	bl	8002932 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002852:	bf00      	nop
 8002854:	3728      	adds	r7, #40	; 0x28
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr

0800290e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800296c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002976:	4a04      	ldr	r2, [pc, #16]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60d3      	str	r3, [r2, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f003 0307 	and.w	r3, r3, #7
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	db0b      	blt.n	80029d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__NVIC_EnableIRQ+0x34>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2001      	movs	r0, #1
 80029ca:	fa00 f202 	lsl.w	r2, r0, r2
 80029ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	e000e100 	.word	0xe000e100

080029e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	6039      	str	r1, [r7, #0]
 80029ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	db0a      	blt.n	8002a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	490c      	ldr	r1, [pc, #48]	; (8002a2c <__NVIC_SetPriority+0x4c>)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	0112      	lsls	r2, r2, #4
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	440b      	add	r3, r1
 8002a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a08:	e00a      	b.n	8002a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4908      	ldr	r1, [pc, #32]	; (8002a30 <__NVIC_SetPriority+0x50>)
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	3b04      	subs	r3, #4
 8002a18:	0112      	lsls	r2, r2, #4
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	761a      	strb	r2, [r3, #24]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000e100 	.word	0xe000e100
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f1c3 0307 	rsb	r3, r3, #7
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	bf28      	it	cs
 8002a52:	2304      	movcs	r3, #4
 8002a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d902      	bls.n	8002a64 <NVIC_EncodePriority+0x30>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3b03      	subs	r3, #3
 8002a62:	e000      	b.n	8002a66 <NVIC_EncodePriority+0x32>
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	f04f 32ff 	mov.w	r2, #4294967295
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	401a      	ands	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	43d9      	mvns	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	4313      	orrs	r3, r2
         );
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3724      	adds	r7, #36	; 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa8:	d301      	bcc.n	8002aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00f      	b.n	8002ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <SysTick_Config+0x40>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab6:	210f      	movs	r1, #15
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	f7ff ff90 	bl	80029e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <SysTick_Config+0x40>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <SysTick_Config+0x40>)
 8002ac8:	2207      	movs	r2, #7
 8002aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	e000e010 	.word	0xe000e010

08002adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ff2d 	bl	8002944 <__NVIC_SetPriorityGrouping>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b04:	f7ff ff42 	bl	800298c <__NVIC_GetPriorityGrouping>
 8002b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	6978      	ldr	r0, [r7, #20]
 8002b10:	f7ff ff90 	bl	8002a34 <NVIC_EncodePriority>
 8002b14:	4602      	mov	r2, r0
 8002b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff5f 	bl	80029e0 <__NVIC_SetPriority>
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff35 	bl	80029a8 <__NVIC_EnableIRQ>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffa2 	bl	8002a98 <SysTick_Config>
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e043      	b.n	8002bfe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <HAL_DMA_Init+0xa8>)
 8002b7e:	4413      	add	r3, r2
 8002b80:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <HAL_DMA_Init+0xac>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	009a      	lsls	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1f      	ldr	r2, [pc, #124]	; (8002c10 <HAL_DMA_Init+0xb0>)
 8002b92:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002baa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002bae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	bffdfff8 	.word	0xbffdfff8
 8002c0c:	cccccccd 	.word	0xcccccccd
 8002c10:	40020000 	.word	0x40020000

08002c14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_DMA_Start_IT+0x20>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e04a      	b.n	8002cca <HAL_DMA_Start_IT+0xb6>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d13a      	bne.n	8002cbc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f938 	bl	8002ee0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 020e 	orr.w	r2, r2, #14
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e00f      	b.n	8002caa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0204 	bic.w	r2, r2, #4
 8002c98:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 020a 	orr.w	r2, r2, #10
 8002ca8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e005      	b.n	8002cc8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d04f      	beq.n	8002d9c <HAL_DMA_IRQHandler+0xc8>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d04a      	beq.n	8002d9c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d107      	bne.n	8002d24 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a66      	ldr	r2, [pc, #408]	; (8002ec4 <HAL_DMA_IRQHandler+0x1f0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d029      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xae>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a65      	ldr	r2, [pc, #404]	; (8002ec8 <HAL_DMA_IRQHandler+0x1f4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xaa>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a63      	ldr	r2, [pc, #396]	; (8002ecc <HAL_DMA_IRQHandler+0x1f8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01a      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xa4>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a62      	ldr	r2, [pc, #392]	; (8002ed0 <HAL_DMA_IRQHandler+0x1fc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d012      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x9e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a60      	ldr	r2, [pc, #384]	; (8002ed4 <HAL_DMA_IRQHandler+0x200>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00a      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x98>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a5f      	ldr	r2, [pc, #380]	; (8002ed8 <HAL_DMA_IRQHandler+0x204>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d102      	bne.n	8002d66 <HAL_DMA_IRQHandler+0x92>
 8002d60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d64:	e00e      	b.n	8002d84 <HAL_DMA_IRQHandler+0xb0>
 8002d66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d6a:	e00b      	b.n	8002d84 <HAL_DMA_IRQHandler+0xb0>
 8002d6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d70:	e008      	b.n	8002d84 <HAL_DMA_IRQHandler+0xb0>
 8002d72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d76:	e005      	b.n	8002d84 <HAL_DMA_IRQHandler+0xb0>
 8002d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d7c:	e002      	b.n	8002d84 <HAL_DMA_IRQHandler+0xb0>
 8002d7e:	2340      	movs	r3, #64	; 0x40
 8002d80:	e000      	b.n	8002d84 <HAL_DMA_IRQHandler+0xb0>
 8002d82:	2304      	movs	r3, #4
 8002d84:	4a55      	ldr	r2, [pc, #340]	; (8002edc <HAL_DMA_IRQHandler+0x208>)
 8002d86:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8094 	beq.w	8002eba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d9a:	e08e      	b.n	8002eba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	2202      	movs	r2, #2
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d056      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x186>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d051      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 020a 	bic.w	r2, r2, #10
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a38      	ldr	r2, [pc, #224]	; (8002ec4 <HAL_DMA_IRQHandler+0x1f0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d029      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x166>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a37      	ldr	r2, [pc, #220]	; (8002ec8 <HAL_DMA_IRQHandler+0x1f4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d022      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x162>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a35      	ldr	r2, [pc, #212]	; (8002ecc <HAL_DMA_IRQHandler+0x1f8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01a      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x15c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a34      	ldr	r2, [pc, #208]	; (8002ed0 <HAL_DMA_IRQHandler+0x1fc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d012      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x156>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a32      	ldr	r2, [pc, #200]	; (8002ed4 <HAL_DMA_IRQHandler+0x200>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00a      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x150>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a31      	ldr	r2, [pc, #196]	; (8002ed8 <HAL_DMA_IRQHandler+0x204>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d102      	bne.n	8002e1e <HAL_DMA_IRQHandler+0x14a>
 8002e18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e1c:	e00e      	b.n	8002e3c <HAL_DMA_IRQHandler+0x168>
 8002e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e22:	e00b      	b.n	8002e3c <HAL_DMA_IRQHandler+0x168>
 8002e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e28:	e008      	b.n	8002e3c <HAL_DMA_IRQHandler+0x168>
 8002e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e2e:	e005      	b.n	8002e3c <HAL_DMA_IRQHandler+0x168>
 8002e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e34:	e002      	b.n	8002e3c <HAL_DMA_IRQHandler+0x168>
 8002e36:	2320      	movs	r3, #32
 8002e38:	e000      	b.n	8002e3c <HAL_DMA_IRQHandler+0x168>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	4a27      	ldr	r2, [pc, #156]	; (8002edc <HAL_DMA_IRQHandler+0x208>)
 8002e3e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d034      	beq.n	8002eba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e58:	e02f      	b.n	8002eba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2208      	movs	r2, #8
 8002e60:	409a      	lsls	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d028      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x1e8>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d023      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 020e 	bic.w	r2, r2, #14
 8002e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	4798      	blx	r3
    }
  }
  return;
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
}
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40020008 	.word	0x40020008
 8002ec8:	4002001c 	.word	0x4002001c
 8002ecc:	40020030 	.word	0x40020030
 8002ed0:	40020044 	.word	0x40020044
 8002ed4:	40020058 	.word	0x40020058
 8002ed8:	4002006c 	.word	0x4002006c
 8002edc:	40020000 	.word	0x40020000

08002ee0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8002efc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d108      	bne.n	8002f20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f1e:	e007      	b.n	8002f30 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	60da      	str	r2, [r3, #12]
}
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b08b      	sub	sp, #44	; 0x2c
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4e:	e127      	b.n	80031a0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f50:	2201      	movs	r2, #1
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	f040 8116 	bne.w	800319a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b12      	cmp	r3, #18
 8002f74:	d034      	beq.n	8002fe0 <HAL_GPIO_Init+0xa4>
 8002f76:	2b12      	cmp	r3, #18
 8002f78:	d80d      	bhi.n	8002f96 <HAL_GPIO_Init+0x5a>
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d02b      	beq.n	8002fd6 <HAL_GPIO_Init+0x9a>
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d804      	bhi.n	8002f8c <HAL_GPIO_Init+0x50>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d031      	beq.n	8002fea <HAL_GPIO_Init+0xae>
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d01c      	beq.n	8002fc4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f8a:	e048      	b.n	800301e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d043      	beq.n	8003018 <HAL_GPIO_Init+0xdc>
 8002f90:	2b11      	cmp	r3, #17
 8002f92:	d01b      	beq.n	8002fcc <HAL_GPIO_Init+0x90>
          break;
 8002f94:	e043      	b.n	800301e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f96:	4a89      	ldr	r2, [pc, #548]	; (80031bc <HAL_GPIO_Init+0x280>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d026      	beq.n	8002fea <HAL_GPIO_Init+0xae>
 8002f9c:	4a87      	ldr	r2, [pc, #540]	; (80031bc <HAL_GPIO_Init+0x280>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d806      	bhi.n	8002fb0 <HAL_GPIO_Init+0x74>
 8002fa2:	4a87      	ldr	r2, [pc, #540]	; (80031c0 <HAL_GPIO_Init+0x284>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d020      	beq.n	8002fea <HAL_GPIO_Init+0xae>
 8002fa8:	4a86      	ldr	r2, [pc, #536]	; (80031c4 <HAL_GPIO_Init+0x288>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01d      	beq.n	8002fea <HAL_GPIO_Init+0xae>
          break;
 8002fae:	e036      	b.n	800301e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002fb0:	4a85      	ldr	r2, [pc, #532]	; (80031c8 <HAL_GPIO_Init+0x28c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d019      	beq.n	8002fea <HAL_GPIO_Init+0xae>
 8002fb6:	4a85      	ldr	r2, [pc, #532]	; (80031cc <HAL_GPIO_Init+0x290>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d016      	beq.n	8002fea <HAL_GPIO_Init+0xae>
 8002fbc:	4a84      	ldr	r2, [pc, #528]	; (80031d0 <HAL_GPIO_Init+0x294>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <HAL_GPIO_Init+0xae>
          break;
 8002fc2:	e02c      	b.n	800301e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	623b      	str	r3, [r7, #32]
          break;
 8002fca:	e028      	b.n	800301e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	623b      	str	r3, [r7, #32]
          break;
 8002fd4:	e023      	b.n	800301e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	3308      	adds	r3, #8
 8002fdc:	623b      	str	r3, [r7, #32]
          break;
 8002fde:	e01e      	b.n	800301e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	623b      	str	r3, [r7, #32]
          break;
 8002fe8:	e019      	b.n	800301e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ff2:	2304      	movs	r3, #4
 8002ff4:	623b      	str	r3, [r7, #32]
          break;
 8002ff6:	e012      	b.n	800301e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d105      	bne.n	800300c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003000:	2308      	movs	r3, #8
 8003002:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	611a      	str	r2, [r3, #16]
          break;
 800300a:	e008      	b.n	800301e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800300c:	2308      	movs	r3, #8
 800300e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	615a      	str	r2, [r3, #20]
          break;
 8003016:	e002      	b.n	800301e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003018:	2300      	movs	r3, #0
 800301a:	623b      	str	r3, [r7, #32]
          break;
 800301c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2bff      	cmp	r3, #255	; 0xff
 8003022:	d801      	bhi.n	8003028 <HAL_GPIO_Init+0xec>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	e001      	b.n	800302c <HAL_GPIO_Init+0xf0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2bff      	cmp	r3, #255	; 0xff
 8003032:	d802      	bhi.n	800303a <HAL_GPIO_Init+0xfe>
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	e002      	b.n	8003040 <HAL_GPIO_Init+0x104>
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	3b08      	subs	r3, #8
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	210f      	movs	r1, #15
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	401a      	ands	r2, r3
 8003052:	6a39      	ldr	r1, [r7, #32]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	431a      	orrs	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8096 	beq.w	800319a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800306e:	4b59      	ldr	r3, [pc, #356]	; (80031d4 <HAL_GPIO_Init+0x298>)
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	4a58      	ldr	r2, [pc, #352]	; (80031d4 <HAL_GPIO_Init+0x298>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6193      	str	r3, [r2, #24]
 800307a:	4b56      	ldr	r3, [pc, #344]	; (80031d4 <HAL_GPIO_Init+0x298>)
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003086:	4a54      	ldr	r2, [pc, #336]	; (80031d8 <HAL_GPIO_Init+0x29c>)
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	3302      	adds	r3, #2
 800308e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003092:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	220f      	movs	r2, #15
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4013      	ands	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a4b      	ldr	r2, [pc, #300]	; (80031dc <HAL_GPIO_Init+0x2a0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_GPIO_Init+0x19e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a4a      	ldr	r2, [pc, #296]	; (80031e0 <HAL_GPIO_Init+0x2a4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00d      	beq.n	80030d6 <HAL_GPIO_Init+0x19a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a49      	ldr	r2, [pc, #292]	; (80031e4 <HAL_GPIO_Init+0x2a8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <HAL_GPIO_Init+0x196>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a48      	ldr	r2, [pc, #288]	; (80031e8 <HAL_GPIO_Init+0x2ac>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_GPIO_Init+0x192>
 80030ca:	2303      	movs	r3, #3
 80030cc:	e006      	b.n	80030dc <HAL_GPIO_Init+0x1a0>
 80030ce:	2304      	movs	r3, #4
 80030d0:	e004      	b.n	80030dc <HAL_GPIO_Init+0x1a0>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e002      	b.n	80030dc <HAL_GPIO_Init+0x1a0>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_GPIO_Init+0x1a0>
 80030da:	2300      	movs	r3, #0
 80030dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030de:	f002 0203 	and.w	r2, r2, #3
 80030e2:	0092      	lsls	r2, r2, #2
 80030e4:	4093      	lsls	r3, r2
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030ec:	493a      	ldr	r1, [pc, #232]	; (80031d8 <HAL_GPIO_Init+0x29c>)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	3302      	adds	r3, #2
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d006      	beq.n	8003114 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003106:	4b39      	ldr	r3, [pc, #228]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4938      	ldr	r1, [pc, #224]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
 8003112:	e006      	b.n	8003122 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003114:	4b35      	ldr	r3, [pc, #212]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	43db      	mvns	r3, r3
 800311c:	4933      	ldr	r1, [pc, #204]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 800311e:	4013      	ands	r3, r2
 8003120:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800312e:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	492e      	ldr	r1, [pc, #184]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
 800313a:	e006      	b.n	800314a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800313c:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	43db      	mvns	r3, r3
 8003144:	4929      	ldr	r1, [pc, #164]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 8003146:	4013      	ands	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d006      	beq.n	8003164 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003156:	4b25      	ldr	r3, [pc, #148]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	4924      	ldr	r1, [pc, #144]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
 8003162:	e006      	b.n	8003172 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003164:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	43db      	mvns	r3, r3
 800316c:	491f      	ldr	r1, [pc, #124]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 800316e:	4013      	ands	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	491a      	ldr	r1, [pc, #104]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	60cb      	str	r3, [r1, #12]
 800318a:	e006      	b.n	800319a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800318c:	4b17      	ldr	r3, [pc, #92]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	43db      	mvns	r3, r3
 8003194:	4915      	ldr	r1, [pc, #84]	; (80031ec <HAL_GPIO_Init+0x2b0>)
 8003196:	4013      	ands	r3, r2
 8003198:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	3301      	adds	r3, #1
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	fa22 f303 	lsr.w	r3, r2, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f47f aed0 	bne.w	8002f50 <HAL_GPIO_Init+0x14>
  }
}
 80031b0:	bf00      	nop
 80031b2:	372c      	adds	r7, #44	; 0x2c
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	10210000 	.word	0x10210000
 80031c0:	10110000 	.word	0x10110000
 80031c4:	10120000 	.word	0x10120000
 80031c8:	10310000 	.word	0x10310000
 80031cc:	10320000 	.word	0x10320000
 80031d0:	10220000 	.word	0x10220000
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40010000 	.word	0x40010000
 80031dc:	40010800 	.word	0x40010800
 80031e0:	40010c00 	.word	0x40010c00
 80031e4:	40011000 	.word	0x40011000
 80031e8:	40011400 	.word	0x40011400
 80031ec:	40010400 	.word	0x40010400

080031f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	887b      	ldrh	r3, [r7, #2]
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e001      	b.n	8003212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003212:	7bfb      	ldrb	r3, [r7, #15]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	807b      	strh	r3, [r7, #2]
 800322a:	4613      	mov	r3, r2
 800322c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800322e:	787b      	ldrb	r3, [r7, #1]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003234:	887a      	ldrh	r2, [r7, #2]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800323a:	e003      	b.n	8003244 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800323c:	887b      	ldrh	r3, [r7, #2]
 800323e:	041a      	lsls	r2, r3, #16
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	611a      	str	r2, [r3, #16]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800324e:	b480      	push	{r7}
 8003250:	b085      	sub	sp, #20
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003260:	887a      	ldrh	r2, [r7, #2]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4013      	ands	r3, r2
 8003266:	041a      	lsls	r2, r3, #16
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	43d9      	mvns	r1, r3
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	400b      	ands	r3, r1
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	611a      	str	r2, [r3, #16]
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e11f      	b.n	80034d2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fe f8e2 	bl	8001470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2224      	movs	r2, #36	; 0x24
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0201 	bic.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032e4:	f000 fcda 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 80032e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	4a7b      	ldr	r2, [pc, #492]	; (80034dc <HAL_I2C_Init+0x25c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d807      	bhi.n	8003304 <HAL_I2C_Init+0x84>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4a7a      	ldr	r2, [pc, #488]	; (80034e0 <HAL_I2C_Init+0x260>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	bf94      	ite	ls
 80032fc:	2301      	movls	r3, #1
 80032fe:	2300      	movhi	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e006      	b.n	8003312 <HAL_I2C_Init+0x92>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4a77      	ldr	r2, [pc, #476]	; (80034e4 <HAL_I2C_Init+0x264>)
 8003308:	4293      	cmp	r3, r2
 800330a:	bf94      	ite	ls
 800330c:	2301      	movls	r3, #1
 800330e:	2300      	movhi	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e0db      	b.n	80034d2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4a72      	ldr	r2, [pc, #456]	; (80034e8 <HAL_I2C_Init+0x268>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	0c9b      	lsrs	r3, r3, #18
 8003324:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a64      	ldr	r2, [pc, #400]	; (80034dc <HAL_I2C_Init+0x25c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d802      	bhi.n	8003354 <HAL_I2C_Init+0xd4>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	3301      	adds	r3, #1
 8003352:	e009      	b.n	8003368 <HAL_I2C_Init+0xe8>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800335a:	fb02 f303 	mul.w	r3, r2, r3
 800335e:	4a63      	ldr	r2, [pc, #396]	; (80034ec <HAL_I2C_Init+0x26c>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	099b      	lsrs	r3, r3, #6
 8003366:	3301      	adds	r3, #1
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	430b      	orrs	r3, r1
 800336e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800337a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4956      	ldr	r1, [pc, #344]	; (80034dc <HAL_I2C_Init+0x25c>)
 8003384:	428b      	cmp	r3, r1
 8003386:	d80d      	bhi.n	80033a4 <HAL_I2C_Init+0x124>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1e59      	subs	r1, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	fbb1 f3f3 	udiv	r3, r1, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	2b04      	cmp	r3, #4
 800339e:	bf38      	it	cc
 80033a0:	2304      	movcc	r3, #4
 80033a2:	e04f      	b.n	8003444 <HAL_I2C_Init+0x1c4>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d111      	bne.n	80033d0 <HAL_I2C_Init+0x150>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1e58      	subs	r0, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	440b      	add	r3, r1
 80033ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e012      	b.n	80033f6 <HAL_I2C_Init+0x176>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1e58      	subs	r0, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	0099      	lsls	r1, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Init+0x17e>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e022      	b.n	8003444 <HAL_I2C_Init+0x1c4>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10e      	bne.n	8003424 <HAL_I2C_Init+0x1a4>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1e58      	subs	r0, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6859      	ldr	r1, [r3, #4]
 800340e:	460b      	mov	r3, r1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	440b      	add	r3, r1
 8003414:	fbb0 f3f3 	udiv	r3, r0, r3
 8003418:	3301      	adds	r3, #1
 800341a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003422:	e00f      	b.n	8003444 <HAL_I2C_Init+0x1c4>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1e58      	subs	r0, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	0099      	lsls	r1, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	fbb0 f3f3 	udiv	r3, r0, r3
 800343a:	3301      	adds	r3, #1
 800343c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	6809      	ldr	r1, [r1, #0]
 8003448:	4313      	orrs	r3, r2
 800344a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69da      	ldr	r2, [r3, #28]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6911      	ldr	r1, [r2, #16]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68d2      	ldr	r2, [r2, #12]
 800347e:	4311      	orrs	r1, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	430b      	orrs	r3, r1
 8003486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	000186a0 	.word	0x000186a0
 80034e0:	001e847f 	.word	0x001e847f
 80034e4:	003d08ff 	.word	0x003d08ff
 80034e8:	431bde83 	.word	0x431bde83
 80034ec:	10624dd3 	.word	0x10624dd3

080034f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e26c      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8087 	beq.w	800361e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003510:	4b92      	ldr	r3, [pc, #584]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b04      	cmp	r3, #4
 800351a:	d00c      	beq.n	8003536 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800351c:	4b8f      	ldr	r3, [pc, #572]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b08      	cmp	r3, #8
 8003526:	d112      	bne.n	800354e <HAL_RCC_OscConfig+0x5e>
 8003528:	4b8c      	ldr	r3, [pc, #560]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d10b      	bne.n	800354e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003536:	4b89      	ldr	r3, [pc, #548]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d06c      	beq.n	800361c <HAL_RCC_OscConfig+0x12c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d168      	bne.n	800361c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e246      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003556:	d106      	bne.n	8003566 <HAL_RCC_OscConfig+0x76>
 8003558:	4b80      	ldr	r3, [pc, #512]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a7f      	ldr	r2, [pc, #508]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 800355e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	e02e      	b.n	80035c4 <HAL_RCC_OscConfig+0xd4>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x98>
 800356e:	4b7b      	ldr	r3, [pc, #492]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7a      	ldr	r2, [pc, #488]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b78      	ldr	r3, [pc, #480]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a77      	ldr	r2, [pc, #476]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e01d      	b.n	80035c4 <HAL_RCC_OscConfig+0xd4>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0xbc>
 8003592:	4b72      	ldr	r3, [pc, #456]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a71      	ldr	r2, [pc, #452]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b6f      	ldr	r3, [pc, #444]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a6e      	ldr	r2, [pc, #440]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0xd4>
 80035ac:	4b6b      	ldr	r3, [pc, #428]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a6a      	ldr	r2, [pc, #424]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b68      	ldr	r3, [pc, #416]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a67      	ldr	r2, [pc, #412]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe f8b6 	bl	800173c <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe f8b2 	bl	800173c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e1fa      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b5d      	ldr	r3, [pc, #372]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0xe4>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe f8a2 	bl	800173c <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe f89e 	bl	800173c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e1e6      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	4b53      	ldr	r3, [pc, #332]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x10c>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d063      	beq.n	80036f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800362a:	4b4c      	ldr	r3, [pc, #304]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003636:	4b49      	ldr	r3, [pc, #292]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b08      	cmp	r3, #8
 8003640:	d11c      	bne.n	800367c <HAL_RCC_OscConfig+0x18c>
 8003642:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d116      	bne.n	800367c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_RCC_OscConfig+0x176>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d001      	beq.n	8003666 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e1ba      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003666:	4b3d      	ldr	r3, [pc, #244]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4939      	ldr	r1, [pc, #228]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	e03a      	b.n	80036f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d020      	beq.n	80036c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003684:	4b36      	ldr	r3, [pc, #216]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368a:	f7fe f857 	bl	800173c <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003692:	f7fe f853 	bl	800173c <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e19b      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a4:	4b2d      	ldr	r3, [pc, #180]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b0:	4b2a      	ldr	r3, [pc, #168]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4927      	ldr	r1, [pc, #156]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]
 80036c4:	e015      	b.n	80036f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c6:	4b26      	ldr	r3, [pc, #152]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fe f836 	bl	800173c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d4:	f7fe f832 	bl	800173c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e17a      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	4b1d      	ldr	r3, [pc, #116]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d03a      	beq.n	8003774 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d019      	beq.n	800373a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003706:	4b17      	ldr	r3, [pc, #92]	; (8003764 <HAL_RCC_OscConfig+0x274>)
 8003708:	2201      	movs	r2, #1
 800370a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370c:	f7fe f816 	bl	800173c <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003714:	f7fe f812 	bl	800173c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e15a      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <HAL_RCC_OscConfig+0x26c>)
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003732:	2001      	movs	r0, #1
 8003734:	f000 fac6 	bl	8003cc4 <RCC_Delay>
 8003738:	e01c      	b.n	8003774 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_RCC_OscConfig+0x274>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003740:	f7fd fffc 	bl	800173c <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003746:	e00f      	b.n	8003768 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003748:	f7fd fff8 	bl	800173c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d908      	bls.n	8003768 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e140      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	42420000 	.word	0x42420000
 8003764:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003768:	4b9e      	ldr	r3, [pc, #632]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e9      	bne.n	8003748 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a6 	beq.w	80038ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003786:	4b97      	ldr	r3, [pc, #604]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10d      	bne.n	80037ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	4b94      	ldr	r3, [pc, #592]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	4a93      	ldr	r2, [pc, #588]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379c:	61d3      	str	r3, [r2, #28]
 800379e:	4b91      	ldr	r3, [pc, #580]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ae:	4b8e      	ldr	r3, [pc, #568]	; (80039e8 <HAL_RCC_OscConfig+0x4f8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d118      	bne.n	80037ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ba:	4b8b      	ldr	r3, [pc, #556]	; (80039e8 <HAL_RCC_OscConfig+0x4f8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a8a      	ldr	r2, [pc, #552]	; (80039e8 <HAL_RCC_OscConfig+0x4f8>)
 80037c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c6:	f7fd ffb9 	bl	800173c <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ce:	f7fd ffb5 	bl	800173c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b64      	cmp	r3, #100	; 0x64
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0fd      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	4b81      	ldr	r3, [pc, #516]	; (80039e8 <HAL_RCC_OscConfig+0x4f8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d106      	bne.n	8003802 <HAL_RCC_OscConfig+0x312>
 80037f4:	4b7b      	ldr	r3, [pc, #492]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4a7a      	ldr	r2, [pc, #488]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6213      	str	r3, [r2, #32]
 8003800:	e02d      	b.n	800385e <HAL_RCC_OscConfig+0x36e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x334>
 800380a:	4b76      	ldr	r3, [pc, #472]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4a75      	ldr	r2, [pc, #468]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	6213      	str	r3, [r2, #32]
 8003816:	4b73      	ldr	r3, [pc, #460]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4a72      	ldr	r2, [pc, #456]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 800381c:	f023 0304 	bic.w	r3, r3, #4
 8003820:	6213      	str	r3, [r2, #32]
 8003822:	e01c      	b.n	800385e <HAL_RCC_OscConfig+0x36e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b05      	cmp	r3, #5
 800382a:	d10c      	bne.n	8003846 <HAL_RCC_OscConfig+0x356>
 800382c:	4b6d      	ldr	r3, [pc, #436]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4a6c      	ldr	r2, [pc, #432]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003832:	f043 0304 	orr.w	r3, r3, #4
 8003836:	6213      	str	r3, [r2, #32]
 8003838:	4b6a      	ldr	r3, [pc, #424]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4a69      	ldr	r2, [pc, #420]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6213      	str	r3, [r2, #32]
 8003844:	e00b      	b.n	800385e <HAL_RCC_OscConfig+0x36e>
 8003846:	4b67      	ldr	r3, [pc, #412]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	4a66      	ldr	r2, [pc, #408]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	6213      	str	r3, [r2, #32]
 8003852:	4b64      	ldr	r3, [pc, #400]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4a63      	ldr	r2, [pc, #396]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d015      	beq.n	8003892 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003866:	f7fd ff69 	bl	800173c <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fd ff65 	bl	800173c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0ab      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003884:	4b57      	ldr	r3, [pc, #348]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ee      	beq.n	800386e <HAL_RCC_OscConfig+0x37e>
 8003890:	e014      	b.n	80038bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003892:	f7fd ff53 	bl	800173c <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fd ff4f 	bl	800173c <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e095      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b0:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ee      	bne.n	800389a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c2:	4b48      	ldr	r3, [pc, #288]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4a47      	ldr	r2, [pc, #284]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 80038c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8081 	beq.w	80039da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038d8:	4b42      	ldr	r3, [pc, #264]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d061      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d146      	bne.n	800397a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ec:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <HAL_RCC_OscConfig+0x4fc>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7fd ff23 	bl	800173c <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fd ff1f 	bl	800173c <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e067      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390c:	4b35      	ldr	r3, [pc, #212]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003920:	d108      	bne.n	8003934 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003922:	4b30      	ldr	r3, [pc, #192]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	492d      	ldr	r1, [pc, #180]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003934:	4b2b      	ldr	r3, [pc, #172]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a19      	ldr	r1, [r3, #32]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	430b      	orrs	r3, r1
 8003946:	4927      	ldr	r1, [pc, #156]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 8003948:	4313      	orrs	r3, r2
 800394a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800394c:	4b27      	ldr	r3, [pc, #156]	; (80039ec <HAL_RCC_OscConfig+0x4fc>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003952:	f7fd fef3 	bl	800173c <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395a:	f7fd feef 	bl	800173c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e037      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800396c:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x46a>
 8003978:	e02f      	b.n	80039da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <HAL_RCC_OscConfig+0x4fc>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fd fedc 	bl	800173c <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003988:	f7fd fed8 	bl	800173c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e020      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x498>
 80039a6:	e018      	b.n	80039da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e013      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_OscConfig+0x4f4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d106      	bne.n	80039d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d001      	beq.n	80039da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40007000 	.word	0x40007000
 80039ec:	42420060 	.word	0x42420060

080039f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0d0      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b6a      	ldr	r3, [pc, #424]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d910      	bls.n	8003a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b67      	ldr	r3, [pc, #412]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 0207 	bic.w	r2, r3, #7
 8003a1a:	4965      	ldr	r1, [pc, #404]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b63      	ldr	r3, [pc, #396]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0b8      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d020      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a4c:	4b59      	ldr	r3, [pc, #356]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a58      	ldr	r2, [pc, #352]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a64:	4b53      	ldr	r3, [pc, #332]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a52      	ldr	r2, [pc, #328]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a70:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	494d      	ldr	r1, [pc, #308]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d040      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	4b47      	ldr	r3, [pc, #284]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d115      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e07f      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aae:	4b41      	ldr	r3, [pc, #260]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e073      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abe:	4b3d      	ldr	r3, [pc, #244]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e06b      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ace:	4b39      	ldr	r3, [pc, #228]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f023 0203 	bic.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4936      	ldr	r1, [pc, #216]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae0:	f7fd fe2c 	bl	800173c <HAL_GetTick>
 8003ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae8:	f7fd fe28 	bl	800173c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e053      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 020c 	and.w	r2, r3, #12
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d1eb      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b10:	4b27      	ldr	r3, [pc, #156]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d210      	bcs.n	8003b40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1e:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 0207 	bic.w	r2, r3, #7
 8003b26:	4922      	ldr	r1, [pc, #136]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e032      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b4c:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4916      	ldr	r1, [pc, #88]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	490e      	ldr	r1, [pc, #56]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b7e:	f000 f821 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003b82:	4601      	mov	r1, r0
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b90:	5cd3      	ldrb	r3, [r2, r3]
 8003b92:	fa21 f303 	lsr.w	r3, r1, r3
 8003b96:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <HAL_RCC_ClockConfig+0x1cc>)
 8003b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_RCC_ClockConfig+0x1d0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fd fd8a 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40022000 	.word	0x40022000
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	08006b7c 	.word	0x08006b7c
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	20000004 	.word	0x20000004

08003bc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc4:	b490      	push	{r4, r7}
 8003bc6:	b08a      	sub	sp, #40	; 0x28
 8003bc8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bca:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bcc:	1d3c      	adds	r4, r7, #4
 8003bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bd4:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bee:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d002      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0x40>
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d003      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0x46>
 8003c02:	e02d      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c04:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c06:	623b      	str	r3, [r7, #32]
      break;
 8003c08:	e02d      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	0c9b      	lsrs	r3, r3, #18
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c16:	4413      	add	r3, r2
 8003c18:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c1c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d013      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	0c5b      	lsrs	r3, r3, #17
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c36:	4413      	add	r3, r2
 8003c38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	4a0f      	ldr	r2, [pc, #60]	; (8003c80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c42:	fb02 f203 	mul.w	r2, r2, r3
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4e:	e004      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	4a0c      	ldr	r2, [pc, #48]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c54:	fb02 f303 	mul.w	r3, r2, r3
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	623b      	str	r3, [r7, #32]
      break;
 8003c5e:	e002      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c62:	623b      	str	r3, [r7, #32]
      break;
 8003c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c66:	6a3b      	ldr	r3, [r7, #32]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3728      	adds	r7, #40	; 0x28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc90      	pop	{r4, r7}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	08006b60 	.word	0x08006b60
 8003c78:	08006b70 	.word	0x08006b70
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	007a1200 	.word	0x007a1200
 8003c84:	003d0900 	.word	0x003d0900

08003c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c8c:	4b02      	ldr	r3, [pc, #8]	; (8003c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	20000000 	.word	0x20000000

08003c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ca0:	f7ff fff2 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8003ca4:	4601      	mov	r1, r0
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4a03      	ldr	r2, [pc, #12]	; (8003cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	08006b8c 	.word	0x08006b8c

08003cc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <RCC_Delay+0x34>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <RCC_Delay+0x38>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	0a5b      	lsrs	r3, r3, #9
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ce0:	bf00      	nop
  }
  while (Delay --);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1e5a      	subs	r2, r3, #1
 8003ce6:	60fa      	str	r2, [r7, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f9      	bne.n	8003ce0 <RCC_Delay+0x1c>
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	10624dd3 	.word	0x10624dd3

08003d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d07d      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d20:	4b4f      	ldr	r3, [pc, #316]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10d      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2c:	4b4c      	ldr	r3, [pc, #304]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	4a4b      	ldr	r2, [pc, #300]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d36:	61d3      	str	r3, [r2, #28]
 8003d38:	4b49      	ldr	r3, [pc, #292]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d44:	2301      	movs	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d48:	4b46      	ldr	r3, [pc, #280]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d118      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d54:	4b43      	ldr	r3, [pc, #268]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a42      	ldr	r2, [pc, #264]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d60:	f7fd fcec 	bl	800173c <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d66:	e008      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d68:	f7fd fce8 	bl	800173c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b64      	cmp	r3, #100	; 0x64
 8003d74:	d901      	bls.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e06d      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7a:	4b3a      	ldr	r3, [pc, #232]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d86:	4b36      	ldr	r3, [pc, #216]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d02e      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d027      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003da4:	4b2e      	ldr	r3, [pc, #184]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dae:	4b2e      	ldr	r3, [pc, #184]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003db4:	4b2c      	ldr	r3, [pc, #176]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dba:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d014      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7fd fcb7 	bl	800173c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd2:	f7fd fcb3 	bl	800173c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e036      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de8:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ee      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df4:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	4917      	ldr	r1, [pc, #92]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0c:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	490b      	ldr	r1, [pc, #44]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	4904      	ldr	r1, [pc, #16]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40007000 	.word	0x40007000
 8003e68:	42420440 	.word	0x42420440

08003e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e041      	b.n	8003f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd fb2a 	bl	80014ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f000 fa1a 	bl	80042e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d122      	bne.n	8003f66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d11b      	bne.n	8003f66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f06f 0202 	mvn.w	r2, #2
 8003f36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f9ad 	bl	80042ac <HAL_TIM_IC_CaptureCallback>
 8003f52:	e005      	b.n	8003f60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f9a0 	bl	800429a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9af 	bl	80042be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d122      	bne.n	8003fba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d11b      	bne.n	8003fba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f06f 0204 	mvn.w	r2, #4
 8003f8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f983 	bl	80042ac <HAL_TIM_IC_CaptureCallback>
 8003fa6:	e005      	b.n	8003fb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f976 	bl	800429a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f985 	bl	80042be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d122      	bne.n	800400e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d11b      	bne.n	800400e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f06f 0208 	mvn.w	r2, #8
 8003fde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f959 	bl	80042ac <HAL_TIM_IC_CaptureCallback>
 8003ffa:	e005      	b.n	8004008 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f94c 	bl	800429a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f95b 	bl	80042be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b10      	cmp	r3, #16
 800401a:	d122      	bne.n	8004062 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b10      	cmp	r3, #16
 8004028:	d11b      	bne.n	8004062 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f06f 0210 	mvn.w	r2, #16
 8004032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2208      	movs	r2, #8
 8004038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f92f 	bl	80042ac <HAL_TIM_IC_CaptureCallback>
 800404e:	e005      	b.n	800405c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f922 	bl	800429a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f931 	bl	80042be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b01      	cmp	r3, #1
 800406e:	d10e      	bne.n	800408e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d107      	bne.n	800408e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f06f 0201 	mvn.w	r2, #1
 8004086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f8fd 	bl	8004288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004098:	2b80      	cmp	r3, #128	; 0x80
 800409a:	d10e      	bne.n	80040ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d107      	bne.n	80040ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fa74 	bl	80045a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d10e      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d107      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f8f5 	bl	80042d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d10e      	bne.n	8004112 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d107      	bne.n	8004112 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f06f 0220 	mvn.w	r2, #32
 800410a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fa3f 	bl	8004590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_TIM_ConfigClockSource+0x18>
 800412e:	2302      	movs	r3, #2
 8004130:	e0a6      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x166>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2202      	movs	r2, #2
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004150:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004158:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d067      	beq.n	800423a <HAL_TIM_ConfigClockSource+0x120>
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d80b      	bhi.n	8004186 <HAL_TIM_ConfigClockSource+0x6c>
 800416e:	2b10      	cmp	r3, #16
 8004170:	d073      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x140>
 8004172:	2b10      	cmp	r3, #16
 8004174:	d802      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x62>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d06f      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800417a:	e078      	b.n	800426e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800417c:	2b20      	cmp	r3, #32
 800417e:	d06c      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x140>
 8004180:	2b30      	cmp	r3, #48	; 0x30
 8004182:	d06a      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004184:	e073      	b.n	800426e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004186:	2b70      	cmp	r3, #112	; 0x70
 8004188:	d00d      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x8c>
 800418a:	2b70      	cmp	r3, #112	; 0x70
 800418c:	d804      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x7e>
 800418e:	2b50      	cmp	r3, #80	; 0x50
 8004190:	d033      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0xe0>
 8004192:	2b60      	cmp	r3, #96	; 0x60
 8004194:	d041      	beq.n	800421a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004196:	e06a      	b.n	800426e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419c:	d066      	beq.n	800426c <HAL_TIM_ConfigClockSource+0x152>
 800419e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a2:	d017      	beq.n	80041d4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80041a4:	e063      	b.n	800426e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6899      	ldr	r1, [r3, #8]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f000 f96e 	bl	8004496 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	609a      	str	r2, [r3, #8]
      break;
 80041d2:	e04c      	b.n	800426e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	6899      	ldr	r1, [r3, #8]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f000 f957 	bl	8004496 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f6:	609a      	str	r2, [r3, #8]
      break;
 80041f8:	e039      	b.n	800426e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	6859      	ldr	r1, [r3, #4]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	461a      	mov	r2, r3
 8004208:	f000 f8ce 	bl	80043a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2150      	movs	r1, #80	; 0x50
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f925 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8004218:	e029      	b.n	800426e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6859      	ldr	r1, [r3, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	461a      	mov	r2, r3
 8004228:	f000 f8ec 	bl	8004404 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2160      	movs	r1, #96	; 0x60
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f915 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8004238:	e019      	b.n	800426e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	461a      	mov	r2, r3
 8004248:	f000 f8ae 	bl	80043a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2140      	movs	r1, #64	; 0x40
 8004252:	4618      	mov	r0, r3
 8004254:	f000 f905 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8004258:	e009      	b.n	800426e <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4619      	mov	r1, r3
 8004264:	4610      	mov	r0, r2
 8004266:	f000 f8fc 	bl	8004462 <TIM_ITRx_SetConfig>
        break;
 800426a:	e000      	b.n	800426e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800426c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr

0800429a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr

080042d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr
	...

080042e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a29      	ldr	r2, [pc, #164]	; (800439c <TIM_Base_SetConfig+0xb8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00b      	beq.n	8004314 <TIM_Base_SetConfig+0x30>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004302:	d007      	beq.n	8004314 <TIM_Base_SetConfig+0x30>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a26      	ldr	r2, [pc, #152]	; (80043a0 <TIM_Base_SetConfig+0xbc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_Base_SetConfig+0x30>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a25      	ldr	r2, [pc, #148]	; (80043a4 <TIM_Base_SetConfig+0xc0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d108      	bne.n	8004326 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a1c      	ldr	r2, [pc, #112]	; (800439c <TIM_Base_SetConfig+0xb8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00b      	beq.n	8004346 <TIM_Base_SetConfig+0x62>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004334:	d007      	beq.n	8004346 <TIM_Base_SetConfig+0x62>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a19      	ldr	r2, [pc, #100]	; (80043a0 <TIM_Base_SetConfig+0xbc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d003      	beq.n	8004346 <TIM_Base_SetConfig+0x62>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <TIM_Base_SetConfig+0xc0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d108      	bne.n	8004358 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a07      	ldr	r2, [pc, #28]	; (800439c <TIM_Base_SetConfig+0xb8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d103      	bne.n	800438c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	615a      	str	r2, [r3, #20]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40000800 	.word	0x40000800

080043a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f023 0201 	bic.w	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f023 030a 	bic.w	r3, r3, #10
 80043e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f023 0210 	bic.w	r2, r3, #16
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800442e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	031b      	lsls	r3, r3, #12
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004440:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr

08004462 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004462:	b480      	push	{r7}
 8004464:	b085      	sub	sp, #20
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	f043 0307 	orr.w	r3, r3, #7
 8004484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	609a      	str	r2, [r3, #8]
}
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004496:	b480      	push	{r7}
 8004498:	b087      	sub	sp, #28
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	607a      	str	r2, [r7, #4]
 80044a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	021a      	lsls	r2, r3, #8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4313      	orrs	r3, r2
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	609a      	str	r2, [r3, #8]
}
 80044ca:	bf00      	nop
 80044cc:	371c      	adds	r7, #28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr

080044d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e046      	b.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a16      	ldr	r2, [pc, #88]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00e      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004538:	d009      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a12      	ldr	r2, [pc, #72]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a10      	ldr	r2, [pc, #64]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10c      	bne.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	4313      	orrs	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr
 8004584:	40012c00 	.word	0x40012c00
 8004588:	40000400 	.word	0x40000400
 800458c:	40000800 	.word	0x40000800

08004590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr

080045a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr

080045b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045c6:	2b84      	cmp	r3, #132	; 0x84
 80045c8:	d005      	beq.n	80045d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4413      	add	r3, r2
 80045d2:	3303      	adds	r3, #3
 80045d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045d6:	68fb      	ldr	r3, [r7, #12]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr

080045e2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e8:	f3ef 8305 	mrs	r3, IPSR
 80045ec:	607b      	str	r3, [r7, #4]
  return(result);
 80045ee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004608:	f001 f8d8 	bl	80057bc <vTaskStartScheduler>
  
  return osOK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	bd80      	pop	{r7, pc}

08004612 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004614:	b089      	sub	sp, #36	; 0x24
 8004616:	af04      	add	r7, sp, #16
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d020      	beq.n	8004666 <osThreadCreate+0x54>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01c      	beq.n	8004666 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685c      	ldr	r4, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681d      	ldr	r5, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691e      	ldr	r6, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ffb8 	bl	80045b4 <makeFreeRtosPriority>
 8004644:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800464e:	9202      	str	r2, [sp, #8]
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	9100      	str	r1, [sp, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4632      	mov	r2, r6
 8004658:	4629      	mov	r1, r5
 800465a:	4620      	mov	r0, r4
 800465c:	f000 fef3 	bl	8005446 <xTaskCreateStatic>
 8004660:	4603      	mov	r3, r0
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	e01c      	b.n	80046a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685c      	ldr	r4, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004672:	b29e      	uxth	r6, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff ff9a 	bl	80045b4 <makeFreeRtosPriority>
 8004680:	4602      	mov	r2, r0
 8004682:	f107 030c 	add.w	r3, r7, #12
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	9200      	str	r2, [sp, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	4632      	mov	r2, r6
 800468e:	4629      	mov	r1, r5
 8004690:	4620      	mov	r0, r4
 8004692:	f000 ff31 	bl	80054f8 <xTaskCreate>
 8004696:	4603      	mov	r3, r0
 8004698:	2b01      	cmp	r3, #1
 800469a:	d001      	beq.n	80046a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046a0:	68fb      	ldr	r3, [r7, #12]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <osDelay+0x16>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	e000      	b.n	80046c2 <osDelay+0x18>
 80046c0:	2301      	movs	r3, #1
 80046c2:	4618      	mov	r0, r3
 80046c4:	f001 f846 	bl	8005754 <vTaskDelay>
  
  return osOK;
 80046c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80046d2:	b590      	push	{r4, r7, lr}
 80046d4:	b085      	sub	sp, #20
 80046d6:	af02      	add	r7, sp, #8
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d012      	beq.n	800470a <osMessageCreate+0x38>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00e      	beq.n	800470a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6859      	ldr	r1, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68dc      	ldr	r4, [r3, #12]
 80046fc:	2300      	movs	r3, #0
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	4623      	mov	r3, r4
 8004702:	f000 f9db 	bl	8004abc <xQueueGenericCreateStatic>
 8004706:	4603      	mov	r3, r0
 8004708:	e008      	b.n	800471c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	4619      	mov	r1, r3
 8004716:	f000 fa43 	bl	8004ba0 <xQueueGenericCreate>
 800471a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	bd90      	pop	{r4, r7, pc}

08004724 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004730:	2300      	movs	r3, #0
 8004732:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <osMessagePut+0x1e>
    ticks = 1;
 800473e:	2301      	movs	r3, #1
 8004740:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004742:	f7ff ff4e 	bl	80045e2 <inHandlerMode>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d018      	beq.n	800477e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800474c:	f107 0210 	add.w	r2, r7, #16
 8004750:	f107 0108 	add.w	r1, r7, #8
 8004754:	2300      	movs	r3, #0
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fb78 	bl	8004e4c <xQueueGenericSendFromISR>
 800475c:	4603      	mov	r3, r0
 800475e:	2b01      	cmp	r3, #1
 8004760:	d001      	beq.n	8004766 <osMessagePut+0x42>
      return osErrorOS;
 8004762:	23ff      	movs	r3, #255	; 0xff
 8004764:	e018      	b.n	8004798 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d014      	beq.n	8004796 <osMessagePut+0x72>
 800476c:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <osMessagePut+0x7c>)
 800476e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	e00b      	b.n	8004796 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800477e:	f107 0108 	add.w	r1, r7, #8
 8004782:	2300      	movs	r3, #0
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fa66 	bl	8004c58 <xQueueGenericSend>
 800478c:	4603      	mov	r3, r0
 800478e:	2b01      	cmp	r3, #1
 8004790:	d001      	beq.n	8004796 <osMessagePut+0x72>
      return osErrorOS;
 8004792:	23ff      	movs	r3, #255	; 0xff
 8004794:	e000      	b.n	8004798 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	e000ed04 	.word	0xe000ed04

080047a4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80047a4:	b590      	push	{r4, r7, lr}
 80047a6:	b08b      	sub	sp, #44	; 0x2c
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10a      	bne.n	80047d4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	617b      	str	r3, [r7, #20]
    return event;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	461c      	mov	r4, r3
 80047c6:	f107 0314 	add.w	r3, r7, #20
 80047ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80047d2:	e054      	b.n	800487e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d103      	bne.n	80047ec <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ea:	e009      	b.n	8004800 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d006      	beq.n	8004800 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <osMessageGet+0x5c>
      ticks = 1;
 80047fc:	2301      	movs	r3, #1
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004800:	f7ff feef 	bl	80045e2 <inHandlerMode>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01c      	beq.n	8004844 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800480a:	f107 0220 	add.w	r2, r7, #32
 800480e:	f107 0314 	add.w	r3, r7, #20
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	68b8      	ldr	r0, [r7, #8]
 8004818:	f000 fc88 	bl	800512c <xQueueReceiveFromISR>
 800481c:	4603      	mov	r3, r0
 800481e:	2b01      	cmp	r3, #1
 8004820:	d102      	bne.n	8004828 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004822:	2310      	movs	r3, #16
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e001      	b.n	800482c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01d      	beq.n	800486e <osMessageGet+0xca>
 8004832:	4b15      	ldr	r3, [pc, #84]	; (8004888 <osMessageGet+0xe4>)
 8004834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	e014      	b.n	800486e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004844:	f107 0314 	add.w	r3, r7, #20
 8004848:	3304      	adds	r3, #4
 800484a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484c:	4619      	mov	r1, r3
 800484e:	68b8      	ldr	r0, [r7, #8]
 8004850:	f000 fb90 	bl	8004f74 <xQueueReceive>
 8004854:	4603      	mov	r3, r0
 8004856:	2b01      	cmp	r3, #1
 8004858:	d102      	bne.n	8004860 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800485a:	2310      	movs	r3, #16
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	e006      	b.n	800486e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <osMessageGet+0xc6>
 8004866:	2300      	movs	r3, #0
 8004868:	e000      	b.n	800486c <osMessageGet+0xc8>
 800486a:	2340      	movs	r3, #64	; 0x40
 800486c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	461c      	mov	r4, r3
 8004872:	f107 0314 	add.w	r3, r7, #20
 8004876:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800487a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	372c      	adds	r7, #44	; 0x2c
 8004882:	46bd      	mov	sp, r7
 8004884:	bd90      	pop	{r4, r7, pc}
 8004886:	bf00      	nop
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f103 0208 	add.w	r2, r3, #8
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f04f 32ff 	mov.w	r2, #4294967295
 80048a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f103 0208 	add.w	r2, r3, #8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f103 0208 	add.w	r2, r3, #8
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	601a      	str	r2, [r3, #0]
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d103      	bne.n	8004948 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	e00c      	b.n	8004962 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3308      	adds	r3, #8
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e002      	b.n	8004956 <vListInsert+0x2e>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	d2f6      	bcs.n	8004950 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	601a      	str	r2, [r3, #0]
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6892      	ldr	r2, [r2, #8]
 80049ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6852      	ldr	r2, [r2, #4]
 80049b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d103      	bne.n	80049cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	1e5a      	subs	r2, r3, #1
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr
	...

080049ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	e7fe      	b.n	8004a12 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004a14:	f001 fcc0 	bl	8006398 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	68f9      	ldr	r1, [r7, #12]
 8004a22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	441a      	add	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a44:	3b01      	subs	r3, #1
 8004a46:	68f9      	ldr	r1, [r7, #12]
 8004a48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a4a:	fb01 f303 	mul.w	r3, r1, r3
 8004a4e:	441a      	add	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	22ff      	movs	r2, #255	; 0xff
 8004a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	22ff      	movs	r2, #255	; 0xff
 8004a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d114      	bne.n	8004a94 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01a      	beq.n	8004aa8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3310      	adds	r3, #16
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 f8e2 	bl	8005c40 <xTaskRemoveFromEventList>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d012      	beq.n	8004aa8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a82:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <xQueueGenericReset+0xcc>)
 8004a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	e009      	b.n	8004aa8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3310      	adds	r3, #16
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff fef7 	bl	800488c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3324      	adds	r3, #36	; 0x24
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fef2 	bl	800488c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004aa8:	f001 fca4 	bl	80063f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004aac:	2301      	movs	r3, #1
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08e      	sub	sp, #56	; 0x38
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <xQueueGenericCreateStatic+0x28>
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae2:	e7fe      	b.n	8004ae2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d109      	bne.n	8004afe <xQueueGenericCreateStatic+0x42>
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
 8004afc:	e7fe      	b.n	8004afc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <xQueueGenericCreateStatic+0x4e>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <xQueueGenericCreateStatic+0x52>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <xQueueGenericCreateStatic+0x54>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <xQueueGenericCreateStatic+0x6c>
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	623b      	str	r3, [r7, #32]
 8004b26:	e7fe      	b.n	8004b26 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d102      	bne.n	8004b34 <xQueueGenericCreateStatic+0x78>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <xQueueGenericCreateStatic+0x7c>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <xQueueGenericCreateStatic+0x7e>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <xQueueGenericCreateStatic+0x96>
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	e7fe      	b.n	8004b50 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b52:	2348      	movs	r3, #72	; 0x48
 8004b54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b48      	cmp	r3, #72	; 0x48
 8004b5a:	d009      	beq.n	8004b70 <xQueueGenericCreateStatic+0xb4>
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	e7fe      	b.n	8004b6e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00d      	beq.n	8004b96 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f842 	bl	8004c1a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3730      	adds	r7, #48	; 0x30
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08a      	sub	sp, #40	; 0x28
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	4613      	mov	r3, r2
 8004bac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d109      	bne.n	8004bc8 <xQueueGenericCreate+0x28>
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	e7fe      	b.n	8004bc6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
 8004bd2:	e004      	b.n	8004bde <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	fb02 f303 	mul.w	r3, r2, r3
 8004bdc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	3348      	adds	r3, #72	; 0x48
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 fcce 	bl	8006584 <pvPortMalloc>
 8004be8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00f      	beq.n	8004c10 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	3348      	adds	r3, #72	; 0x48
 8004bf4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bfe:	79fa      	ldrb	r2, [r7, #7]
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f805 	bl	8004c1a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004c10:	69bb      	ldr	r3, [r7, #24]
	}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e002      	b.n	8004c3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c48:	2101      	movs	r1, #1
 8004c4a:	69b8      	ldr	r0, [r7, #24]
 8004c4c:	f7ff fece 	bl	80049ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08e      	sub	sp, #56	; 0x38
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c66:	2300      	movs	r3, #0
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <xQueueGenericSend+0x30>
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c86:	e7fe      	b.n	8004c86 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d103      	bne.n	8004c96 <xQueueGenericSend+0x3e>
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <xQueueGenericSend+0x42>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <xQueueGenericSend+0x44>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d109      	bne.n	8004cb4 <xQueueGenericSend+0x5c>
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb2:	e7fe      	b.n	8004cb2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d103      	bne.n	8004cc2 <xQueueGenericSend+0x6a>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <xQueueGenericSend+0x6e>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <xQueueGenericSend+0x70>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d109      	bne.n	8004ce0 <xQueueGenericSend+0x88>
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	623b      	str	r3, [r7, #32]
 8004cde:	e7fe      	b.n	8004cde <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ce0:	f001 f968 	bl	8005fb4 <xTaskGetSchedulerState>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <xQueueGenericSend+0x98>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <xQueueGenericSend+0x9c>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <xQueueGenericSend+0x9e>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <xQueueGenericSend+0xb6>
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	e7fe      	b.n	8004d0c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d0e:	f001 fb43 	bl	8006398 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d302      	bcc.n	8004d24 <xQueueGenericSend+0xcc>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d129      	bne.n	8004d78 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d2a:	f000 fa7c 	bl	8005226 <prvCopyDataToQueue>
 8004d2e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d010      	beq.n	8004d5a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	3324      	adds	r3, #36	; 0x24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 ff7f 	bl	8005c40 <xTaskRemoveFromEventList>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d013      	beq.n	8004d70 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d48:	4b3f      	ldr	r3, [pc, #252]	; (8004e48 <xQueueGenericSend+0x1f0>)
 8004d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	e00a      	b.n	8004d70 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d60:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <xQueueGenericSend+0x1f0>)
 8004d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d70:	f001 fb40 	bl	80063f4 <vPortExitCritical>
				return pdPASS;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e063      	b.n	8004e40 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d103      	bne.n	8004d86 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d7e:	f001 fb39 	bl	80063f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e05c      	b.n	8004e40 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d8c:	f107 0314 	add.w	r3, r7, #20
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 ffb7 	bl	8005d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d96:	2301      	movs	r3, #1
 8004d98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d9a:	f001 fb2b 	bl	80063f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d9e:	f000 fd6b 	bl	8005878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004da2:	f001 faf9 	bl	8006398 <vPortEnterCritical>
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dac:	b25b      	sxtb	r3, r3
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d103      	bne.n	8004dbc <xQueueGenericSend+0x164>
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dc2:	b25b      	sxtb	r3, r3
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d103      	bne.n	8004dd2 <xQueueGenericSend+0x17a>
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dd2:	f001 fb0f 	bl	80063f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dd6:	1d3a      	adds	r2, r7, #4
 8004dd8:	f107 0314 	add.w	r3, r7, #20
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 ffa6 	bl	8005d30 <xTaskCheckForTimeOut>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d124      	bne.n	8004e34 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dec:	f000 fb13 	bl	8005416 <prvIsQueueFull>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d018      	beq.n	8004e28 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	3310      	adds	r3, #16
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fefa 	bl	8005bf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e06:	f000 fa9e 	bl	8005346 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e0a:	f000 fd43 	bl	8005894 <xTaskResumeAll>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f47f af7c 	bne.w	8004d0e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <xQueueGenericSend+0x1f0>)
 8004e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	e772      	b.n	8004d0e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e2a:	f000 fa8c 	bl	8005346 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e2e:	f000 fd31 	bl	8005894 <xTaskResumeAll>
 8004e32:	e76c      	b.n	8004d0e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e36:	f000 fa86 	bl	8005346 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e3a:	f000 fd2b 	bl	8005894 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e3e:	2300      	movs	r3, #0
		}
	}
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3738      	adds	r7, #56	; 0x38
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08e      	sub	sp, #56	; 0x38
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <xQueueGenericSendFromISR+0x2c>
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
 8004e76:	e7fe      	b.n	8004e76 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <xQueueGenericSendFromISR+0x3a>
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <xQueueGenericSendFromISR+0x3e>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <xQueueGenericSendFromISR+0x40>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <xQueueGenericSendFromISR+0x58>
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	e7fe      	b.n	8004ea2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d103      	bne.n	8004eb2 <xQueueGenericSendFromISR+0x66>
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <xQueueGenericSendFromISR+0x6a>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <xQueueGenericSendFromISR+0x6c>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d109      	bne.n	8004ed0 <xQueueGenericSendFromISR+0x84>
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	e7fe      	b.n	8004ece <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ed0:	f001 fb1c 	bl	800650c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ed4:	f3ef 8211 	mrs	r2, BASEPRI
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	61ba      	str	r2, [r7, #24]
 8004eea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004eec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d302      	bcc.n	8004f02 <xQueueGenericSendFromISR+0xb6>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d12c      	bne.n	8004f5c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f12:	f000 f988 	bl	8005226 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f16:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d112      	bne.n	8004f46 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d016      	beq.n	8004f56 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	3324      	adds	r3, #36	; 0x24
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fe87 	bl	8005c40 <xTaskRemoveFromEventList>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00e      	beq.n	8004f56 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e007      	b.n	8004f56 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	b25a      	sxtb	r2, r3
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f56:	2301      	movs	r3, #1
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004f5a:	e001      	b.n	8004f60 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f62:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3738      	adds	r7, #56	; 0x38
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08c      	sub	sp, #48	; 0x30
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f80:	2300      	movs	r3, #0
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <xQueueReceive+0x2e>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	623b      	str	r3, [r7, #32]
 8004fa0:	e7fe      	b.n	8004fa0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d103      	bne.n	8004fb0 <xQueueReceive+0x3c>
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <xQueueReceive+0x40>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <xQueueReceive+0x42>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <xQueueReceive+0x5a>
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e7fe      	b.n	8004fcc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fce:	f000 fff1 	bl	8005fb4 <xTaskGetSchedulerState>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <xQueueReceive+0x6a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <xQueueReceive+0x6e>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <xQueueReceive+0x70>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d109      	bne.n	8004ffc <xQueueReceive+0x88>
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	e7fe      	b.n	8004ffa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ffc:	f001 f9cc 	bl	8006398 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01f      	beq.n	800504c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005010:	f000 f973 	bl	80052fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	1e5a      	subs	r2, r3, #1
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00f      	beq.n	8005044 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	3310      	adds	r3, #16
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fe09 	bl	8005c40 <xTaskRemoveFromEventList>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005034:	4b3c      	ldr	r3, [pc, #240]	; (8005128 <xQueueReceive+0x1b4>)
 8005036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005044:	f001 f9d6 	bl	80063f4 <vPortExitCritical>
				return pdPASS;
 8005048:	2301      	movs	r3, #1
 800504a:	e069      	b.n	8005120 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005052:	f001 f9cf 	bl	80063f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005056:	2300      	movs	r3, #0
 8005058:	e062      	b.n	8005120 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005060:	f107 0310 	add.w	r3, r7, #16
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fe4d 	bl	8005d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800506a:	2301      	movs	r3, #1
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800506e:	f001 f9c1 	bl	80063f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005072:	f000 fc01 	bl	8005878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005076:	f001 f98f 	bl	8006398 <vPortEnterCritical>
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005080:	b25b      	sxtb	r3, r3
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d103      	bne.n	8005090 <xQueueReceive+0x11c>
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005096:	b25b      	sxtb	r3, r3
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d103      	bne.n	80050a6 <xQueueReceive+0x132>
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050a6:	f001 f9a5 	bl	80063f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050aa:	1d3a      	adds	r2, r7, #4
 80050ac:	f107 0310 	add.w	r3, r7, #16
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fe3c 	bl	8005d30 <xTaskCheckForTimeOut>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d123      	bne.n	8005106 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c0:	f000 f993 	bl	80053ea <prvIsQueueEmpty>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d017      	beq.n	80050fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	3324      	adds	r3, #36	; 0x24
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fd90 	bl	8005bf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050da:	f000 f934 	bl	8005346 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050de:	f000 fbd9 	bl	8005894 <xTaskResumeAll>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d189      	bne.n	8004ffc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80050e8:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <xQueueReceive+0x1b4>)
 80050ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	e780      	b.n	8004ffc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050fc:	f000 f923 	bl	8005346 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005100:	f000 fbc8 	bl	8005894 <xTaskResumeAll>
 8005104:	e77a      	b.n	8004ffc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005108:	f000 f91d 	bl	8005346 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800510c:	f000 fbc2 	bl	8005894 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005112:	f000 f96a 	bl	80053ea <prvIsQueueEmpty>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	f43f af6f 	beq.w	8004ffc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800511e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005120:	4618      	mov	r0, r3
 8005122:	3730      	adds	r7, #48	; 0x30
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08e      	sub	sp, #56	; 0x38
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	2b00      	cmp	r3, #0
 8005140:	d109      	bne.n	8005156 <xQueueReceiveFromISR+0x2a>
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	623b      	str	r3, [r7, #32]
 8005154:	e7fe      	b.n	8005154 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d103      	bne.n	8005164 <xQueueReceiveFromISR+0x38>
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <xQueueReceiveFromISR+0x3c>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <xQueueReceiveFromISR+0x3e>
 8005168:	2300      	movs	r3, #0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <xQueueReceiveFromISR+0x56>
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	61fb      	str	r3, [r7, #28]
 8005180:	e7fe      	b.n	8005180 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005182:	f001 f9c3 	bl	800650c <vPortValidateInterruptPriority>
	__asm volatile
 8005186:	f3ef 8211 	mrs	r2, BASEPRI
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	61ba      	str	r2, [r7, #24]
 800519c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800519e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d02f      	beq.n	800520e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051bc:	f000 f89d 	bl	80052fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	1e5a      	subs	r2, r3, #1
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80051c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d112      	bne.n	80051f8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d016      	beq.n	8005208 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	3310      	adds	r3, #16
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fd2e 	bl	8005c40 <xTaskRemoveFromEventList>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00e      	beq.n	8005208 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e007      	b.n	8005208 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80051f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051fc:	3301      	adds	r3, #1
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	b25a      	sxtb	r2, r3
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005208:	2301      	movs	r3, #1
 800520a:	637b      	str	r3, [r7, #52]	; 0x34
 800520c:	e001      	b.n	8005212 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800520e:	2300      	movs	r3, #0
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800521c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800521e:	4618      	mov	r0, r3
 8005220:	3738      	adds	r7, #56	; 0x38
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b086      	sub	sp, #24
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10d      	bne.n	8005260 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d14d      	bne.n	80052e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fecd 	bl	8005ff0 <xTaskPriorityDisinherit>
 8005256:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	e043      	b.n	80052e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d119      	bne.n	800529a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6898      	ldr	r0, [r3, #8]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	461a      	mov	r2, r3
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	f001 fb8d 	bl	8006990 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	441a      	add	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	429a      	cmp	r2, r3
 800528e:	d32b      	bcc.n	80052e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	609a      	str	r2, [r3, #8]
 8005298:	e026      	b.n	80052e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68d8      	ldr	r0, [r3, #12]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	461a      	mov	r2, r3
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	f001 fb73 	bl	8006990 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	425b      	negs	r3, r3
 80052b4:	441a      	add	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d207      	bcs.n	80052d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	425b      	negs	r3, r3
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d105      	bne.n	80052e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80052f0:	697b      	ldr	r3, [r7, #20]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d018      	beq.n	800533e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	441a      	add	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	429a      	cmp	r2, r3
 8005324:	d303      	bcc.n	800532e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68d9      	ldr	r1, [r3, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	461a      	mov	r2, r3
 8005338:	6838      	ldr	r0, [r7, #0]
 800533a:	f001 fb29 	bl	8006990 <memcpy>
	}
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800534e:	f001 f823 	bl	8006398 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005358:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800535a:	e011      	b.n	8005380 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	d012      	beq.n	800538a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3324      	adds	r3, #36	; 0x24
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fc69 	bl	8005c40 <xTaskRemoveFromEventList>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005374:	f000 fd3c 	bl	8005df0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	3b01      	subs	r3, #1
 800537c:	b2db      	uxtb	r3, r3
 800537e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005384:	2b00      	cmp	r3, #0
 8005386:	dce9      	bgt.n	800535c <prvUnlockQueue+0x16>
 8005388:	e000      	b.n	800538c <prvUnlockQueue+0x46>
					break;
 800538a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	22ff      	movs	r2, #255	; 0xff
 8005390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005394:	f001 f82e 	bl	80063f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005398:	f000 fffe 	bl	8006398 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053a4:	e011      	b.n	80053ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d012      	beq.n	80053d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3310      	adds	r3, #16
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fc44 	bl	8005c40 <xTaskRemoveFromEventList>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053be:	f000 fd17 	bl	8005df0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80053c2:	7bbb      	ldrb	r3, [r7, #14]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dce9      	bgt.n	80053a6 <prvUnlockQueue+0x60>
 80053d2:	e000      	b.n	80053d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80053d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	22ff      	movs	r2, #255	; 0xff
 80053da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80053de:	f001 f809 	bl	80063f4 <vPortExitCritical>
}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053f2:	f000 ffd1 	bl	8006398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d102      	bne.n	8005404 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80053fe:	2301      	movs	r3, #1
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	e001      	b.n	8005408 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005408:	f000 fff4 	bl	80063f4 <vPortExitCritical>

	return xReturn;
 800540c:	68fb      	ldr	r3, [r7, #12]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800541e:	f000 ffbb 	bl	8006398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	429a      	cmp	r2, r3
 800542c:	d102      	bne.n	8005434 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800542e:	2301      	movs	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e001      	b.n	8005438 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005438:	f000 ffdc 	bl	80063f4 <vPortExitCritical>

	return xReturn;
 800543c:	68fb      	ldr	r3, [r7, #12]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005446:	b580      	push	{r7, lr}
 8005448:	b08e      	sub	sp, #56	; 0x38
 800544a:	af04      	add	r7, sp, #16
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <xTaskCreateStatic+0x28>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	623b      	str	r3, [r7, #32]
 800546c:	e7fe      	b.n	800546c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <xTaskCreateStatic+0x42>
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	e7fe      	b.n	8005486 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005488:	2354      	movs	r3, #84	; 0x54
 800548a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b54      	cmp	r3, #84	; 0x54
 8005490:	d009      	beq.n	80054a6 <xTaskCreateStatic+0x60>
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	61bb      	str	r3, [r7, #24]
 80054a4:	e7fe      	b.n	80054a4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01e      	beq.n	80054ea <xTaskCreateStatic+0xa4>
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01b      	beq.n	80054ea <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054c4:	2300      	movs	r3, #0
 80054c6:	9303      	str	r3, [sp, #12]
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	9302      	str	r3, [sp, #8]
 80054cc:	f107 0314 	add.w	r3, r7, #20
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f850 	bl	8005582 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054e4:	f000 f8cc 	bl	8005680 <prvAddNewTaskToReadyList>
 80054e8:	e001      	b.n	80054ee <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054ee:	697b      	ldr	r3, [r7, #20]
	}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3728      	adds	r7, #40	; 0x28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08c      	sub	sp, #48	; 0x30
 80054fc:	af04      	add	r7, sp, #16
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	4613      	mov	r3, r2
 8005506:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4618      	mov	r0, r3
 800550e:	f001 f839 	bl	8006584 <pvPortMalloc>
 8005512:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00e      	beq.n	8005538 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800551a:	2054      	movs	r0, #84	; 0x54
 800551c:	f001 f832 	bl	8006584 <pvPortMalloc>
 8005520:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	631a      	str	r2, [r3, #48]	; 0x30
 800552e:	e005      	b.n	800553c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005530:	6978      	ldr	r0, [r7, #20]
 8005532:	f001 f8e9 	bl	8006708 <vPortFree>
 8005536:	e001      	b.n	800553c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d017      	beq.n	8005572 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800554a:	88fa      	ldrh	r2, [r7, #6]
 800554c:	2300      	movs	r3, #0
 800554e:	9303      	str	r3, [sp, #12]
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	9302      	str	r3, [sp, #8]
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f80e 	bl	8005582 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005566:	69f8      	ldr	r0, [r7, #28]
 8005568:	f000 f88a 	bl	8005680 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800556c:	2301      	movs	r3, #1
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e002      	b.n	8005578 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005572:	f04f 33ff 	mov.w	r3, #4294967295
 8005576:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005578:	69bb      	ldr	r3, [r7, #24]
	}
 800557a:	4618      	mov	r0, r3
 800557c:	3720      	adds	r7, #32
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b088      	sub	sp, #32
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	607a      	str	r2, [r7, #4]
 800558e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800559a:	3b01      	subs	r3, #1
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f023 0307 	bic.w	r3, r3, #7
 80055a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d009      	beq.n	80055c8 <prvInitialiseNewTask+0x46>
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e7fe      	b.n	80055c6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055c8:	2300      	movs	r3, #0
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	e012      	b.n	80055f4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	7819      	ldrb	r1, [r3, #0]
 80055d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	4413      	add	r3, r2
 80055dc:	3334      	adds	r3, #52	; 0x34
 80055de:	460a      	mov	r2, r1
 80055e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	4413      	add	r3, r2
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d006      	beq.n	80055fc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	3301      	adds	r3, #1
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b0f      	cmp	r3, #15
 80055f8:	d9e9      	bls.n	80055ce <prvInitialiseNewTask+0x4c>
 80055fa:	e000      	b.n	80055fe <prvInitialiseNewTask+0x7c>
		{
			break;
 80055fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	2b06      	cmp	r3, #6
 800560a:	d901      	bls.n	8005610 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800560c:	2306      	movs	r3, #6
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005614:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800561a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	2200      	movs	r2, #0
 8005620:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	3304      	adds	r3, #4
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff f94f 	bl	80048ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	3318      	adds	r3, #24
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff f94a 	bl	80048ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	f1c3 0207 	rsb	r2, r3, #7
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800564a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	2200      	movs	r2, #0
 8005650:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	68f9      	ldr	r1, [r7, #12]
 800565e:	69b8      	ldr	r0, [r7, #24]
 8005660:	f000 fdb0 	bl	80061c4 <pxPortInitialiseStack>
 8005664:	4602      	mov	r2, r0
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005676:	bf00      	nop
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005688:	f000 fe86 	bl	8006398 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800568c:	4b2a      	ldr	r3, [pc, #168]	; (8005738 <prvAddNewTaskToReadyList+0xb8>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	4a29      	ldr	r2, [pc, #164]	; (8005738 <prvAddNewTaskToReadyList+0xb8>)
 8005694:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005696:	4b29      	ldr	r3, [pc, #164]	; (800573c <prvAddNewTaskToReadyList+0xbc>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800569e:	4a27      	ldr	r2, [pc, #156]	; (800573c <prvAddNewTaskToReadyList+0xbc>)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056a4:	4b24      	ldr	r3, [pc, #144]	; (8005738 <prvAddNewTaskToReadyList+0xb8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d110      	bne.n	80056ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056ac:	f000 fbc4 	bl	8005e38 <prvInitialiseTaskLists>
 80056b0:	e00d      	b.n	80056ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056b2:	4b23      	ldr	r3, [pc, #140]	; (8005740 <prvAddNewTaskToReadyList+0xc0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d109      	bne.n	80056ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056ba:	4b20      	ldr	r3, [pc, #128]	; (800573c <prvAddNewTaskToReadyList+0xbc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d802      	bhi.n	80056ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056c8:	4a1c      	ldr	r2, [pc, #112]	; (800573c <prvAddNewTaskToReadyList+0xbc>)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056ce:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <prvAddNewTaskToReadyList+0xc4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3301      	adds	r3, #1
 80056d4:	4a1b      	ldr	r2, [pc, #108]	; (8005744 <prvAddNewTaskToReadyList+0xc4>)
 80056d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	2201      	movs	r2, #1
 80056de:	409a      	lsls	r2, r3
 80056e0:	4b19      	ldr	r3, [pc, #100]	; (8005748 <prvAddNewTaskToReadyList+0xc8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	4a18      	ldr	r2, [pc, #96]	; (8005748 <prvAddNewTaskToReadyList+0xc8>)
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4a15      	ldr	r2, [pc, #84]	; (800574c <prvAddNewTaskToReadyList+0xcc>)
 80056f8:	441a      	add	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3304      	adds	r3, #4
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f7ff f8ee 	bl	80048e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005706:	f000 fe75 	bl	80063f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800570a:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <prvAddNewTaskToReadyList+0xc0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00e      	beq.n	8005730 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <prvAddNewTaskToReadyList+0xbc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	429a      	cmp	r2, r3
 800571e:	d207      	bcs.n	8005730 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <prvAddNewTaskToReadyList+0xd0>)
 8005722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005730:	bf00      	nop
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	200003f4 	.word	0x200003f4
 800573c:	200002f4 	.word	0x200002f4
 8005740:	20000400 	.word	0x20000400
 8005744:	20000410 	.word	0x20000410
 8005748:	200003fc 	.word	0x200003fc
 800574c:	200002f8 	.word	0x200002f8
 8005750:	e000ed04 	.word	0xe000ed04

08005754 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d016      	beq.n	8005794 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005766:	4b13      	ldr	r3, [pc, #76]	; (80057b4 <vTaskDelay+0x60>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <vTaskDelay+0x2e>
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	60bb      	str	r3, [r7, #8]
 8005780:	e7fe      	b.n	8005780 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005782:	f000 f879 	bl	8005878 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005786:	2100      	movs	r1, #0
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fcb5 	bl	80060f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800578e:	f000 f881 	bl	8005894 <xTaskResumeAll>
 8005792:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d107      	bne.n	80057aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <vTaskDelay+0x64>)
 800579c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	2000041c 	.word	0x2000041c
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08a      	sub	sp, #40	; 0x28
 80057c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057ca:	463a      	mov	r2, r7
 80057cc:	1d39      	adds	r1, r7, #4
 80057ce:	f107 0308 	add.w	r3, r7, #8
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fa ff3a 	bl	800064c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057d8:	6839      	ldr	r1, [r7, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	9202      	str	r2, [sp, #8]
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	2300      	movs	r3, #0
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	2300      	movs	r3, #0
 80057e8:	460a      	mov	r2, r1
 80057ea:	491d      	ldr	r1, [pc, #116]	; (8005860 <vTaskStartScheduler+0xa4>)
 80057ec:	481d      	ldr	r0, [pc, #116]	; (8005864 <vTaskStartScheduler+0xa8>)
 80057ee:	f7ff fe2a 	bl	8005446 <xTaskCreateStatic>
 80057f2:	4602      	mov	r2, r0
 80057f4:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <vTaskStartScheduler+0xac>)
 80057f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057f8:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <vTaskStartScheduler+0xac>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005800:	2301      	movs	r3, #1
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	e001      	b.n	800580a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d115      	bne.n	800583c <vTaskStartScheduler+0x80>
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005822:	4b12      	ldr	r3, [pc, #72]	; (800586c <vTaskStartScheduler+0xb0>)
 8005824:	f04f 32ff 	mov.w	r2, #4294967295
 8005828:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800582a:	4b11      	ldr	r3, [pc, #68]	; (8005870 <vTaskStartScheduler+0xb4>)
 800582c:	2201      	movs	r2, #1
 800582e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005830:	4b10      	ldr	r3, [pc, #64]	; (8005874 <vTaskStartScheduler+0xb8>)
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005836:	f000 fd3f 	bl	80062b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800583a:	e00d      	b.n	8005858 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d109      	bne.n	8005858 <vTaskStartScheduler+0x9c>
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e7fe      	b.n	8005856 <vTaskStartScheduler+0x9a>
}
 8005858:	bf00      	nop
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	08006b74 	.word	0x08006b74
 8005864:	08005e09 	.word	0x08005e09
 8005868:	20000418 	.word	0x20000418
 800586c:	20000414 	.word	0x20000414
 8005870:	20000400 	.word	0x20000400
 8005874:	200003f8 	.word	0x200003f8

08005878 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800587c:	4b04      	ldr	r3, [pc, #16]	; (8005890 <vTaskSuspendAll+0x18>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3301      	adds	r3, #1
 8005882:	4a03      	ldr	r2, [pc, #12]	; (8005890 <vTaskSuspendAll+0x18>)
 8005884:	6013      	str	r3, [r2, #0]
}
 8005886:	bf00      	nop
 8005888:	46bd      	mov	sp, r7
 800588a:	bc80      	pop	{r7}
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	2000041c 	.word	0x2000041c

08005894 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800589e:	2300      	movs	r3, #0
 80058a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058a2:	4b41      	ldr	r3, [pc, #260]	; (80059a8 <xTaskResumeAll+0x114>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d109      	bne.n	80058be <xTaskResumeAll+0x2a>
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	e7fe      	b.n	80058bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058be:	f000 fd6b 	bl	8006398 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058c2:	4b39      	ldr	r3, [pc, #228]	; (80059a8 <xTaskResumeAll+0x114>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	4a37      	ldr	r2, [pc, #220]	; (80059a8 <xTaskResumeAll+0x114>)
 80058ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058cc:	4b36      	ldr	r3, [pc, #216]	; (80059a8 <xTaskResumeAll+0x114>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d161      	bne.n	8005998 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058d4:	4b35      	ldr	r3, [pc, #212]	; (80059ac <xTaskResumeAll+0x118>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d05d      	beq.n	8005998 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058dc:	e02e      	b.n	800593c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80058de:	4b34      	ldr	r3, [pc, #208]	; (80059b0 <xTaskResumeAll+0x11c>)
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3318      	adds	r3, #24
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff f854 	bl	8004998 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff f84f 	bl	8004998 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	2201      	movs	r2, #1
 8005900:	409a      	lsls	r2, r3
 8005902:	4b2c      	ldr	r3, [pc, #176]	; (80059b4 <xTaskResumeAll+0x120>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4313      	orrs	r3, r2
 8005908:	4a2a      	ldr	r2, [pc, #168]	; (80059b4 <xTaskResumeAll+0x120>)
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4a27      	ldr	r2, [pc, #156]	; (80059b8 <xTaskResumeAll+0x124>)
 800591a:	441a      	add	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f7fe ffdd 	bl	80048e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	4b23      	ldr	r3, [pc, #140]	; (80059bc <xTaskResumeAll+0x128>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005936:	4b22      	ldr	r3, [pc, #136]	; (80059c0 <xTaskResumeAll+0x12c>)
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800593c:	4b1c      	ldr	r3, [pc, #112]	; (80059b0 <xTaskResumeAll+0x11c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1cc      	bne.n	80058de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800594a:	f000 fb0f 	bl	8005f6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800594e:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <xTaskResumeAll+0x130>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d010      	beq.n	800597c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800595a:	f000 f837 	bl	80059cc <xTaskIncrementTick>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005964:	4b16      	ldr	r3, [pc, #88]	; (80059c0 <xTaskResumeAll+0x12c>)
 8005966:	2201      	movs	r2, #1
 8005968:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3b01      	subs	r3, #1
 800596e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f1      	bne.n	800595a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005976:	4b13      	ldr	r3, [pc, #76]	; (80059c4 <xTaskResumeAll+0x130>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800597c:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <xTaskResumeAll+0x12c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d009      	beq.n	8005998 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005984:	2301      	movs	r3, #1
 8005986:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005988:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <xTaskResumeAll+0x134>)
 800598a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005998:	f000 fd2c 	bl	80063f4 <vPortExitCritical>

	return xAlreadyYielded;
 800599c:	68bb      	ldr	r3, [r7, #8]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	2000041c 	.word	0x2000041c
 80059ac:	200003f4 	.word	0x200003f4
 80059b0:	200003b4 	.word	0x200003b4
 80059b4:	200003fc 	.word	0x200003fc
 80059b8:	200002f8 	.word	0x200002f8
 80059bc:	200002f4 	.word	0x200002f4
 80059c0:	20000408 	.word	0x20000408
 80059c4:	20000404 	.word	0x20000404
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d6:	4b50      	ldr	r3, [pc, #320]	; (8005b18 <xTaskIncrementTick+0x14c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f040 808c 	bne.w	8005af8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059e0:	4b4e      	ldr	r3, [pc, #312]	; (8005b1c <xTaskIncrementTick+0x150>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3301      	adds	r3, #1
 80059e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059e8:	4a4c      	ldr	r2, [pc, #304]	; (8005b1c <xTaskIncrementTick+0x150>)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d11f      	bne.n	8005a34 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80059f4:	4b4a      	ldr	r3, [pc, #296]	; (8005b20 <xTaskIncrementTick+0x154>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <xTaskIncrementTick+0x46>
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	e7fe      	b.n	8005a10 <xTaskIncrementTick+0x44>
 8005a12:	4b43      	ldr	r3, [pc, #268]	; (8005b20 <xTaskIncrementTick+0x154>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	4b42      	ldr	r3, [pc, #264]	; (8005b24 <xTaskIncrementTick+0x158>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a40      	ldr	r2, [pc, #256]	; (8005b20 <xTaskIncrementTick+0x154>)
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	4a40      	ldr	r2, [pc, #256]	; (8005b24 <xTaskIncrementTick+0x158>)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	4b40      	ldr	r3, [pc, #256]	; (8005b28 <xTaskIncrementTick+0x15c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	4a3e      	ldr	r2, [pc, #248]	; (8005b28 <xTaskIncrementTick+0x15c>)
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	f000 fa9c 	bl	8005f6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a34:	4b3d      	ldr	r3, [pc, #244]	; (8005b2c <xTaskIncrementTick+0x160>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d34d      	bcc.n	8005ada <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a3e:	4b38      	ldr	r3, [pc, #224]	; (8005b20 <xTaskIncrementTick+0x154>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <xTaskIncrementTick+0x80>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <xTaskIncrementTick+0x82>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d004      	beq.n	8005a5c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a52:	4b36      	ldr	r3, [pc, #216]	; (8005b2c <xTaskIncrementTick+0x160>)
 8005a54:	f04f 32ff 	mov.w	r2, #4294967295
 8005a58:	601a      	str	r2, [r3, #0]
					break;
 8005a5a:	e03e      	b.n	8005ada <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a5c:	4b30      	ldr	r3, [pc, #192]	; (8005b20 <xTaskIncrementTick+0x154>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d203      	bcs.n	8005a7c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a74:	4a2d      	ldr	r2, [pc, #180]	; (8005b2c <xTaskIncrementTick+0x160>)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6013      	str	r3, [r2, #0]
						break;
 8005a7a:	e02e      	b.n	8005ada <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe ff89 	bl	8004998 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d004      	beq.n	8005a98 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	3318      	adds	r3, #24
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe ff80 	bl	8004998 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	409a      	lsls	r2, r3
 8005aa0:	4b23      	ldr	r3, [pc, #140]	; (8005b30 <xTaskIncrementTick+0x164>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	4a22      	ldr	r2, [pc, #136]	; (8005b30 <xTaskIncrementTick+0x164>)
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4a1f      	ldr	r2, [pc, #124]	; (8005b34 <xTaskIncrementTick+0x168>)
 8005ab8:	441a      	add	r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	3304      	adds	r3, #4
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	f7fe ff0e 	bl	80048e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aca:	4b1b      	ldr	r3, [pc, #108]	; (8005b38 <xTaskIncrementTick+0x16c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d3b4      	bcc.n	8005a3e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ad8:	e7b1      	b.n	8005a3e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ada:	4b17      	ldr	r3, [pc, #92]	; (8005b38 <xTaskIncrementTick+0x16c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae0:	4914      	ldr	r1, [pc, #80]	; (8005b34 <xTaskIncrementTick+0x168>)
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d907      	bls.n	8005b02 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005af2:	2301      	movs	r3, #1
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	e004      	b.n	8005b02 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005af8:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <xTaskIncrementTick+0x170>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3301      	adds	r3, #1
 8005afe:	4a0f      	ldr	r2, [pc, #60]	; (8005b3c <xTaskIncrementTick+0x170>)
 8005b00:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005b02:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <xTaskIncrementTick+0x174>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005b0e:	697b      	ldr	r3, [r7, #20]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	2000041c 	.word	0x2000041c
 8005b1c:	200003f8 	.word	0x200003f8
 8005b20:	200003ac 	.word	0x200003ac
 8005b24:	200003b0 	.word	0x200003b0
 8005b28:	2000040c 	.word	0x2000040c
 8005b2c:	20000414 	.word	0x20000414
 8005b30:	200003fc 	.word	0x200003fc
 8005b34:	200002f8 	.word	0x200002f8
 8005b38:	200002f4 	.word	0x200002f4
 8005b3c:	20000404 	.word	0x20000404
 8005b40:	20000408 	.word	0x20000408

08005b44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b4a:	4b26      	ldr	r3, [pc, #152]	; (8005be4 <vTaskSwitchContext+0xa0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b52:	4b25      	ldr	r3, [pc, #148]	; (8005be8 <vTaskSwitchContext+0xa4>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b58:	e03e      	b.n	8005bd8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005b5a:	4b23      	ldr	r3, [pc, #140]	; (8005be8 <vTaskSwitchContext+0xa4>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005b60:	4b22      	ldr	r3, [pc, #136]	; (8005bec <vTaskSwitchContext+0xa8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	fab3 f383 	clz	r3, r3
 8005b6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b6e:	7afb      	ldrb	r3, [r7, #11]
 8005b70:	f1c3 031f 	rsb	r3, r3, #31
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	491e      	ldr	r1, [pc, #120]	; (8005bf0 <vTaskSwitchContext+0xac>)
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d109      	bne.n	8005b9e <vTaskSwitchContext+0x5a>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	607b      	str	r3, [r7, #4]
 8005b9c:	e7fe      	b.n	8005b9c <vTaskSwitchContext+0x58>
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4a11      	ldr	r2, [pc, #68]	; (8005bf0 <vTaskSwitchContext+0xac>)
 8005baa:	4413      	add	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	605a      	str	r2, [r3, #4]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d104      	bne.n	8005bce <vTaskSwitchContext+0x8a>
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	605a      	str	r2, [r3, #4]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4a07      	ldr	r2, [pc, #28]	; (8005bf4 <vTaskSwitchContext+0xb0>)
 8005bd6:	6013      	str	r3, [r2, #0]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	2000041c 	.word	0x2000041c
 8005be8:	20000408 	.word	0x20000408
 8005bec:	200003fc 	.word	0x200003fc
 8005bf0:	200002f8 	.word	0x200002f8
 8005bf4:	200002f4 	.word	0x200002f4

08005bf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <vTaskPlaceOnEventList+0x24>
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	e7fe      	b.n	8005c1a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c1c:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <vTaskPlaceOnEventList+0x44>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3318      	adds	r3, #24
 8005c22:	4619      	mov	r1, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7fe fe7f 	bl	8004928 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	6838      	ldr	r0, [r7, #0]
 8005c2e:	f000 fa63 	bl	80060f8 <prvAddCurrentTaskToDelayedList>
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	200002f4 	.word	0x200002f4

08005c40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <xTaskRemoveFromEventList+0x2a>
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	e7fe      	b.n	8005c68 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	3318      	adds	r3, #24
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe fe92 	bl	8004998 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c74:	4b1d      	ldr	r3, [pc, #116]	; (8005cec <xTaskRemoveFromEventList+0xac>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d11c      	bne.n	8005cb6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fe fe89 	bl	8004998 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	409a      	lsls	r2, r3
 8005c8e:	4b18      	ldr	r3, [pc, #96]	; (8005cf0 <xTaskRemoveFromEventList+0xb0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	4a16      	ldr	r2, [pc, #88]	; (8005cf0 <xTaskRemoveFromEventList+0xb0>)
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <xTaskRemoveFromEventList+0xb4>)
 8005ca6:	441a      	add	r2, r3
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	f7fe fe17 	bl	80048e2 <vListInsertEnd>
 8005cb4:	e005      	b.n	8005cc2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	3318      	adds	r3, #24
 8005cba:	4619      	mov	r1, r3
 8005cbc:	480e      	ldr	r0, [pc, #56]	; (8005cf8 <xTaskRemoveFromEventList+0xb8>)
 8005cbe:	f7fe fe10 	bl	80048e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <xTaskRemoveFromEventList+0xbc>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d905      	bls.n	8005cdc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cd4:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <xTaskRemoveFromEventList+0xc0>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	e001      	b.n	8005ce0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005ce0:	697b      	ldr	r3, [r7, #20]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	2000041c 	.word	0x2000041c
 8005cf0:	200003fc 	.word	0x200003fc
 8005cf4:	200002f8 	.word	0x200002f8
 8005cf8:	200003b4 	.word	0x200003b4
 8005cfc:	200002f4 	.word	0x200002f4
 8005d00:	20000408 	.word	0x20000408

08005d04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d0c:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <vTaskInternalSetTimeOutState+0x24>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d14:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <vTaskInternalSetTimeOutState+0x28>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	605a      	str	r2, [r3, #4]
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bc80      	pop	{r7}
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	2000040c 	.word	0x2000040c
 8005d2c:	200003f8 	.word	0x200003f8

08005d30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <xTaskCheckForTimeOut+0x24>
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	e7fe      	b.n	8005d52 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <xTaskCheckForTimeOut+0x3e>
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e7fe      	b.n	8005d6c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005d6e:	f000 fb13 	bl	8006398 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d72:	4b1d      	ldr	r3, [pc, #116]	; (8005de8 <xTaskCheckForTimeOut+0xb8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8a:	d102      	bne.n	8005d92 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	e023      	b.n	8005dda <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4b15      	ldr	r3, [pc, #84]	; (8005dec <xTaskCheckForTimeOut+0xbc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d007      	beq.n	8005dae <xTaskCheckForTimeOut+0x7e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d302      	bcc.n	8005dae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	e015      	b.n	8005dda <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d20b      	bcs.n	8005dd0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	1ad2      	subs	r2, r2, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff ff9d 	bl	8005d04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	e004      	b.n	8005dda <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dda:	f000 fb0b 	bl	80063f4 <vPortExitCritical>

	return xReturn;
 8005dde:	69fb      	ldr	r3, [r7, #28]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3720      	adds	r7, #32
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	200003f8 	.word	0x200003f8
 8005dec:	2000040c 	.word	0x2000040c

08005df0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005df4:	4b03      	ldr	r3, [pc, #12]	; (8005e04 <vTaskMissedYield+0x14>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
}
 8005dfa:	bf00      	nop
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc80      	pop	{r7}
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000408 	.word	0x20000408

08005e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e10:	f000 f852 	bl	8005eb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e14:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <prvIdleTask+0x28>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d9f9      	bls.n	8005e10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <prvIdleTask+0x2c>)
 8005e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e2c:	e7f0      	b.n	8005e10 <prvIdleTask+0x8>
 8005e2e:	bf00      	nop
 8005e30:	200002f8 	.word	0x200002f8
 8005e34:	e000ed04 	.word	0xe000ed04

08005e38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e3e:	2300      	movs	r3, #0
 8005e40:	607b      	str	r3, [r7, #4]
 8005e42:	e00c      	b.n	8005e5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4a12      	ldr	r2, [pc, #72]	; (8005e98 <prvInitialiseTaskLists+0x60>)
 8005e50:	4413      	add	r3, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe fd1a 	bl	800488c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b06      	cmp	r3, #6
 8005e62:	d9ef      	bls.n	8005e44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e64:	480d      	ldr	r0, [pc, #52]	; (8005e9c <prvInitialiseTaskLists+0x64>)
 8005e66:	f7fe fd11 	bl	800488c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e6a:	480d      	ldr	r0, [pc, #52]	; (8005ea0 <prvInitialiseTaskLists+0x68>)
 8005e6c:	f7fe fd0e 	bl	800488c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e70:	480c      	ldr	r0, [pc, #48]	; (8005ea4 <prvInitialiseTaskLists+0x6c>)
 8005e72:	f7fe fd0b 	bl	800488c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e76:	480c      	ldr	r0, [pc, #48]	; (8005ea8 <prvInitialiseTaskLists+0x70>)
 8005e78:	f7fe fd08 	bl	800488c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e7c:	480b      	ldr	r0, [pc, #44]	; (8005eac <prvInitialiseTaskLists+0x74>)
 8005e7e:	f7fe fd05 	bl	800488c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e82:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <prvInitialiseTaskLists+0x78>)
 8005e84:	4a05      	ldr	r2, [pc, #20]	; (8005e9c <prvInitialiseTaskLists+0x64>)
 8005e86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e88:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <prvInitialiseTaskLists+0x7c>)
 8005e8a:	4a05      	ldr	r2, [pc, #20]	; (8005ea0 <prvInitialiseTaskLists+0x68>)
 8005e8c:	601a      	str	r2, [r3, #0]
}
 8005e8e:	bf00      	nop
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	200002f8 	.word	0x200002f8
 8005e9c:	20000384 	.word	0x20000384
 8005ea0:	20000398 	.word	0x20000398
 8005ea4:	200003b4 	.word	0x200003b4
 8005ea8:	200003c8 	.word	0x200003c8
 8005eac:	200003e0 	.word	0x200003e0
 8005eb0:	200003ac 	.word	0x200003ac
 8005eb4:	200003b0 	.word	0x200003b0

08005eb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ebe:	e019      	b.n	8005ef4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ec0:	f000 fa6a 	bl	8006398 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <prvCheckTasksWaitingTermination+0x4c>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe fd61 	bl	8004998 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ed6:	4b0c      	ldr	r3, [pc, #48]	; (8005f08 <prvCheckTasksWaitingTermination+0x50>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <prvCheckTasksWaitingTermination+0x50>)
 8005ede:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <prvCheckTasksWaitingTermination+0x54>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <prvCheckTasksWaitingTermination+0x54>)
 8005ee8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005eea:	f000 fa83 	bl	80063f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f80e 	bl	8005f10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ef4:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <prvCheckTasksWaitingTermination+0x54>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e1      	bne.n	8005ec0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	200003c8 	.word	0x200003c8
 8005f08:	200003f4 	.word	0x200003f4
 8005f0c:	200003dc 	.word	0x200003dc

08005f10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d108      	bne.n	8005f34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fbee 	bl	8006708 <vPortFree>
				vPortFree( pxTCB );
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fbeb 	bl	8006708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f32:	e017      	b.n	8005f64 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d103      	bne.n	8005f46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fbe2 	bl	8006708 <vPortFree>
	}
 8005f44:	e00e      	b.n	8005f64 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d009      	beq.n	8005f64 <prvDeleteTCB+0x54>
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	e7fe      	b.n	8005f62 <prvDeleteTCB+0x52>
	}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f72:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <prvResetNextTaskUnblockTime+0x40>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <prvResetNextTaskUnblockTime+0x14>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e000      	b.n	8005f82 <prvResetNextTaskUnblockTime+0x16>
 8005f80:	2300      	movs	r3, #0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d004      	beq.n	8005f90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f86:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <prvResetNextTaskUnblockTime+0x44>)
 8005f88:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f8e:	e008      	b.n	8005fa2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <prvResetNextTaskUnblockTime+0x40>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	4a04      	ldr	r2, [pc, #16]	; (8005fb0 <prvResetNextTaskUnblockTime+0x44>)
 8005fa0:	6013      	str	r3, [r2, #0]
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bc80      	pop	{r7}
 8005faa:	4770      	bx	lr
 8005fac:	200003ac 	.word	0x200003ac
 8005fb0:	20000414 	.word	0x20000414

08005fb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fba:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <xTaskGetSchedulerState+0x34>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d102      	bne.n	8005fc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	e008      	b.n	8005fda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc8:	4b08      	ldr	r3, [pc, #32]	; (8005fec <xTaskGetSchedulerState+0x38>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	607b      	str	r3, [r7, #4]
 8005fd4:	e001      	b.n	8005fda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fda:	687b      	ldr	r3, [r7, #4]
	}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	20000400 	.word	0x20000400
 8005fec:	2000041c 	.word	0x2000041c

08005ff0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d06c      	beq.n	80060e0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006006:	4b39      	ldr	r3, [pc, #228]	; (80060ec <xTaskPriorityDisinherit+0xfc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	d009      	beq.n	8006024 <xTaskPriorityDisinherit+0x34>
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e7fe      	b.n	8006022 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006028:	2b00      	cmp	r3, #0
 800602a:	d109      	bne.n	8006040 <xTaskPriorityDisinherit+0x50>
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	e7fe      	b.n	800603e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006044:	1e5a      	subs	r2, r3, #1
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006052:	429a      	cmp	r2, r3
 8006054:	d044      	beq.n	80060e0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605a:	2b00      	cmp	r3, #0
 800605c:	d140      	bne.n	80060e0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	3304      	adds	r3, #4
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fc98 	bl	8004998 <uxListRemove>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d115      	bne.n	800609a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006072:	491f      	ldr	r1, [pc, #124]	; (80060f0 <xTaskPriorityDisinherit+0x100>)
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <xTaskPriorityDisinherit+0xaa>
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	2201      	movs	r2, #1
 800608a:	fa02 f303 	lsl.w	r3, r2, r3
 800608e:	43da      	mvns	r2, r3
 8006090:	4b18      	ldr	r3, [pc, #96]	; (80060f4 <xTaskPriorityDisinherit+0x104>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4013      	ands	r3, r2
 8006096:	4a17      	ldr	r2, [pc, #92]	; (80060f4 <xTaskPriorityDisinherit+0x104>)
 8006098:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	f1c3 0207 	rsb	r2, r3, #7
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	2201      	movs	r2, #1
 80060b4:	409a      	lsls	r2, r3
 80060b6:	4b0f      	ldr	r3, [pc, #60]	; (80060f4 <xTaskPriorityDisinherit+0x104>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	4a0d      	ldr	r2, [pc, #52]	; (80060f4 <xTaskPriorityDisinherit+0x104>)
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4a08      	ldr	r2, [pc, #32]	; (80060f0 <xTaskPriorityDisinherit+0x100>)
 80060ce:	441a      	add	r2, r3
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f7fe fc03 	bl	80048e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060dc:	2301      	movs	r3, #1
 80060de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060e0:	697b      	ldr	r3, [r7, #20]
	}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	200002f4 	.word	0x200002f4
 80060f0:	200002f8 	.word	0x200002f8
 80060f4:	200003fc 	.word	0x200003fc

080060f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006102:	4b29      	ldr	r3, [pc, #164]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006108:	4b28      	ldr	r3, [pc, #160]	; (80061ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3304      	adds	r3, #4
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe fc42 	bl	8004998 <uxListRemove>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10b      	bne.n	8006132 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800611a:	4b24      	ldr	r3, [pc, #144]	; (80061ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	2201      	movs	r2, #1
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43da      	mvns	r2, r3
 8006128:	4b21      	ldr	r3, [pc, #132]	; (80061b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4013      	ands	r3, r2
 800612e:	4a20      	ldr	r2, [pc, #128]	; (80061b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006130:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d10a      	bne.n	8006150 <prvAddCurrentTaskToDelayedList+0x58>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006140:	4b1a      	ldr	r3, [pc, #104]	; (80061ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	481a      	ldr	r0, [pc, #104]	; (80061b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800614a:	f7fe fbca 	bl	80048e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800614e:	e026      	b.n	800619e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4413      	add	r3, r2
 8006156:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006158:	4b14      	ldr	r3, [pc, #80]	; (80061ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	429a      	cmp	r2, r3
 8006166:	d209      	bcs.n	800617c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006168:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3304      	adds	r3, #4
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f7fe fbd7 	bl	8004928 <vListInsert>
}
 800617a:	e010      	b.n	800619e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800617c:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3304      	adds	r3, #4
 8006186:	4619      	mov	r1, r3
 8006188:	4610      	mov	r0, r2
 800618a:	f7fe fbcd 	bl	8004928 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800618e:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	429a      	cmp	r2, r3
 8006196:	d202      	bcs.n	800619e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006198:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6013      	str	r3, [r2, #0]
}
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	200003f8 	.word	0x200003f8
 80061ac:	200002f4 	.word	0x200002f4
 80061b0:	200003fc 	.word	0x200003fc
 80061b4:	200003e0 	.word	0x200003e0
 80061b8:	200003b0 	.word	0x200003b0
 80061bc:	200003ac 	.word	0x200003ac
 80061c0:	20000414 	.word	0x20000414

080061c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3b04      	subs	r3, #4
 80061d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3b04      	subs	r3, #4
 80061e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f023 0201 	bic.w	r2, r3, #1
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3b04      	subs	r3, #4
 80061f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061f4:	4a08      	ldr	r2, [pc, #32]	; (8006218 <pxPortInitialiseStack+0x54>)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3b14      	subs	r3, #20
 80061fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3b20      	subs	r3, #32
 800620a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800620c:	68fb      	ldr	r3, [r7, #12]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr
 8006218:	0800621d 	.word	0x0800621d

0800621c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006222:	2300      	movs	r3, #0
 8006224:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006226:	4b10      	ldr	r3, [pc, #64]	; (8006268 <prvTaskExitError+0x4c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d009      	beq.n	8006244 <prvTaskExitError+0x28>
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	e7fe      	b.n	8006242 <prvTaskExitError+0x26>
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006256:	bf00      	nop
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0fc      	beq.n	8006258 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800625e:	bf00      	nop
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	bc80      	pop	{r7}
 8006266:	4770      	bx	lr
 8006268:	2000000c 	.word	0x2000000c
 800626c:	00000000 	.word	0x00000000

08006270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006270:	4b07      	ldr	r3, [pc, #28]	; (8006290 <pxCurrentTCBConst2>)
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800627a:	f380 8809 	msr	PSP, r0
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8811 	msr	BASEPRI, r0
 800628a:	f04e 0e0d 	orr.w	lr, lr, #13
 800628e:	4770      	bx	lr

08006290 <pxCurrentTCBConst2>:
 8006290:	200002f4 	.word	0x200002f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006298:	4806      	ldr	r0, [pc, #24]	; (80062b4 <prvPortStartFirstTask+0x1c>)
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f380 8808 	msr	MSP, r0
 80062a2:	b662      	cpsie	i
 80062a4:	b661      	cpsie	f
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	df00      	svc	0
 80062b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062b2:	bf00      	nop
 80062b4:	e000ed08 	.word	0xe000ed08

080062b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062be:	4b31      	ldr	r3, [pc, #196]	; (8006384 <xPortStartScheduler+0xcc>)
 80062c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	22ff      	movs	r2, #255	; 0xff
 80062ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	4b29      	ldr	r3, [pc, #164]	; (8006388 <xPortStartScheduler+0xd0>)
 80062e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062e6:	4b29      	ldr	r3, [pc, #164]	; (800638c <xPortStartScheduler+0xd4>)
 80062e8:	2207      	movs	r2, #7
 80062ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062ec:	e009      	b.n	8006302 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80062ee:	4b27      	ldr	r3, [pc, #156]	; (800638c <xPortStartScheduler+0xd4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	4a25      	ldr	r2, [pc, #148]	; (800638c <xPortStartScheduler+0xd4>)
 80062f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062f8:	78fb      	ldrb	r3, [r7, #3]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006302:	78fb      	ldrb	r3, [r7, #3]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630a:	2b80      	cmp	r3, #128	; 0x80
 800630c:	d0ef      	beq.n	80062ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800630e:	4b1f      	ldr	r3, [pc, #124]	; (800638c <xPortStartScheduler+0xd4>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f1c3 0307 	rsb	r3, r3, #7
 8006316:	2b04      	cmp	r3, #4
 8006318:	d009      	beq.n	800632e <xPortStartScheduler+0x76>
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	60bb      	str	r3, [r7, #8]
 800632c:	e7fe      	b.n	800632c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800632e:	4b17      	ldr	r3, [pc, #92]	; (800638c <xPortStartScheduler+0xd4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	4a15      	ldr	r2, [pc, #84]	; (800638c <xPortStartScheduler+0xd4>)
 8006336:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006338:	4b14      	ldr	r3, [pc, #80]	; (800638c <xPortStartScheduler+0xd4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006340:	4a12      	ldr	r2, [pc, #72]	; (800638c <xPortStartScheduler+0xd4>)
 8006342:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	b2da      	uxtb	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800634c:	4b10      	ldr	r3, [pc, #64]	; (8006390 <xPortStartScheduler+0xd8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0f      	ldr	r2, [pc, #60]	; (8006390 <xPortStartScheduler+0xd8>)
 8006352:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006358:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <xPortStartScheduler+0xd8>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a0c      	ldr	r2, [pc, #48]	; (8006390 <xPortStartScheduler+0xd8>)
 800635e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006364:	f000 f8b0 	bl	80064c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006368:	4b0a      	ldr	r3, [pc, #40]	; (8006394 <xPortStartScheduler+0xdc>)
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800636e:	f7ff ff93 	bl	8006298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006372:	f7ff fbe7 	bl	8005b44 <vTaskSwitchContext>
	prvTaskExitError();
 8006376:	f7ff ff51 	bl	800621c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	e000e400 	.word	0xe000e400
 8006388:	20000420 	.word	0x20000420
 800638c:	20000424 	.word	0x20000424
 8006390:	e000ed20 	.word	0xe000ed20
 8006394:	2000000c 	.word	0x2000000c

08006398 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063b0:	4b0e      	ldr	r3, [pc, #56]	; (80063ec <vPortEnterCritical+0x54>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	4a0d      	ldr	r2, [pc, #52]	; (80063ec <vPortEnterCritical+0x54>)
 80063b8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063ba:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <vPortEnterCritical+0x54>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d10e      	bne.n	80063e0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063c2:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <vPortEnterCritical+0x58>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d009      	beq.n	80063e0 <vPortEnterCritical+0x48>
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	603b      	str	r3, [r7, #0]
 80063de:	e7fe      	b.n	80063de <vPortEnterCritical+0x46>
	}
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bc80      	pop	{r7}
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	2000000c 	.word	0x2000000c
 80063f0:	e000ed04 	.word	0xe000ed04

080063f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063fa:	4b10      	ldr	r3, [pc, #64]	; (800643c <vPortExitCritical+0x48>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d109      	bne.n	8006416 <vPortExitCritical+0x22>
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	607b      	str	r3, [r7, #4]
 8006414:	e7fe      	b.n	8006414 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006416:	4b09      	ldr	r3, [pc, #36]	; (800643c <vPortExitCritical+0x48>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3b01      	subs	r3, #1
 800641c:	4a07      	ldr	r2, [pc, #28]	; (800643c <vPortExitCritical+0x48>)
 800641e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006420:	4b06      	ldr	r3, [pc, #24]	; (800643c <vPortExitCritical+0x48>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d104      	bne.n	8006432 <vPortExitCritical+0x3e>
 8006428:	2300      	movs	r3, #0
 800642a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr
 800643c:	2000000c 	.word	0x2000000c

08006440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006440:	f3ef 8009 	mrs	r0, PSP
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <pxCurrentTCBConst>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006450:	6010      	str	r0, [r2, #0]
 8006452:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006456:	f04f 0050 	mov.w	r0, #80	; 0x50
 800645a:	f380 8811 	msr	BASEPRI, r0
 800645e:	f7ff fb71 	bl	8005b44 <vTaskSwitchContext>
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	f380 8811 	msr	BASEPRI, r0
 800646a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800646e:	6819      	ldr	r1, [r3, #0]
 8006470:	6808      	ldr	r0, [r1, #0]
 8006472:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006476:	f380 8809 	msr	PSP, r0
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	4770      	bx	lr

08006480 <pxCurrentTCBConst>:
 8006480:	200002f4 	.word	0x200002f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop

08006488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064a0:	f7ff fa94 	bl	80059cc <xTaskIncrementTick>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064aa:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <xPortSysTickHandler+0x3c>)
 80064ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	2300      	movs	r3, #0
 80064b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80064bc:	bf00      	nop
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	e000ed04 	.word	0xe000ed04

080064c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <vPortSetupTimerInterrupt+0x30>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064d2:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <vPortSetupTimerInterrupt+0x34>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064d8:	4b09      	ldr	r3, [pc, #36]	; (8006500 <vPortSetupTimerInterrupt+0x38>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a09      	ldr	r2, [pc, #36]	; (8006504 <vPortSetupTimerInterrupt+0x3c>)
 80064de:	fba2 2303 	umull	r2, r3, r2, r3
 80064e2:	099b      	lsrs	r3, r3, #6
 80064e4:	4a08      	ldr	r2, [pc, #32]	; (8006508 <vPortSetupTimerInterrupt+0x40>)
 80064e6:	3b01      	subs	r3, #1
 80064e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064ea:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <vPortSetupTimerInterrupt+0x30>)
 80064ec:	2207      	movs	r2, #7
 80064ee:	601a      	str	r2, [r3, #0]
}
 80064f0:	bf00      	nop
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr
 80064f8:	e000e010 	.word	0xe000e010
 80064fc:	e000e018 	.word	0xe000e018
 8006500:	20000000 	.word	0x20000000
 8006504:	10624dd3 	.word	0x10624dd3
 8006508:	e000e014 	.word	0xe000e014

0800650c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006512:	f3ef 8305 	mrs	r3, IPSR
 8006516:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2b0f      	cmp	r3, #15
 800651c:	d913      	bls.n	8006546 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800651e:	4a15      	ldr	r2, [pc, #84]	; (8006574 <vPortValidateInterruptPriority+0x68>)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006528:	4b13      	ldr	r3, [pc, #76]	; (8006578 <vPortValidateInterruptPriority+0x6c>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	7afa      	ldrb	r2, [r7, #11]
 800652e:	429a      	cmp	r2, r3
 8006530:	d209      	bcs.n	8006546 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	607b      	str	r3, [r7, #4]
 8006544:	e7fe      	b.n	8006544 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006546:	4b0d      	ldr	r3, [pc, #52]	; (800657c <vPortValidateInterruptPriority+0x70>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800654e:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <vPortValidateInterruptPriority+0x74>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d909      	bls.n	800656a <vPortValidateInterruptPriority+0x5e>
 8006556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	e7fe      	b.n	8006568 <vPortValidateInterruptPriority+0x5c>
	}
 800656a:	bf00      	nop
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr
 8006574:	e000e3f0 	.word	0xe000e3f0
 8006578:	20000420 	.word	0x20000420
 800657c:	e000ed0c 	.word	0xe000ed0c
 8006580:	20000424 	.word	0x20000424

08006584 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08a      	sub	sp, #40	; 0x28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800658c:	2300      	movs	r3, #0
 800658e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006590:	f7ff f972 	bl	8005878 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006594:	4b57      	ldr	r3, [pc, #348]	; (80066f4 <pvPortMalloc+0x170>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800659c:	f000 f90c 	bl	80067b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065a0:	4b55      	ldr	r3, [pc, #340]	; (80066f8 <pvPortMalloc+0x174>)
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f040 808c 	bne.w	80066c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01c      	beq.n	80065ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80065b4:	2208      	movs	r2, #8
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4413      	add	r3, r2
 80065ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d013      	beq.n	80065ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f023 0307 	bic.w	r3, r3, #7
 80065cc:	3308      	adds	r3, #8
 80065ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <pvPortMalloc+0x6a>
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	e7fe      	b.n	80065ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d068      	beq.n	80066c6 <pvPortMalloc+0x142>
 80065f4:	4b41      	ldr	r3, [pc, #260]	; (80066fc <pvPortMalloc+0x178>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d863      	bhi.n	80066c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065fe:	4b40      	ldr	r3, [pc, #256]	; (8006700 <pvPortMalloc+0x17c>)
 8006600:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006602:	4b3f      	ldr	r3, [pc, #252]	; (8006700 <pvPortMalloc+0x17c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006608:	e004      	b.n	8006614 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	429a      	cmp	r2, r3
 800661c:	d903      	bls.n	8006626 <pvPortMalloc+0xa2>
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1f1      	bne.n	800660a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006626:	4b33      	ldr	r3, [pc, #204]	; (80066f4 <pvPortMalloc+0x170>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800662c:	429a      	cmp	r2, r3
 800662e:	d04a      	beq.n	80066c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2208      	movs	r2, #8
 8006636:	4413      	add	r3, r2
 8006638:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	1ad2      	subs	r2, r2, r3
 800664a:	2308      	movs	r3, #8
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	429a      	cmp	r2, r3
 8006650:	d91e      	bls.n	8006690 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4413      	add	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <pvPortMalloc+0xf4>
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	e7fe      	b.n	8006676 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	1ad2      	subs	r2, r2, r3
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800668a:	69b8      	ldr	r0, [r7, #24]
 800668c:	f000 f8f6 	bl	800687c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006690:	4b1a      	ldr	r3, [pc, #104]	; (80066fc <pvPortMalloc+0x178>)
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	4a18      	ldr	r2, [pc, #96]	; (80066fc <pvPortMalloc+0x178>)
 800669c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800669e:	4b17      	ldr	r3, [pc, #92]	; (80066fc <pvPortMalloc+0x178>)
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	4b18      	ldr	r3, [pc, #96]	; (8006704 <pvPortMalloc+0x180>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d203      	bcs.n	80066b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066aa:	4b14      	ldr	r3, [pc, #80]	; (80066fc <pvPortMalloc+0x178>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a15      	ldr	r2, [pc, #84]	; (8006704 <pvPortMalloc+0x180>)
 80066b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <pvPortMalloc+0x174>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066c6:	f7ff f8e5 	bl	8005894 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d009      	beq.n	80066e8 <pvPortMalloc+0x164>
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	e7fe      	b.n	80066e6 <pvPortMalloc+0x162>
	return pvReturn;
 80066e8:	69fb      	ldr	r3, [r7, #28]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3728      	adds	r7, #40	; 0x28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20001030 	.word	0x20001030
 80066f8:	2000103c 	.word	0x2000103c
 80066fc:	20001034 	.word	0x20001034
 8006700:	20001028 	.word	0x20001028
 8006704:	20001038 	.word	0x20001038

08006708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d046      	beq.n	80067a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800671a:	2308      	movs	r3, #8
 800671c:	425b      	negs	r3, r3
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4413      	add	r3, r2
 8006722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	4b20      	ldr	r3, [pc, #128]	; (80067b0 <vPortFree+0xa8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4013      	ands	r3, r2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d109      	bne.n	800674a <vPortFree+0x42>
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	e7fe      	b.n	8006748 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d009      	beq.n	8006766 <vPortFree+0x5e>
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	e7fe      	b.n	8006764 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	4b11      	ldr	r3, [pc, #68]	; (80067b0 <vPortFree+0xa8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4013      	ands	r3, r2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d019      	beq.n	80067a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d115      	bne.n	80067a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <vPortFree+0xa8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	43db      	mvns	r3, r3
 8006786:	401a      	ands	r2, r3
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800678c:	f7ff f874 	bl	8005878 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <vPortFree+0xac>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4413      	add	r3, r2
 800679a:	4a06      	ldr	r2, [pc, #24]	; (80067b4 <vPortFree+0xac>)
 800679c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800679e:	6938      	ldr	r0, [r7, #16]
 80067a0:	f000 f86c 	bl	800687c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80067a4:	f7ff f876 	bl	8005894 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067a8:	bf00      	nop
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	2000103c 	.word	0x2000103c
 80067b4:	20001034 	.word	0x20001034

080067b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80067c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067c4:	4b27      	ldr	r3, [pc, #156]	; (8006864 <prvHeapInit+0xac>)
 80067c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00c      	beq.n	80067ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3307      	adds	r3, #7
 80067d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0307 	bic.w	r3, r3, #7
 80067de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	4a1f      	ldr	r2, [pc, #124]	; (8006864 <prvHeapInit+0xac>)
 80067e8:	4413      	add	r3, r2
 80067ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067f0:	4a1d      	ldr	r2, [pc, #116]	; (8006868 <prvHeapInit+0xb0>)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067f6:	4b1c      	ldr	r3, [pc, #112]	; (8006868 <prvHeapInit+0xb0>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	4413      	add	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006804:	2208      	movs	r2, #8
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1a9b      	subs	r3, r3, r2
 800680a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0307 	bic.w	r3, r3, #7
 8006812:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4a15      	ldr	r2, [pc, #84]	; (800686c <prvHeapInit+0xb4>)
 8006818:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800681a:	4b14      	ldr	r3, [pc, #80]	; (800686c <prvHeapInit+0xb4>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2200      	movs	r2, #0
 8006820:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006822:	4b12      	ldr	r3, [pc, #72]	; (800686c <prvHeapInit+0xb4>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	1ad2      	subs	r2, r2, r3
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006838:	4b0c      	ldr	r3, [pc, #48]	; (800686c <prvHeapInit+0xb4>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	4a0a      	ldr	r2, [pc, #40]	; (8006870 <prvHeapInit+0xb8>)
 8006846:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	4a09      	ldr	r2, [pc, #36]	; (8006874 <prvHeapInit+0xbc>)
 800684e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006850:	4b09      	ldr	r3, [pc, #36]	; (8006878 <prvHeapInit+0xc0>)
 8006852:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006856:	601a      	str	r2, [r3, #0]
}
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	bc80      	pop	{r7}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	20000428 	.word	0x20000428
 8006868:	20001028 	.word	0x20001028
 800686c:	20001030 	.word	0x20001030
 8006870:	20001038 	.word	0x20001038
 8006874:	20001034 	.word	0x20001034
 8006878:	2000103c 	.word	0x2000103c

0800687c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006884:	4b27      	ldr	r3, [pc, #156]	; (8006924 <prvInsertBlockIntoFreeList+0xa8>)
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	e002      	b.n	8006890 <prvInsertBlockIntoFreeList+0x14>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	429a      	cmp	r2, r3
 8006898:	d8f7      	bhi.n	800688a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	4413      	add	r3, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d108      	bne.n	80068be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	441a      	add	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	441a      	add	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d118      	bne.n	8006904 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	4b14      	ldr	r3, [pc, #80]	; (8006928 <prvInsertBlockIntoFreeList+0xac>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d00d      	beq.n	80068fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	441a      	add	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	e008      	b.n	800690c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068fa:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <prvInsertBlockIntoFreeList+0xac>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	e003      	b.n	800690c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	429a      	cmp	r2, r3
 8006912:	d002      	beq.n	800691a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	bc80      	pop	{r7}
 8006922:	4770      	bx	lr
 8006924:	20001028 	.word	0x20001028
 8006928:	20001030 	.word	0x20001030

0800692c <__errno>:
 800692c:	4b01      	ldr	r3, [pc, #4]	; (8006934 <__errno+0x8>)
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000010 	.word	0x20000010

08006938 <__libc_init_array>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	2500      	movs	r5, #0
 800693c:	4e0c      	ldr	r6, [pc, #48]	; (8006970 <__libc_init_array+0x38>)
 800693e:	4c0d      	ldr	r4, [pc, #52]	; (8006974 <__libc_init_array+0x3c>)
 8006940:	1ba4      	subs	r4, r4, r6
 8006942:	10a4      	asrs	r4, r4, #2
 8006944:	42a5      	cmp	r5, r4
 8006946:	d109      	bne.n	800695c <__libc_init_array+0x24>
 8006948:	f000 f8a2 	bl	8006a90 <_init>
 800694c:	2500      	movs	r5, #0
 800694e:	4e0a      	ldr	r6, [pc, #40]	; (8006978 <__libc_init_array+0x40>)
 8006950:	4c0a      	ldr	r4, [pc, #40]	; (800697c <__libc_init_array+0x44>)
 8006952:	1ba4      	subs	r4, r4, r6
 8006954:	10a4      	asrs	r4, r4, #2
 8006956:	42a5      	cmp	r5, r4
 8006958:	d105      	bne.n	8006966 <__libc_init_array+0x2e>
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006960:	4798      	blx	r3
 8006962:	3501      	adds	r5, #1
 8006964:	e7ee      	b.n	8006944 <__libc_init_array+0xc>
 8006966:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800696a:	4798      	blx	r3
 800696c:	3501      	adds	r5, #1
 800696e:	e7f2      	b.n	8006956 <__libc_init_array+0x1e>
 8006970:	08006b94 	.word	0x08006b94
 8006974:	08006b94 	.word	0x08006b94
 8006978:	08006b94 	.word	0x08006b94
 800697c:	08006b98 	.word	0x08006b98

08006980 <malloc>:
 8006980:	4b02      	ldr	r3, [pc, #8]	; (800698c <malloc+0xc>)
 8006982:	4601      	mov	r1, r0
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	f000 b817 	b.w	80069b8 <_malloc_r>
 800698a:	bf00      	nop
 800698c:	20000010 	.word	0x20000010

08006990 <memcpy>:
 8006990:	b510      	push	{r4, lr}
 8006992:	1e43      	subs	r3, r0, #1
 8006994:	440a      	add	r2, r1
 8006996:	4291      	cmp	r1, r2
 8006998:	d100      	bne.n	800699c <memcpy+0xc>
 800699a:	bd10      	pop	{r4, pc}
 800699c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069a4:	e7f7      	b.n	8006996 <memcpy+0x6>

080069a6 <memset>:
 80069a6:	4603      	mov	r3, r0
 80069a8:	4402      	add	r2, r0
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d100      	bne.n	80069b0 <memset+0xa>
 80069ae:	4770      	bx	lr
 80069b0:	f803 1b01 	strb.w	r1, [r3], #1
 80069b4:	e7f9      	b.n	80069aa <memset+0x4>
	...

080069b8 <_malloc_r>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	1ccd      	adds	r5, r1, #3
 80069bc:	f025 0503 	bic.w	r5, r5, #3
 80069c0:	3508      	adds	r5, #8
 80069c2:	2d0c      	cmp	r5, #12
 80069c4:	bf38      	it	cc
 80069c6:	250c      	movcc	r5, #12
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	4606      	mov	r6, r0
 80069cc:	db01      	blt.n	80069d2 <_malloc_r+0x1a>
 80069ce:	42a9      	cmp	r1, r5
 80069d0:	d903      	bls.n	80069da <_malloc_r+0x22>
 80069d2:	230c      	movs	r3, #12
 80069d4:	6033      	str	r3, [r6, #0]
 80069d6:	2000      	movs	r0, #0
 80069d8:	bd70      	pop	{r4, r5, r6, pc}
 80069da:	f000 f857 	bl	8006a8c <__malloc_lock>
 80069de:	4a21      	ldr	r2, [pc, #132]	; (8006a64 <_malloc_r+0xac>)
 80069e0:	6814      	ldr	r4, [r2, #0]
 80069e2:	4621      	mov	r1, r4
 80069e4:	b991      	cbnz	r1, 8006a0c <_malloc_r+0x54>
 80069e6:	4c20      	ldr	r4, [pc, #128]	; (8006a68 <_malloc_r+0xb0>)
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	b91b      	cbnz	r3, 80069f4 <_malloc_r+0x3c>
 80069ec:	4630      	mov	r0, r6
 80069ee:	f000 f83d 	bl	8006a6c <_sbrk_r>
 80069f2:	6020      	str	r0, [r4, #0]
 80069f4:	4629      	mov	r1, r5
 80069f6:	4630      	mov	r0, r6
 80069f8:	f000 f838 	bl	8006a6c <_sbrk_r>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d124      	bne.n	8006a4a <_malloc_r+0x92>
 8006a00:	230c      	movs	r3, #12
 8006a02:	4630      	mov	r0, r6
 8006a04:	6033      	str	r3, [r6, #0]
 8006a06:	f000 f842 	bl	8006a8e <__malloc_unlock>
 8006a0a:	e7e4      	b.n	80069d6 <_malloc_r+0x1e>
 8006a0c:	680b      	ldr	r3, [r1, #0]
 8006a0e:	1b5b      	subs	r3, r3, r5
 8006a10:	d418      	bmi.n	8006a44 <_malloc_r+0x8c>
 8006a12:	2b0b      	cmp	r3, #11
 8006a14:	d90f      	bls.n	8006a36 <_malloc_r+0x7e>
 8006a16:	600b      	str	r3, [r1, #0]
 8006a18:	18cc      	adds	r4, r1, r3
 8006a1a:	50cd      	str	r5, [r1, r3]
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f000 f836 	bl	8006a8e <__malloc_unlock>
 8006a22:	f104 000b 	add.w	r0, r4, #11
 8006a26:	1d23      	adds	r3, r4, #4
 8006a28:	f020 0007 	bic.w	r0, r0, #7
 8006a2c:	1ac3      	subs	r3, r0, r3
 8006a2e:	d0d3      	beq.n	80069d8 <_malloc_r+0x20>
 8006a30:	425a      	negs	r2, r3
 8006a32:	50e2      	str	r2, [r4, r3]
 8006a34:	e7d0      	b.n	80069d8 <_malloc_r+0x20>
 8006a36:	684b      	ldr	r3, [r1, #4]
 8006a38:	428c      	cmp	r4, r1
 8006a3a:	bf16      	itet	ne
 8006a3c:	6063      	strne	r3, [r4, #4]
 8006a3e:	6013      	streq	r3, [r2, #0]
 8006a40:	460c      	movne	r4, r1
 8006a42:	e7eb      	b.n	8006a1c <_malloc_r+0x64>
 8006a44:	460c      	mov	r4, r1
 8006a46:	6849      	ldr	r1, [r1, #4]
 8006a48:	e7cc      	b.n	80069e4 <_malloc_r+0x2c>
 8006a4a:	1cc4      	adds	r4, r0, #3
 8006a4c:	f024 0403 	bic.w	r4, r4, #3
 8006a50:	42a0      	cmp	r0, r4
 8006a52:	d005      	beq.n	8006a60 <_malloc_r+0xa8>
 8006a54:	1a21      	subs	r1, r4, r0
 8006a56:	4630      	mov	r0, r6
 8006a58:	f000 f808 	bl	8006a6c <_sbrk_r>
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d0cf      	beq.n	8006a00 <_malloc_r+0x48>
 8006a60:	6025      	str	r5, [r4, #0]
 8006a62:	e7db      	b.n	8006a1c <_malloc_r+0x64>
 8006a64:	20001040 	.word	0x20001040
 8006a68:	20001044 	.word	0x20001044

08006a6c <_sbrk_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	2300      	movs	r3, #0
 8006a70:	4c05      	ldr	r4, [pc, #20]	; (8006a88 <_sbrk_r+0x1c>)
 8006a72:	4605      	mov	r5, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	6023      	str	r3, [r4, #0]
 8006a78:	f7fa fda6 	bl	80015c8 <_sbrk>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_sbrk_r+0x1a>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_sbrk_r+0x1a>
 8006a84:	602b      	str	r3, [r5, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	20001200 	.word	0x20001200

08006a8c <__malloc_lock>:
 8006a8c:	4770      	bx	lr

08006a8e <__malloc_unlock>:
 8006a8e:	4770      	bx	lr

08006a90 <_init>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	bf00      	nop
 8006a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a96:	bc08      	pop	{r3}
 8006a98:	469e      	mov	lr, r3
 8006a9a:	4770      	bx	lr

08006a9c <_fini>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr
